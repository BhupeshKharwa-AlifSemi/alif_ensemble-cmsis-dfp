pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh """#!/bin/bash -xe
                    echo -e "✔️ None."
                    """
                }
            }
        }
        stage('Environment') {
            steps {
                script {
                    sh """#!/bin/bash -xe
                        printenv
                        echo -e "✔️ Displayed all environment setting."
                    """
                }
            }
        }
        stage('checkout') {
            steps {
                cleanWs()
                script {
                    sh '''#!/bin/bash

                    repo_name="ensemble-cmsis-dfp_DEV"
                    license_status=$($ARMCLANG_PATH/../../bin/armlm inspect)

                    case "$license_status" in
                      *"No licenses found"*)
                        $ARMCLANG_PATH/../../bin/armlm activate --server http://10.10.60.10:7070 --product HWSKT-EAC0
                        ;;
                      *)
                        echo "ARM License is available."
                        ;;
                    esac

                    if [ -d $repo_name ]; then
                        echo -e "Deleting older repo $repo_name..."
                        rm -rf $repo_name
                    fi

                    CURR_OS=("NONE")
                    CURR_COMPILER=("armclang" "gcc")
                    CURR_DEV=("AE722F80F55D5" "AE1C1F4051920" "AE822FA0E5597")
                    CURR_RTSS=("HE" "HP")
                    CURR_BOOT=("TCM" "MRAM")
                    total_cmakeError=0

                    echo -e "⏳ Checkout Repo 'ensemble-cmsis-dfp_DEV' main branch CHANGE_BRANCH: '$CHANGE_BRANCH' BRANCH_NAME: '$BRANCH_NAME'"
                    git clone org-115832732@github.com:AlifSemiDev/$repo_name.git
                    cd $repo_name
                    echo -e "✅ Cloning is completed."
                    git log -4
                    echo -e "\n\n✔️ Checkout branch $CHANGE_BRANCH."
                    git checkout $CHANGE_BRANCH
                    git log -4
                    echo -e "☑️ Checkout is completed."

                    git format-patch -1
                    export CODE_BASE=$PWD
                    cp -rv $VALIDATION_SCRIPT_DIR/* scripts/
                    grep -rnP "\t" *.patch | sed $'s/\t/→/g'
                    tabCnt=$(grep -roP "\t" *.patch  | wc -l)
                    echo -e "Total tabs: $tabCnt"
                    log=$(./scripts/checkpatch.pl --patch *.patch --ignore CODE_INDENT,TABS)
                    echo "$log"
                    result=$(echo "$log" | grep ".patch total:")
                    echo "$result"
                    errors=$(echo "${result}"   | sed -n "s/.*: \\([0-9]\\+\\) errors.*/\\1/p")
                    warnings=$(echo "${result}" | sed -n "s/.*errors, \\([0-9]\\+\\) warnings.*/\\1/p")
                    echo "🎯Checkpatch has Errors: $errors Warnings: $warnings"

                    cd scripts/cmake
                    tmp=$?
                    if [ "$tmp" -ne 0 ] ; then
                        echo -e "🚫Error: $tmp ❗ cmake script is not available"
                    fi
                    chmod -Rv 777 *.sh

                    total_cfg_run_cnt=0
                    skipped_cfg_run_cnt=0
                    actual_cfg_run_cnt=0
                    fail_cfg_run_cnt=0
                    success_cfg_run_cnt=0

                    for comp in ${!CURR_COMPILER[@]}
                    do
                        for bootType in ${!CURR_BOOT[@]}
                        do
                            for rtssType in ${!CURR_RTSS[@]}
                            do
                                for devName in ${!CURR_DEV[@]}
                                do
                                    for osName in ${!CURR_OS[@]}
                                    do
                                        echo "===================================================================================="
                                        if [ -d build ]; then
                                            echo -e "Deleting Build directory..."
                                            rm -rf $repo_name
                                        fi

                                        total_cfg_run_cnt=$((total_cfg_run_cnt + 1))
                                        echo "🚩 Building for ${CURR_COMPILER[comp]}, ${CURR_DEV[devName]}, ${CURR_OS[osName]}, ${CURR_BOOT[bootType]}  ${CURR_RTSS[rtssType]}"

                                        if [ "${CURR_DEV[devName]}" = "AE1C1F4051920" ] && [ "${CURR_RTSS[rtssType]}" = "HP" ]; then
                                            echo -e "🚨 ${CURR_DEV[devName]} does not have ${CURR_RTSS[rtssType]} subsystem"
                                            skipped_cfg_run_cnt=$((skipped_cfg_run_cnt + 1))
                                            continue
                                        fi

                                        actual_cfg_run_cnt=$((actual_cfg_run_cnt + 1))
                                        ./run.sh -p ${CURR_COMPILER[comp]},${CURR_COMPILER[comp]}_build,${CURR_COMPILER[comp]}_build_test -c --fresh -DBOOT=${CURR_BOOT[bootType]} -DDEVICE=${CURR_DEV[devName]} -DOS=${CURR_OS[osName]} -DRTSS=${CURR_RTSS[rtssType]} -b --clean-first

                                        tmp=$?
                                        total_cmakeError=$((total_cmakeError + tmp))
                                        echo -e "🚫Error Status total_cmakeError: $total_cmakeError and tmp: $tmp"
                                        if [ "$tmp" -ne 0 ] ; then
                                            fail_cfg_run_cnt=$((fail_cfg_run_cnt + 1))
                                        fi
                                        echo "===================================================================================="
                                    done
                                done
                            done
                        done
                    done
                    echo -e "\n"
                    echo -e " 🏆Check-Patch Result =>  Error: $errors, Warnings: $warnings, Tabs: $tabCnt"
                    echo -e " 🏆Success: $((actual_cfg_run_cnt - fail_cfg_run_cnt)), Failed: $fail_cfg_run_cnt, Skipped: $skipped_cfg_run_cnt"
                    echo -e " 🔥Total Run => ($actual_cfg_run_cnt/$total_cfg_run_cnt)"
                    total_cmakeError=$((total_cmakeError + errors + tabCnt))
                    exit $total_cmakeError
                    '''
                }
            }
        }
    }
    post {
        failure {
            echo '🚫 Build failed. Sending email...'
            emailext (
                subject: "🚨 Jenkins Job Failed: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: """
                    <p>Build failed for job: <b>${env.CHANGE_URL}</b></p>
                    <p>Build Number: <b>${env.BUILD_NUMBER}</b></p>
                    <p>View details: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: "${env.DEFAULT_OWNER_EMAILS}",
                mimeType: 'text/html'
            )
        }

        success {
            echo 'Build succeeded.'
        }

        always {
            echo "Cleaning up workspace..."
            deleteDir()
        }
    }
}
