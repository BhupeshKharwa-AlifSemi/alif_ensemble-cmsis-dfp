/* Copyright (C) 2025 Alif Semiconductor - All Rights Reserved.
 * Use, distribution and modification of this code is permitted under the
 * terms stated in the Alif Semiconductor Software License Agreement
 *
 * You should have received a copy of the Alif Semiconductor Software
 * License Agreement with this file. If not, please write to:
 * contact@alifsemi.com, or visit: https://alifsemi.com/license
 *
 */

/******************************************************************************
 * @file     board_config.h
 * @author   Silesh C V
 * @email    silesh@alifsemi.com
 * @version  V1.0.0
 * @date     05-May-2025
 * @brief    Public header file for the conductor (https://conductor.alifsemi.com)
             board configuration library.
 ******************************************************************************/
#ifndef BOARD_CONFIG_H_
#define BOARD_CONFIG_H_

#ifdef  __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include "se_services_port.h"
#include "board_defs.h"

#define GPIO_REGS_OFFSET        0x1000

#define    CLKEN_SYSPLL_MASK       (1 << CLKEN_SYSPLL)
#define    CLKEN_CPUPLL_MASK       (1 << CLKEN_CPUPLL)
#define    CLKEN_ES0_MASK          (1 << CLKEN_ES0)
#define    CLKEN_ES1_MASK          (1 << CLKEN_ES1)
#define    CLKEN_HFXO_OUT_MASK     (1 << CLKEN_HFXO_OUT)
#define    CLKEN_CLK_160M_MASK     (1 << CLKEN_CLK_160M)
#define    CLKEN_CLK_100M_MASK     (1 << CLKEN_CLK_100M)
#define    CLKEN_USB_MASK          (1 << CLKEN_CLK_20M)
#define    CLKEN_HFOSC_MASK        (1 << CLKEN_HFOSC)
#define    CLKEN_SRAM0_MASK        (1 << CLKEN_SRAM0)
#define    CLKEN_SRAM1_MASK        (1 << CLKEN_SRAM1)

/**
  \fn          int32_t board_pins_config(void)
  \brief       Initializes board pins as per the information generated by the conductor tool (pins.h).
  \return      0 on success, -1 on failure
*/
int32_t board_pins_config(void);

/**
  \fn          int32_t board_gpios_config(void)
  \brief       Initializes pseudo-static settings for pins configured as GPIO as per information from gpios.h.
  \return      0 on success, -1 on failure
*/
int32_t board_gpios_config(void);

/**
  \fn          int32_t board_clocks_config(uint32_t clocks)
  \brief       Initializes the required board clocks.
  \return      0 on success, -1 on failure
*/
int32_t board_clocks_config(uint32_t clocks);

#ifdef  __cplusplus
}
#endif
#endif /* BOARD_CONFIG_H_*/
