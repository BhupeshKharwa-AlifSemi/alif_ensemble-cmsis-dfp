/*
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ALIF SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     AE822FA0E5597LS0_CM55_HE_View.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     31. January 2025
 * @note     Generated by SVDConv V3.3.42 on Friday, 31.01.2025 22:20:32
 *           from File 'AE822FA0E5597LS0_CM55_HE_View.svd',
 *           last modified on Friday, 31.01.2025 19:58:23
 */



/** @addtogroup Alif Semiconductor
  * @{
  */


/** @addtogroup AE822FA0E5597LS0_CM55_HE_View
  * @{
  */


#ifndef AE822FA0E5597LS0_CM55_HE_VIEW_H
#define AE822FA0E5597LS0_CM55_HE_VIEW_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M55 Specific Interrupt Numbers  ======================================= */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SecureFault_IRQn          =  -9,              /*!< -9 Secure Fault Handler                                                   */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ================================  AE822FA0E5597LS0_CM55_HE_View Specific Interrupt Numbers  ================================ */
  DMA2_IRQ0_IRQn            =   0,              /*!< 0  Interrupt request 0. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ1_IRQn            =   1,              /*!< 1  Interrupt request 1. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ2_IRQn            =   2,              /*!< 2  Interrupt request 2. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ3_IRQn            =   3,              /*!< 3  Interrupt request 3. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ4_IRQn            =   4,              /*!< 4  Interrupt request 4. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ5_IRQn            =   5,              /*!< 5  Interrupt request 5. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ6_IRQn            =   6,              /*!< 6  Interrupt request 6. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ7_IRQn            =   7,              /*!< 7  Interrupt request 7. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ8_IRQn            =   8,              /*!< 8  Interrupt request 8. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ9_IRQn            =   9,              /*!< 9  Interrupt request 9. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ10_IRQn           =  10,              /*!< 10 Interrupt request 10. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ11_IRQn           =  11,              /*!< 11 Interrupt request 11. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ12_IRQn           =  12,              /*!< 12 Interrupt request 12. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ13_IRQn           =  13,              /*!< 13 Interrupt request 13. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ14_IRQn           =  14,              /*!< 14 Interrupt request 14. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ15_IRQn           =  15,              /*!< 15 Interrupt request 15. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ16_IRQn           =  16,              /*!< 16 Interrupt request 16. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ17_IRQn           =  17,              /*!< 17 Interrupt request 17. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ18_IRQn           =  18,              /*!< 18 Interrupt request 18. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ19_IRQn           =  19,              /*!< 19 Interrupt request 19. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ20_IRQn           =  20,              /*!< 20 Interrupt request 20. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ21_IRQn           =  21,              /*!< 21 Interrupt request 21. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ22_IRQn           =  22,              /*!< 22 Interrupt request 22. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ23_IRQn           =  23,              /*!< 23 Interrupt request 23. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ24_IRQn           =  24,              /*!< 24 Interrupt request 24. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ25_IRQn           =  25,              /*!< 25 Interrupt request 25. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ26_IRQn           =  26,              /*!< 26 Interrupt request 26. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ27_IRQn           =  27,              /*!< 27 Interrupt request 27. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ28_IRQn           =  28,              /*!< 28 Interrupt request 28. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ29_IRQn           =  29,              /*!< 29 Interrupt request 29. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ30_IRQn           =  30,              /*!< 30 Interrupt request 30. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ31_IRQn           =  31,              /*!< 31 Interrupt request 31. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA2_IRQ_ABORT_IRQn       =  32,              /*!< 32 DMAC aborted execution of a program thread.                            */
    MHU_A32_M55HE_0_RX_IRQ_IRQn=  33,             /*!< 33 Interrupt                                                              */
    MHU_M55HE_A32_0_TX_IRQ_IRQn=  34,             /*!< 34 Interrupt                                                              */
    MHU_A32_M55HE_1_RX_IRQ_IRQn=  35,             /*!< 35 Interrupt                                                              */
    MHU_M55HE_A32_1_TX_IRQ_IRQn=  36,             /*!< 36 Interrupt                                                              */
    MHU_SECPU_M55HE_0_RX_IRQ_IRQn=  37,           /*!< 37 Interrupt                                                              */
    MHU_M55HE_SECPU_0_TX_IRQ_IRQn=  38,           /*!< 38 Interrupt                                                              */
    MHU_SECPU_M55HE_1_RX_IRQ_IRQn=  39,           /*!< 39 Interrupt                                                              */
    MHU_M55HE_SECPU_1_TX_IRQ_IRQn=  40,           /*!< 40 Interrupt                                                              */
    MHU_M55HP_M55HE_0_RX_IRQ_IRQn=  41,           /*!< 41 Interrupt                                                              */
    MHU_M55HE_M55HP_0_TX_IRQ_IRQn=  42,           /*!< 42 Interrupt                                                              */
    MHU_M55HP_M55HE_1_RX_IRQ_IRQn=  43,           /*!< 43 Interrupt                                                              */
    MHU_M55HE_M55HP_1_TX_IRQ_IRQn=  44,           /*!< 44 Interrupt                                                              */
    LPUART_IRQ_IRQn           =  45,              /*!< 45 LPUART interrupt request                                               */
    LPSPI_IRQ_IRQn            =  46,              /*!< 46 LPSPI interrupt request                                                */
    LPI2C0_IRQ_IRQn           =  47,              /*!< 47 LPI2C interrupt request                                                */
    LPI2S_IRQ_IRQn            =  48,              /*!< 48 LPI2S interrupt request                                                */
    LPPDM_IRQ_IRQn            =  49,              /*!< 49 LPPDM combined (OR-ed) interrupt of the following requests
                                                       : Warning interrupt request (WARN_IRQ) Error interrupt
                                                       request (ERROR_IRQ) Audio peak detection interrupt request
                                                       (AUDIO_DET_IRQ) Upon interrupt assertion, the LPPDM interrupt
                                                       status registers should be read to identify the source
                                                       of the interrupt.  */
    LPI3C_IRQ_IRQn            =  50,               /*!< 50 LPI3C Interrupt*/
    LPI2C1_IRQ_IRQn           =  51,               /*!< 51 LPI2C1 Interrupt*/
    GPIO16_IRQ0_IRQn          =  52,               /*!< 52 GPIO16 Interrupt*/
    GPIO17_IRQ0_IRQn          =  53,               /*!< 53 GPIO17 Interrupt*/
    LPCAM_IRQ_IRQn            =  54,              /*!< 54 LPCPI interrupt                                                        */
    NPU_HE_IRQ_IRQn           =  55,              /*!< 55 Interrupt                                                              */
    LPCMP_IRQ_IRQn            =  56,              /*!< 56 Interrupt                                                              */
    LPGPIO_COMB_IRQ_IRQn      =  57,              /*!< 57 LPGPIO combined interrupt request                                      */
    LPRTC0_IRQ_IRQn           =  58,              /*!< 58 Interrupt                                                              */

    LPTIMER0_IRQ_IRQn         =  60,              /*!< 60 Interrupt                                                              */
    LPTIMER1_IRQ_IRQn         =  61,              /*!< 61 Interrupt                                                              */
    LPTIMER2_IRQ_IRQn         =  62,              /*!< 62 Interrupt                                                              */
    LPTIMER3_IRQ_IRQn         =  63,              /*!< 63 Interrupt                                                              */

    REFCLK_CNTBASE0_IRQ_IRQn  =  67,              /*!< 67 Interrupt generated when the timer condition is met. See
                                                       registers CNTP_TVAL and CNTP_CTL for the timer condition
                                                       definition.                                                               */
    REFCLK_CNTBASE1_IRQ_IRQn  =  68,              /*!< 68 Interrupt generated when the timer condition is met. See
                                                       registers CNTP_TVAL and CNTP_CTL for the timer condition
                                                       definition.                                                               */
    REFCLK_CNTBASE2_IRQ_IRQn  =  69,              /*!< 69 Interrupt generated when the timer condition is met. See
                                                       registers CNTP_TVAL and CNTP_CTL for the timer condition
                                                       definition.                                                               */
    REFCLK_CNTBASE3_IRQ_IRQn  =  70,              /*!< 70 Interrupt generated when the timer condition is met. See
                                                       registers CNTP_TVAL and CNTP_CTL for the timer condition
                                                       definition.                                                               */
    S32K_CNTBASE0_IRQ_IRQn    =  71,              /*!< 71 Interrupt generated when the timer condition is met. See
                                                       registers CNTP_TVAL and CNTP_CTL for the timer condition
                                                       definition.                                                               */
    S32K_CNTBASE1_IRQ_IRQn    =  72,              /*!< 72 Interrupt generated when the timer condition is met. See
                                                       registers CNTP_TVAL and CNTP_CTL for the timer condition
                                                       definition.                                                               */
    SOC_ETR_IRQ_IRQn          =  73,              /*!< 73 Interrupt                                                              */
    SOC_CATU_IRQ_IRQn         =  74,              /*!< 74 Interrupt                                                              */
    OSPI0_IRQ_IRQn            =  96,              /*!< 96 Combined interrupt request from OSPI0 routed to the interrupt
                                                       controllers in the device. For more information on the
                                                       internal interrupt requests, see Section OSPI Interrupt
                                                       Requests.                                                                 */
    OSPI1_IRQ_IRQn            =  97,              /*!< 97 Combined interrupt request from OSPI1 routed to the interrupt
                                                       controllers in the device. For more information on the
                                                       internal interrupt requests, see Section OSPI Interrupt
                                                       Requests.                                                                 */
    AES0_IRQ_IRQn             =  98,              /*!< 98 Combined interrupt request from AES0 routed to the interrupt
                                                       controllers in the device. For more information on the
                                                       internal interrupt requests, see Section OSPI Interrupt
                                                       Requests.                                                                 */
    AES1_IRQ_IRQn             =  99,              /*!< 99 Combined interrupt request from AES1 routed to the interrupt
                                                       controllers in the device. For more information on the
                                                       internal interrupt requests, see Section OSPI Interrupt
                                                       Requests.                                                                 */
    BOD_IRQ_IRQn              = 100,              /*!< 100  Interrupt                                                            */
    USB_IRQ_IRQn              = 101,              /*!< 101  USB interrupt                                                        */
    SDMMC_IRQ_IRQn            = 102,              /*!< 102  SDMMC Interrupt request                                              */
    SDMMC_WAKEUP_IRQ_IRQn     = 103,              /*!< 103  SDMMC Wakeup event interrupt request                                 */
    CANFD0_IRQ_IRQn           = 104,              /*!< 104  CANFD Interrupt request                                              */
    HWSEM_IRQ0_IRQn           = 105,              /*!< 105  HWSEM interrupt request 0                                            */
    HWSEM_IRQ1_IRQn           = 106,              /*!< 106  HWSEM interrupt request 1                                            */
    HWSEM_IRQ2_IRQn           = 107,              /*!< 107  HWSEM interrupt request 2                                            */
    HWSEM_IRQ3_IRQn           = 108,              /*!< 108  HWSEM interrupt request 3                                            */
    HWSEM_IRQ4_IRQn           = 109,              /*!< 109  HWSEM interrupt request 4                                            */
    HWSEM_IRQ5_IRQn           = 110,              /*!< 110  HWSEM interrupt request 5                                            */
    HWSEM_IRQ6_IRQn           = 111,              /*!< 111  HWSEM interrupt request 6                                            */
    HWSEM_IRQ7_IRQn           = 112,              /*!< 112  HWSEM interrupt request 7                                            */
    HWSEM_IRQ8_IRQn           = 113,              /*!< 113  HWSEM interrupt request 8                                            */
    HWSEM_IRQ9_IRQn           = 114,              /*!< 114  HWSEM interrupt request 9                                            */
    HWSEM_IRQ10_IRQn          = 115,              /*!< 115  HWSEM interrupt request 10                                           */
    HWSEM_IRQ11_IRQn          = 116,              /*!< 116  HWSEM interrupt request 11                                           */
    HWSEM_IRQ12_IRQn          = 117,              /*!< 117  HWSEM interrupt request 12                                           */
    HWSEM_IRQ13_IRQn          = 118,              /*!< 118  HWSEM interrupt request 13                                           */
    HWSEM_IRQ14_IRQn          = 119,              /*!< 119  HWSEM interrupt request 14                                           */
    HWSEM_IRQ15_IRQn          = 120,              /*!< 120  HWSEM interrupt request 15                                           */
    PPU0_IRQ_IRQn             = 121,              /*!< 121  Interrupt                                                            */
    PPU1_IRQ_IRQn             = 122,              /*!< 122  Interrupt                                                            */
    PPU2_IRQ_IRQn             = 123,              /*!< 123  Interrupt                                                            */
    UART0_IRQ_IRQn            = 124,              /*!< 124  UART0 interrupt request                                              */
    UART1_IRQ_IRQn            = 125,              /*!< 125  UART1 interrupt request                                              */
    UART2_IRQ_IRQn            = 126,              /*!< 126  UART2 interrupt request                                              */
    UART3_IRQ_IRQn            = 127,              /*!< 127  UART3 interrupt request                                              */
    UART4_IRQ_IRQn            = 128,              /*!< 128  UART4 interrupt request                                              */
    UART5_IRQ_IRQn            = 129,              /*!< 129  UART5 interrupt request                                              */
    UART6_IRQ_IRQn            = 130,              /*!< 130  UART6 interrupt request                                              */
    UART7_IRQ_IRQn            = 131,              /*!< 131  UART7 interrupt request                                              */
    I2C0_IRQ_IRQn             = 132,              /*!< 132  I2C0 interrupt request                                               */
    I2C1_IRQ_IRQn             = 133,              /*!< 133  I2C1 interrupt request                                               */
    I2C2_IRQ_IRQn             = 134,              /*!< 134  I2C2 interrupt request                                               */
    I2C3_IRQ_IRQn             = 135,              /*!< 135  I2C3 interrupt request                                               */
    I3C_IRQ_IRQn              = 136,              /*!< 136  I3C interrupt request                                                */
    SPI0_IRQ_IRQn             = 137,              /*!< 137  SPI0 interrupt request                                               */
    SPI1_IRQ_IRQn             = 138,              /*!< 138  SPI1 interrupt request                                               */
    SPI2_IRQ_IRQn             = 139,              /*!< 139  SPI2 interrupt request                                               */
    SPI3_IRQ_IRQn             = 140,              /*!< 140  SPI3 interrupt request                                               */
    I2S0_IRQ_IRQn             = 141,              /*!< 141  I2S0 interrupt request                                               */
    I2S1_IRQ_IRQn             = 142,              /*!< 142  I2S1 interrupt request                                               */
    I2S2_IRQ_IRQn             = 143,              /*!< 143  I2S2 interrupt request                                               */
    I2S3_IRQ_IRQn             = 144,              /*!< 144  I2S3 interrupt request                                               */
    PDM_WARN_IRQ_IRQn         = 145,              /*!< 145  PDM Warning interrupt request                                        */
    PDM_ERROR_IRQ_IRQn        = 146,              /*!< 146  PDM Error interrupt request                                          */
    PDM_AUDIO_DET_IRQ_IRQn    = 147,              /*!< 147  PDM Audio peak detection interrupt request                           */
    ETH_SBD_IRQ_IRQn          = 148,              /*!< 148  ETH main interrupt asserted by many events. Its value can
                                                       also be read via the ETH_STAT0[SBD_INTR_O] bit.                           */
    ETH_PMT_IRQ_IRQn          = 149,              /*!< 149  Non-maskable interrupt generated when the MAC receives remote
                                                       wake-up frame or magic packet                                             */
    ADC120_DONE0_IRQ_IRQn     = 151,              /*!< 151  Averaged sample ready                                                */
    ADC121_DONE0_IRQ_IRQn     = 152,              /*!< 152  Averaged sample ready                                                */
    ADC122_DONE0_IRQ_IRQn     = 153,              /*!< 153  Averaged sample ready                                                */
    ADC120_DONE1_IRQ_IRQn     = 154,              /*!< 154  All samples taken                                                    */
    ADC121_DONE1_IRQ_IRQn     = 155,              /*!< 155  All samples taken                                                    */
    ADC122_DONE1_IRQ_IRQn     = 156,              /*!< 156  All samples taken                                                    */
    ADC120_CMPA_IRQ_IRQn      = 157,              /*!< 157  Comparator A interrupt                                               */
    ADC121_CMPA_IRQ_IRQn      = 158,              /*!< 158  Comparator A interrupt                                               */
    ADC122_CMPA_IRQ_IRQn      = 159,              /*!< 159  Comparator A interrupt                                               */
    ADC120_CMPB_IRQ_IRQn      = 160,              /*!< 160  Comparator B interrupt                                               */
    ADC121_CMPB_IRQ_IRQn      = 161,              /*!< 161  Comparator B interrupt                                               */
    ADC122_CMPB_IRQ_IRQn      = 162,              /*!< 162  Comparator B interrupt                                               */
    ADC24_DONE0_IRQ_IRQn      = 163,              /*!< 163  Averaged sample ready                                                */
    ADC24_DONE1_IRQ_IRQn      = 164,              /*!< 164  All samples taken                                                    */
    ADC24_CMPA_IRQ_IRQn       = 165,              /*!< 165  Comparator A interrupt                                               */
    ADC24_CMPB_IRQ_IRQn       = 166,              /*!< 166  Comparator B interrupt                                               */
    CMP0_IRQ_IRQn             = 167,              /*!< 167  Comparator result changed                                            */
    CMP1_IRQ_IRQn             = 168,              /*!< 168  Comparator result changed                                            */
    CMP2_IRQ_IRQn             = 169,              /*!< 169  Comparator result changed                                            */
    CMP3_IRQ_IRQn             = 170,              /*!< 170  Comparator result changed                                            */
    LPGPIO_IRQ0_IRQn          = 171,              /*!< 171  LPGPIO interrupt request 0                                           */
    LPGPIO_IRQ1_IRQn          = 172,              /*!< 172  LPGPIO interrupt request 1                                           */
    LPGPIO_IRQ2_IRQn          = 173,              /*!< 173  LPGPIO interrupt request 2                                           */
    LPGPIO_IRQ3_IRQn          = 174,              /*!< 174  LPGPIO interrupt request 3                                           */
    LPGPIO_IRQ4_IRQn          = 175,              /*!< 175  LPGPIO interrupt request 4                                           */
    LPGPIO_IRQ5_IRQn          = 176,              /*!< 176  LPGPIO interrupt request 5                                           */
    LPGPIO_IRQ6_IRQn          = 177,              /*!< 177  LPGPIO interrupt request 6                                           */
    LPGPIO_IRQ7_IRQn          = 178,              /*!< 178  LPGPIO interrupt request 7                                           */
    GPIO0_IRQ0_IRQn           = 179,              /*!< 179  GPIO0 interrupt request 0                                            */
    GPIO0_IRQ1_IRQn           = 180,              /*!< 180  GPIO0 interrupt request 1                                            */
    GPIO0_IRQ2_IRQn           = 181,              /*!< 181  GPIO0 interrupt request 2                                            */
    GPIO0_IRQ3_IRQn           = 182,              /*!< 182  GPIO0 interrupt request 3                                            */
    GPIO0_IRQ4_IRQn           = 183,              /*!< 183  GPIO0 interrupt request 4                                            */
    GPIO0_IRQ5_IRQn           = 184,              /*!< 184  GPIO0 interrupt request 5                                            */
    GPIO0_IRQ6_IRQn           = 185,              /*!< 185  GPIO0 interrupt request 6                                            */
    GPIO0_IRQ7_IRQn           = 186,              /*!< 186  GPIO0 interrupt request 7                                            */
    GPIO1_IRQ0_IRQn           = 187,              /*!< 187  GPIO1 interrupt request 0                                            */
    GPIO1_IRQ1_IRQn           = 188,              /*!< 188  GPIO1 interrupt request 1                                            */
    GPIO1_IRQ2_IRQn           = 189,              /*!< 189  GPIO1 interrupt request 2                                            */
    GPIO1_IRQ3_IRQn           = 190,              /*!< 190  GPIO1 interrupt request 3                                            */
    GPIO1_IRQ4_IRQn           = 191,              /*!< 191  GPIO1 interrupt request 4                                            */
    GPIO1_IRQ5_IRQn           = 192,              /*!< 192  GPIO1 interrupt request 5                                            */
    GPIO1_IRQ6_IRQn           = 193,              /*!< 193  GPIO1 interrupt request 6                                            */
    GPIO1_IRQ7_IRQn           = 194,              /*!< 194  GPIO1 interrupt request 7                                            */
    GPIO2_IRQ0_IRQn           = 195,              /*!< 195  GPIO2 interrupt request 0                                            */
    GPIO2_IRQ1_IRQn           = 196,              /*!< 196  GPIO2 interrupt request 1                                            */
    GPIO2_IRQ2_IRQn           = 197,              /*!< 197  GPIO2 interrupt request 2                                            */
    GPIO2_IRQ3_IRQn           = 198,              /*!< 198  GPIO2 interrupt request 3                                            */
    GPIO2_IRQ4_IRQn           = 199,              /*!< 199  GPIO2 interrupt request 4                                            */
    GPIO2_IRQ5_IRQn           = 200,              /*!< 200  GPIO2 interrupt request 5                                            */
    GPIO2_IRQ6_IRQn           = 201,              /*!< 201  GPIO2 interrupt request 6                                            */
    GPIO2_IRQ7_IRQn           = 202,              /*!< 202  GPIO2 interrupt request 7                                            */
    GPIO3_IRQ0_IRQn           = 203,              /*!< 203  GPIO3 interrupt request 0                                            */
    GPIO3_IRQ1_IRQn           = 204,              /*!< 204  GPIO3 interrupt request 1                                            */
    GPIO3_IRQ2_IRQn           = 205,              /*!< 205  GPIO3 interrupt request 2                                            */
    GPIO3_IRQ3_IRQn           = 206,              /*!< 206  GPIO3 interrupt request 3                                            */
    GPIO3_IRQ4_IRQn           = 207,              /*!< 207  GPIO3 interrupt request 4                                            */
    GPIO3_IRQ5_IRQn           = 208,              /*!< 208  GPIO3 interrupt request 5                                            */
    GPIO3_IRQ6_IRQn           = 209,              /*!< 209  GPIO3 interrupt request 6                                            */
    GPIO3_IRQ7_IRQn           = 210,              /*!< 210  GPIO3 interrupt request 7                                            */
    GPIO4_IRQ0_IRQn           = 211,              /*!< 211  GPIO4 interrupt request 0                                            */
    GPIO4_IRQ1_IRQn           = 212,              /*!< 212  GPIO4 interrupt request 1                                            */
    GPIO4_IRQ2_IRQn           = 213,              /*!< 213  GPIO4 interrupt request 2                                            */
    GPIO4_IRQ3_IRQn           = 214,              /*!< 214  GPIO4 interrupt request 3                                            */
    GPIO4_IRQ4_IRQn           = 215,              /*!< 215  GPIO4 interrupt request 4                                            */
    GPIO4_IRQ5_IRQn           = 216,              /*!< 216  GPIO4 interrupt request 5                                            */
    GPIO4_IRQ6_IRQn           = 217,              /*!< 217  GPIO4 interrupt request 6                                            */
    GPIO4_IRQ7_IRQn           = 218,              /*!< 218  GPIO4 interrupt request 7                                            */
    GPIO5_IRQ0_IRQn           = 219,              /*!< 219  GPIO5 interrupt request 0                                            */
    GPIO5_IRQ1_IRQn           = 220,              /*!< 220  GPIO5 interrupt request 1                                            */
    GPIO5_IRQ2_IRQn           = 221,              /*!< 221  GPIO5 interrupt request 2                                            */
    GPIO5_IRQ3_IRQn           = 222,              /*!< 222  GPIO5 interrupt request 3                                            */
    GPIO5_IRQ4_IRQn           = 223,              /*!< 223  GPIO5 interrupt request 4                                            */
    GPIO5_IRQ5_IRQn           = 224,              /*!< 224  GPIO5 interrupt request 5                                            */
    GPIO5_IRQ6_IRQn           = 225,              /*!< 225  GPIO5 interrupt request 6                                            */
    GPIO5_IRQ7_IRQn           = 226,              /*!< 226  GPIO5 interrupt request 7                                            */
    GPIO6_IRQ0_IRQn           = 227,              /*!< 227  GPIO6 interrupt request 0                                            */
    GPIO6_IRQ1_IRQn           = 228,              /*!< 228  GPIO6 interrupt request 1                                            */
    GPIO6_IRQ2_IRQn           = 229,              /*!< 229  GPIO6 interrupt request 2                                            */
    GPIO6_IRQ3_IRQn           = 230,              /*!< 230  GPIO6 interrupt request 3                                            */
    GPIO6_IRQ4_IRQn           = 231,              /*!< 231  GPIO6 interrupt request 4                                            */
    GPIO6_IRQ5_IRQn           = 232,              /*!< 232  GPIO6 interrupt request 5                                            */
    GPIO6_IRQ6_IRQn           = 233,              /*!< 233  GPIO6 interrupt request 6                                            */
    GPIO6_IRQ7_IRQn           = 234,              /*!< 234  GPIO6 interrupt request 7                                            */
    GPIO7_IRQ0_IRQn           = 235,              /*!< 235  GPIO7 interrupt request 0                                            */
    GPIO7_IRQ1_IRQn           = 236,              /*!< 236  GPIO7 interrupt request 1                                            */
    GPIO7_IRQ2_IRQn           = 237,              /*!< 237  GPIO7 interrupt request 2                                            */
    GPIO7_IRQ3_IRQn           = 238,              /*!< 238  GPIO7 interrupt request 3                                            */
    GPIO7_IRQ4_IRQn           = 239,              /*!< 239  GPIO7 interrupt request 4                                            */
    GPIO7_IRQ5_IRQn           = 240,              /*!< 240  GPIO7 interrupt request 5                                            */
    GPIO7_IRQ6_IRQn           = 241,              /*!< 241  GPIO7 interrupt request 6                                            */
    GPIO7_IRQ7_IRQn           = 242,              /*!< 242  GPIO7 interrupt request 7                                            */
    GPIO8_IRQ0_IRQn           = 243,              /*!< 243  GPIO8 interrupt request 0                                            */
    GPIO8_IRQ1_IRQn           = 244,              /*!< 244  GPIO8 interrupt request 1                                            */
    GPIO8_IRQ2_IRQn           = 245,              /*!< 245  GPIO8 interrupt request 2                                            */
    GPIO8_IRQ3_IRQn           = 246,              /*!< 246  GPIO8 interrupt request 3                                            */
    GPIO8_IRQ4_IRQn           = 247,              /*!< 247  GPIO8 interrupt request 4                                            */
    GPIO8_IRQ5_IRQn           = 248,              /*!< 248  GPIO8 interrupt request 5                                            */
    GPIO8_IRQ6_IRQn           = 249,              /*!< 249  GPIO8 interrupt request 6                                            */
    GPIO8_IRQ7_IRQn           = 250,              /*!< 250  GPIO8 interrupt request 7                                            */
    GPIO9_IRQ0_IRQn           = 251,              /*!< 251  GPIO9 interrupt request 0                                            */
    GPIO9_IRQ1_IRQn           = 252,              /*!< 252  GPIO9 interrupt request 1                                            */
    GPIO9_IRQ2_IRQn           = 253,              /*!< 253  GPIO9 interrupt request 2                                            */
    GPIO9_IRQ3_IRQn           = 254,              /*!< 254  GPIO9 interrupt request 3                                            */
    GPIO9_IRQ4_IRQn           = 255,              /*!< 255  GPIO9 interrupt request 4                                            */
    GPIO9_IRQ5_IRQn           = 256,              /*!< 256  GPIO9 interrupt request 5                                            */
    GPIO9_IRQ6_IRQn           = 257,              /*!< 257  GPIO9 interrupt request 6                                            */
    GPIO9_IRQ7_IRQn           = 258,              /*!< 258  GPIO9 interrupt request 7                                            */
    GPIO10_IRQ0_IRQn          = 259,              /*!< 259  GPIO10 interrupt request 0                                           */
    GPIO10_IRQ1_IRQn          = 260,              /*!< 260  GPIO10 interrupt request 1                                           */
    GPIO10_IRQ2_IRQn          = 261,              /*!< 261  GPIO10 interrupt request 2                                           */
    GPIO10_IRQ3_IRQn          = 262,              /*!< 262  GPIO10 interrupt request 3                                           */
    GPIO10_IRQ4_IRQn          = 263,              /*!< 263  GPIO10 interrupt request 4                                           */
    GPIO10_IRQ5_IRQn          = 264,              /*!< 264  GPIO10 interrupt request 5                                           */
    GPIO10_IRQ6_IRQn          = 265,              /*!< 265  GPIO10 interrupt request 6                                           */
    GPIO10_IRQ7_IRQn          = 266,              /*!< 266  GPIO10 interrupt request 7                                           */
    GPIO11_IRQ0_IRQn          = 267,              /*!< 267  GPIO11 interrupt request 0                                           */
    GPIO11_IRQ1_IRQn          = 268,              /*!< 268  GPIO11 interrupt request 1                                           */
    GPIO11_IRQ2_IRQn          = 269,              /*!< 269  GPIO11 interrupt request 2                                           */
    GPIO11_IRQ3_IRQn          = 270,              /*!< 270  GPIO11 interrupt request 3                                           */
    GPIO11_IRQ4_IRQn          = 271,              /*!< 271  GPIO11 interrupt request 4                                           */
    GPIO11_IRQ5_IRQn          = 272,              /*!< 272  GPIO11 interrupt request 5                                           */
    GPIO11_IRQ6_IRQn          = 273,              /*!< 273  GPIO11 interrupt request 6                                           */
    GPIO11_IRQ7_IRQn          = 274,              /*!< 274  GPIO11 interrupt request 7                                           */
    GPIO12_IRQ0_IRQn          = 275,              /*!< 275  GPIO12 interrupt request 0                                           */
    GPIO12_IRQ1_IRQn          = 276,              /*!< 276  GPIO12 interrupt request 1                                           */
    GPIO12_IRQ2_IRQn          = 277,              /*!< 277  GPIO12 interrupt request 2                                           */
    GPIO12_IRQ3_IRQn          = 278,              /*!< 278  GPIO12 interrupt request 3                                           */
    GPIO12_IRQ4_IRQn          = 279,              /*!< 279  GPIO12 interrupt request 4                                           */
    GPIO12_IRQ5_IRQn          = 280,              /*!< 280  GPIO12 interrupt request 5                                           */
    GPIO12_IRQ6_IRQn          = 281,              /*!< 281  GPIO12 interrupt request 6                                           */
    GPIO12_IRQ7_IRQn          = 282,              /*!< 282  GPIO12 interrupt request 7                                           */
    GPIO13_IRQ0_IRQn          = 283,              /*!< 283  GPIO13 interrupt request 0                                           */
    GPIO13_IRQ1_IRQn          = 284,              /*!< 284  GPIO13 interrupt request 1                                           */
    GPIO13_IRQ2_IRQn          = 285,              /*!< 285  GPIO13 interrupt request 2                                           */
    GPIO13_IRQ3_IRQn          = 286,              /*!< 286  GPIO13 interrupt request 3                                           */
    GPIO13_IRQ4_IRQn          = 287,              /*!< 287  GPIO13 interrupt request 4                                           */
    GPIO13_IRQ5_IRQn          = 288,              /*!< 288  GPIO13 interrupt request 5                                           */
    GPIO13_IRQ6_IRQn          = 289,              /*!< 289  GPIO13 interrupt request 6                                           */
    GPIO13_IRQ7_IRQn          = 290,              /*!< 290  GPIO13 interrupt request 7                                           */
    GPIO14_IRQ0_IRQn          = 291,              /*!< 291  GPIO14 interrupt request 0                                           */
    GPIO14_IRQ1_IRQn          = 292,              /*!< 292  GPIO14 interrupt request 1                                           */
    GPIO14_IRQ2_IRQn          = 293,              /*!< 293  GPIO14 interrupt request 2                                           */
    GPIO14_IRQ3_IRQn          = 294,              /*!< 294  GPIO14 interrupt request 3                                           */
    GPIO14_IRQ4_IRQn          = 295,              /*!< 295  GPIO14 interrupt request 4                                           */
    GPIO14_IRQ5_IRQn          = 296,              /*!< 296  GPIO14 interrupt request 5                                           */
    GPIO14_IRQ6_IRQn          = 297,              /*!< 297  GPIO14 interrupt request 6                                           */
    GPIO14_IRQ7_IRQn          = 298,              /*!< 298  GPIO14 interrupt request 7                                           */
    DMA0_IRQ0_IRQn            = 299,              /*!< 299  Interrupt request 0. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ1_IRQn            = 300,              /*!< 300  Interrupt request 1. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ2_IRQn            = 301,              /*!< 301  Interrupt request 2. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ3_IRQn            = 302,              /*!< 302  Interrupt request 3. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ4_IRQn            = 303,              /*!< 303  Interrupt request 4. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ5_IRQn            = 304,              /*!< 304  Interrupt request 5. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ6_IRQn            = 305,              /*!< 305  Interrupt request 6. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ7_IRQn            = 306,              /*!< 306  Interrupt request 7. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ8_IRQn            = 307,              /*!< 307  Interrupt request 8. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ9_IRQn            = 308,              /*!< 308  Interrupt request 9. One per DMA request interface (32 in
                                                       total).                                                                   */
    DMA0_IRQ10_IRQn           = 309,              /*!< 309  Interrupt request 10. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ11_IRQn           = 310,              /*!< 310  Interrupt request 11. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ12_IRQn           = 311,              /*!< 311  Interrupt request 12. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ13_IRQn           = 312,              /*!< 312  Interrupt request 13. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ14_IRQn           = 313,              /*!< 313  Interrupt request 14. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ15_IRQn           = 314,              /*!< 314  Interrupt request 15. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ16_IRQn           = 315,              /*!< 315  Interrupt request 16. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ17_IRQn           = 316,              /*!< 316  Interrupt request 17. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ18_IRQn           = 317,              /*!< 317  Interrupt request 18. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ19_IRQn           = 318,              /*!< 318  Interrupt request 19. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ20_IRQn           = 319,              /*!< 319  Interrupt request 20. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ21_IRQn           = 320,              /*!< 320  Interrupt request 21. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ22_IRQn           = 321,              /*!< 321  Interrupt request 22. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ23_IRQn           = 322,              /*!< 322  Interrupt request 23. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ24_IRQn           = 323,              /*!< 323  Interrupt request 24. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ25_IRQn           = 324,              /*!< 324  Interrupt request 25. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ26_IRQn           = 325,              /*!< 325  Interrupt request 26. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ27_IRQn           = 326,              /*!< 326  Interrupt request 27. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ28_IRQn           = 327,              /*!< 327  Interrupt request 28. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ29_IRQn           = 328,              /*!< 328  Interrupt request 29. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ30_IRQn           = 329,              /*!< 329  Interrupt request 30. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ31_IRQn           = 330,              /*!< 330  Interrupt request 31. One per DMA request interface (32
                                                       in total).                                                                */
    DMA0_IRQ_ABORT_IRQn       = 331,              /*!< 331  DMAC aborted execution of a program thread.                          */
    GPU2D_IRQ_IRQn            = 332,              /*!< 332  GPU2D aggregated interrupt request                                   */
    CDC_SCANLINE0_IRQ_IRQn    = 333,              /*!< 333  CDC line interrupt                                                   */
    CDC_FIFO_WARNING0_IRQ_IRQn= 335,              /*!< 335  CDC FIFO underrun warning interrupt                                  */
    CDC_FIFO_UNDERRUN0_IRQ_IRQn= 337,             /*!< 337  CDC layer FIFO underrun interrupt                                    */
    CDC_BUS_ERROR0_IRQ_IRQn   = 339,              /*!< 339  CDC bus error interrupt                                              */
    CDC_REG_RELOAD0_IRQ_IRQn  = 341,              /*!< 341  CDC register reload interrupt                                        */
    DSI_IRQ_IRQn              = 343,              /*!< 343  DSI error interrupt                                                  */
    CSI_IRQ_IRQn              = 344,              /*!< 344  CSI interrupt                                                        */
    CAM_IRQ_IRQn              = 345,              /*!< 345  CPI interrupt                                                        */

    LPUTIMER_IRQ0_IRQn        = 351,               /*!< 351  LPUTIMER interrupt                                                   */
    LPUTIMER_IRQ1_IRQn        = 352,              /*!< 352  LPUTIMER interrupt                                                   */
    LPUTIMER_IRQ2_IRQn        = 353,              /*!< 353  LPUTIMER interrupt                                                   */
    LPUTIMER_IRQ3_IRQn        = 354,              /*!< 354  LPUTIMER interrupt                                                   */
    LPUTIMER_IRQ4_IRQn        = 355,              /*!< 355  LPUTIMER interrupt                                                   */
    LPUTIMER_IRQ5_IRQn        = 356,              /*!< 356  LPUTIMER interrupt                                                   */
    LPUTIMER_IRQ6_IRQn        = 357,              /*!< 357  LPUTIMER interrupt                                                   */
    LPUTIMER_IRQ7_IRQn        = 358,              /*!< 358  LPUTIMER interrupt                                                   */
    QEC0_CMPA_IRQ_IRQn        = 369,              /*!< 369  Channel 12 interrupt request at driver A                             */
    QEC0_CMPB_IRQ_IRQn        = 370,              /*!< 370  Channel 12 interrupt request at driver B                             */
    QEC1_CMPA_IRQ_IRQn        = 371,              /*!< 371  Channel 13 interrupt request at driver A                             */
    QEC1_CMPB_IRQ_IRQn        = 372,              /*!< 372  Channel 13 interrupt request at driver B                             */
    QEC2_CMPA_IRQ_IRQn        = 373,              /*!< 373  Channel 14 interrupt request at driver A                             */
    QEC2_CMPB_IRQ_IRQn        = 374,              /*!< 374  Channel 14 interrupt request at driver B                             */
    QEC3_CMPA_IRQ_IRQn        = 375,              /*!< 375  Channel 15 interrupt request at driver A                             */
    QEC3_CMPB_IRQ_IRQn        = 376,              /*!< 376  Channel 15 interrupt request at driver B                             */
    UTIMER_IRQ0_IRQn          = 377,              /*!< 377  Channel 0, interrupt request 0                                       */
    UTIMER_IRQ1_IRQn          = 378,              /*!< 378  Channel 0, interrupt request 1                                       */
    UTIMER_IRQ2_IRQn          = 379,              /*!< 379  Channel 0, interrupt request 2                                       */
    UTIMER_IRQ3_IRQn          = 380,              /*!< 380  Channel 0, interrupt request 3                                       */
    UTIMER_IRQ4_IRQn          = 381,              /*!< 381  Channel 0, interrupt request 4                                       */
    UTIMER_IRQ5_IRQn          = 382,              /*!< 382  Channel 0, interrupt request 5                                       */
    UTIMER_IRQ6_IRQn          = 383,              /*!< 383  Channel 0, interrupt request 6                                       */
    UTIMER_IRQ7_IRQn          = 384,              /*!< 384  Channel 0, interrupt request 7                                       */
    UTIMER_IRQ8_IRQn          = 385,              /*!< 385  Channel 1, interrupt request 8                                       */
    UTIMER_IRQ9_IRQn          = 386,              /*!< 386  Channel 1, interrupt request 9                                       */
    UTIMER_IRQ10_IRQn         = 387,              /*!< 387  Channel 1, interrupt request 10                                      */
    UTIMER_IRQ11_IRQn         = 388,              /*!< 388  Channel 1, interrupt request 11                                      */
    UTIMER_IRQ12_IRQn         = 389,              /*!< 389  Channel 1, interrupt request 12                                      */
    UTIMER_IRQ13_IRQn         = 390,              /*!< 390  Channel 1, interrupt request 13                                      */
    UTIMER_IRQ14_IRQn         = 391,              /*!< 391  Channel 1, interrupt request 14                                      */
    UTIMER_IRQ15_IRQn         = 392,              /*!< 392  Channel 1, interrupt request 15                                      */
    UTIMER_IRQ16_IRQn         = 393,              /*!< 393  Channel 2, interrupt request 16                                      */
    UTIMER_IRQ17_IRQn         = 394,              /*!< 394  Channel 2, interrupt request 17                                      */
    UTIMER_IRQ18_IRQn         = 395,              /*!< 395  Channel 2, interrupt request 18                                      */
    UTIMER_IRQ19_IRQn         = 396,              /*!< 396  Channel 2, interrupt request 19                                      */
    UTIMER_IRQ20_IRQn         = 397,              /*!< 397  Channel 2, interrupt request 20                                      */
    UTIMER_IRQ21_IRQn         = 398,              /*!< 398  Channel 2, interrupt request 21                                      */
    UTIMER_IRQ22_IRQn         = 399,              /*!< 399  Channel 2, interrupt request 22                                      */
    UTIMER_IRQ23_IRQn         = 400,              /*!< 400  Channel 2, interrupt request 23                                      */
    UTIMER_IRQ24_IRQn         = 401,              /*!< 401  Channel 3, interrupt request 24                                      */
    UTIMER_IRQ25_IRQn         = 402,              /*!< 402  Channel 3, interrupt request 25                                      */
    UTIMER_IRQ26_IRQn         = 403,              /*!< 403  Channel 3, interrupt request 26                                      */
    UTIMER_IRQ27_IRQn         = 404,              /*!< 404  Channel 3, interrupt request 27                                      */
    UTIMER_IRQ28_IRQn         = 405,              /*!< 405  Channel 3, interrupt request 28                                      */
    UTIMER_IRQ29_IRQn         = 406,              /*!< 406  Channel 3, interrupt request 29                                      */
    UTIMER_IRQ30_IRQn         = 407,              /*!< 407  Channel 3, interrupt request 30                                      */
    UTIMER_IRQ31_IRQn         = 408,              /*!< 408  Channel 3, interrupt request 31                                      */
    UTIMER_IRQ32_IRQn         = 409,              /*!< 409  Channel 4, interrupt request 32                                      */
    UTIMER_IRQ33_IRQn         = 410,              /*!< 410  Channel 4, interrupt request 33                                      */
    UTIMER_IRQ34_IRQn         = 411,              /*!< 411  Channel 4, interrupt request 34                                      */
    UTIMER_IRQ35_IRQn         = 412,              /*!< 412  Channel 4, interrupt request 35                                      */
    UTIMER_IRQ36_IRQn         = 413,              /*!< 413  Channel 4, interrupt request 36                                      */
    UTIMER_IRQ37_IRQn         = 414,              /*!< 414  Channel 4, interrupt request 37                                      */
    UTIMER_IRQ38_IRQn         = 415,              /*!< 415  Channel 4, interrupt request 38                                      */
    UTIMER_IRQ39_IRQn         = 416,              /*!< 416  Channel 4, interrupt request 39                                      */
    UTIMER_IRQ40_IRQn         = 417,              /*!< 417  Channel 5, interrupt request 40                                      */
    UTIMER_IRQ41_IRQn         = 418,              /*!< 418  Channel 5, interrupt request 41                                      */
    UTIMER_IRQ42_IRQn         = 419,              /*!< 419  Channel 5, interrupt request 42                                      */
    UTIMER_IRQ43_IRQn         = 420,              /*!< 420  Channel 5, interrupt request 43                                      */
    UTIMER_IRQ44_IRQn         = 421,              /*!< 421  Channel 5, interrupt request 44                                      */
    UTIMER_IRQ45_IRQn         = 422,              /*!< 422  Channel 5, interrupt request 45                                      */
    UTIMER_IRQ46_IRQn         = 423,              /*!< 423  Channel 5, interrupt request 46                                      */
    UTIMER_IRQ47_IRQn         = 424,              /*!< 424  Channel 5, interrupt request 47                                      */
    UTIMER_IRQ48_IRQn         = 425,              /*!< 425  Channel 6, interrupt request 48                                      */
    UTIMER_IRQ49_IRQn         = 426,              /*!< 426  Channel 6, interrupt request 49                                      */
    UTIMER_IRQ50_IRQn         = 427,              /*!< 427  Channel 6, interrupt request 50                                      */
    UTIMER_IRQ51_IRQn         = 428,              /*!< 428  Channel 6, interrupt request 51                                      */
    UTIMER_IRQ52_IRQn         = 429,              /*!< 429  Channel 6, interrupt request 52                                      */
    UTIMER_IRQ53_IRQn         = 430,              /*!< 430  Channel 6, interrupt request 53                                      */
    UTIMER_IRQ54_IRQn         = 431,              /*!< 431  Channel 6, interrupt request 54                                      */
    UTIMER_IRQ55_IRQn         = 432,              /*!< 432  Channel 6, interrupt request 55                                      */
    UTIMER_IRQ56_IRQn         = 433,              /*!< 433  Channel 7, interrupt request 56                                      */
    UTIMER_IRQ57_IRQn         = 434,              /*!< 434  Channel 7, interrupt request 57                                      */
    UTIMER_IRQ58_IRQn         = 435,              /*!< 435  Channel 7, interrupt request 58                                      */
    UTIMER_IRQ59_IRQn         = 436,              /*!< 436  Channel 7, interrupt request 59                                      */
    UTIMER_IRQ60_IRQn         = 437,              /*!< 437  Channel 7, interrupt request 60                                      */
    UTIMER_IRQ61_IRQn         = 438,              /*!< 438  Channel 7, interrupt request 61                                      */
    UTIMER_IRQ62_IRQn         = 439,              /*!< 439  Channel 7, interrupt request 62                                      */
    UTIMER_IRQ63_IRQn         = 440,              /*!< 440  Channel 7, interrupt request 63                                      */
    UTIMER_IRQ64_IRQn         = 441,              /*!< 441  Channel 8, interrupt request 64                                      */
    UTIMER_IRQ65_IRQn         = 442,              /*!< 442  Channel 8, interrupt request 65                                      */
    UTIMER_IRQ66_IRQn         = 443,              /*!< 443  Channel 8, interrupt request 66                                      */
    UTIMER_IRQ67_IRQn         = 444,              /*!< 444  Channel 8, interrupt request 67                                      */
    UTIMER_IRQ68_IRQn         = 445,              /*!< 445  Channel 8, interrupt request 68                                      */
    UTIMER_IRQ69_IRQn         = 446,              /*!< 446  Channel 8, interrupt request 69                                      */
    UTIMER_IRQ70_IRQn         = 447,              /*!< 447  Channel 8, interrupt request 70                                      */
    UTIMER_IRQ71_IRQn         = 448,              /*!< 448  Channel 8, interrupt request 71                                      */
    UTIMER_IRQ72_IRQn         = 449,              /*!< 449  Channel 9, interrupt request 72                                      */
    UTIMER_IRQ73_IRQn         = 450,              /*!< 450  Channel 9, interrupt request 73                                      */
    UTIMER_IRQ74_IRQn         = 451,              /*!< 451  Channel 9, interrupt request 74                                      */
    UTIMER_IRQ75_IRQn         = 452,              /*!< 452  Channel 9, interrupt request 75                                      */
    UTIMER_IRQ76_IRQn         = 453,              /*!< 453  Channel 9, interrupt request 76                                      */
    UTIMER_IRQ77_IRQn         = 454,              /*!< 454  Channel 9, interrupt request 77                                      */
    UTIMER_IRQ78_IRQn         = 455,              /*!< 455  Channel 9, interrupt request 78                                      */
    UTIMER_IRQ79_IRQn         = 456,              /*!< 456  Channel 9, interrupt request 79                                      */
    UTIMER_IRQ80_IRQn         = 457,              /*!< 457  Channel 10, interrupt request 80                                     */
    UTIMER_IRQ81_IRQn         = 458,              /*!< 458  Channel 10, interrupt request 81                                     */
    UTIMER_IRQ82_IRQn         = 459,              /*!< 459  Channel 10, interrupt request 82                                     */
    UTIMER_IRQ83_IRQn         = 460,              /*!< 460  Channel 10, interrupt request 83                                     */
    UTIMER_IRQ84_IRQn         = 461,              /*!< 461  Channel 10, interrupt request 84                                     */
    UTIMER_IRQ85_IRQn         = 462,              /*!< 462  Channel 10, interrupt request 85                                     */
    UTIMER_IRQ86_IRQn         = 463,              /*!< 463  Channel 10, interrupt request 86                                     */
    UTIMER_IRQ87_IRQn         = 464,              /*!< 464  Channel 10, interrupt request 87                                     */
    UTIMER_IRQ88_IRQn         = 465,              /*!< 465  Channel 11, interrupt request 88                                     */
    UTIMER_IRQ89_IRQn         = 466,              /*!< 466  Channel 11, interrupt request 89                                     */
    UTIMER_IRQ90_IRQn         = 467,              /*!< 467  Channel 11, interrupt request 90                                     */
    UTIMER_IRQ91_IRQn         = 468,              /*!< 468  Channel 11, interrupt request 91                                     */
    UTIMER_IRQ92_IRQn         = 469,              /*!< 469  Channel 11, interrupt request 92                                     */
    UTIMER_IRQ93_IRQn         = 470,              /*!< 470  Channel 11, interrupt request 93                                     */
    UTIMER_IRQ94_IRQn         = 471,              /*!< 471  Channel 11, interrupt request 94                                     */
    UTIMER_IRQ95_IRQn         = 472               /*!< 472  Channel 11, interrupt request 95                                     */
  } IRQn_Type;

/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif

/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-M55 Processor and Core Peripherals  =========================== */
#define __CM55_REV                 0x0100U      /*!< CM55 Core Revision                                                        */
#define __NVIC_PRIO_BITS               8        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  1        /*!< FPU present                                                               */
#define __FPU_DP                       1        /*!< Double Precision FPU                                                      */
#define __DSP_PRESENT                  1        /*!< DSP extension present                                                     */
#define __SAUREGION_PRESENT            1        /*!< SAU region present                                                        */
#define __PMU_PRESENT                  1        /*!< PMU present                                                               */
#define __PMU_NUM_EVENTCNT             8        /*!< PMU Event Counters                                                        */
  #define __ICACHE_PRESENT               1        /*!< Instruction Cache present                                                 */
  #define __DCACHE_PRESENT               1        /*!< Data Cache present                                                        */



/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm55.h"                          /*!< ARM Cortex-M55 processor and core peripherals                             */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif

/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief REFCLK_CNT_CTL_CNT_BASE_VOFF [CNT_BASE_VOFF] ([0..3])
  */
typedef struct {
  __IOM uint32_t  CNTVOFF_LO;                   /*!< (@ 0x00000000) CNT_BASEn Virtual Offset Low Register                      */
  __IOM uint32_t  CNTVOFF_HI;                   /*!< (@ 0x00000004) CNT_BASEn Virtual Offset High Register                     */
} REFCLK_CNT_CTL_CNT_BASE_VOFF_Type;            /*!< Size = 8 (0x8)                                                            */


/**
  * @brief PINMUX_PINMUX_CFG [PINMUX_CFG] ([0..17])
  */
typedef struct {
  __IOM uint32_t  P_0;                          /*!< (@ 0x00000000) Control Register for Port n, Pin 0                         */
  __IOM uint32_t  P_1;                          /*!< (@ 0x00000004) Control Register for Port n, Pin 1                         */
  __IOM uint32_t  P_2;                          /*!< (@ 0x00000008) Control Register for Port n, Pin 2                         */
  __IOM uint32_t  P_3;                          /*!< (@ 0x0000000C) Control Register for Port n, Pin 3                         */
  __IOM uint32_t  P_4;                          /*!< (@ 0x00000010) Control Register for Port n, Pin 4                         */
  __IOM uint32_t  P_5;                          /*!< (@ 0x00000014) Control Register for Port n, Pin 5                         */
  __IOM uint32_t  P_6;                          /*!< (@ 0x00000018) Control Register for Port n, Pin 6                         */
  __IOM uint32_t  P_7;                          /*!< (@ 0x0000001C) Control Register for Port n, Pin 7                         */
} PINMUX_PINMUX_CFG_Type;                       /*!< Size = 32 (0x20)                                                          */


/**
  * @brief MHU_A32_M55HE_0_RX_MHU_RX_CHANNEL_CFG [MHU_RX_CHANNEL_CFG] ([0..1])
  */
typedef struct {
  __IM  uint32_t  MHU_CH_ST;                    /*!< (@ 0x00000000) Channel (n) Status Register                                */
  __IM  uint32_t  MHU_CH_ST_MSK;                /*!< (@ 0x00000004) Channel (n) Status Masked Register                         */
  __OM  uint32_t  MHU_CH_CLR;                   /*!< (@ 0x00000008) Channel Clear Register                                     */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  MHU_CH_MSK_ST;                /*!< (@ 0x00000010) Channel (n) Mask Status Register                           */
  __OM  uint32_t  MHU_CH_MSK_SET;               /*!< (@ 0x00000014) Channel (n) Mask Set Register                              */
  __OM  uint32_t  MHU_CH_MSK_CLR;               /*!< (@ 0x00000018) Channel (n) Mask Clear Register                            */
  __IM  uint32_t  RESERVED1;
} MHU_A32_M55HE_0_RX_MHU_RX_CHANNEL_CFG_Type;   /*!< Size = 32 (0x20)                                                          */


/**
  * @brief MHU_M55HE_A32_0_TX_MHU_TX_CHANNEL_CFG [MHU_TX_CHANNEL_CFG] ([0..1])
  */
typedef struct {
  __IM  uint32_t  MHU_CH_ST;                    /*!< (@ 0x00000000) Channel (n) Status Register                                */
  __IM  uint32_t  RESERVED[2];
  __OM  uint32_t  MHU_CH_SET;                   /*!< (@ 0x0000000C) Channel (n) Set Register                                   */
  __IM  uint32_t  MHU_CH_INT_ST;                /*!< (@ 0x00000010) Channel (n) Interrupt Status Register                      */
  __OM  uint32_t  MHU_CH_INT_CLR;               /*!< (@ 0x00000014) Channel (n) Interrupt Clear Register                       */
  __IOM uint32_t  MHU_CH_INT_EN;                /*!< (@ 0x00000018) Channel (n) Interrupt Enable Register                      */
  __IM  uint32_t  RESERVED1;
} MHU_M55HE_A32_0_TX_MHU_TX_CHANNEL_CFG_Type;   /*!< Size = 32 (0x20)                                                          */


/**
  * @brief DMA2_SEC_DMA_CHANNEL_RT_INFO [DMA_CHANNEL_RT_INFO] ([0..7])
  */
typedef struct {
  __IM  uint32_t  DMA_CSR;                      /*!< (@ 0x00000000) Channel Status for DMA Channel (n) Register                */
  __IM  uint32_t  DMA_CPC;                      /*!< (@ 0x00000004) Channel PC for DMA Channel (n) Register                    */
} DMA2_SEC_DMA_CHANNEL_RT_INFO_Type;            /*!< Size = 8 (0x8)                                                            */


/**
  * @brief DMA2_SEC_DMA_RT_CHANNEL_CFG [DMA_RT_CHANNEL_CFG] ([0..7])
  */
typedef struct {
  __IM  uint32_t  DMA_SAR;                      /*!< (@ 0x00000000) Source Address for DMA Channel (n) Register                */
  __IM  uint32_t  DMA_DAR;                      /*!< (@ 0x00000004) Destination Address for DMA Channel (n) Register           */
  __IM  uint32_t  DMA_CCR;                      /*!< (@ 0x00000008) Channel Control for DMA Channel (n) Register               */
  __IM  uint32_t  DMA_LC0;                      /*!< (@ 0x0000000C) Loop Counter 0 for DMA Channel (n) Register                */
  __IM  uint32_t  DMA_LC1;                      /*!< (@ 0x00000010) Loop Counter 1 for DMA Channel (n) Register                */
  __IM  uint32_t  RESERVED[3];
} DMA2_SEC_DMA_RT_CHANNEL_CFG_Type;             /*!< Size = 32 (0x20)                                                          */


/**
  * @brief LPTIMER_LPTIMER_CHANNEL_CFG [LPTIMER_CHANNEL_CFG] ([0..3])
  */
typedef struct {
  __IOM uint32_t  LPTIMER_LOADCOUNT;            /*!< (@ 0x00000000) Timer (n) Load Count Register                              */
  __IM  uint32_t  LPTIMER_CURRENTVAL;           /*!< (@ 0x00000004) Timer (n) Current Value Register                           */
  __IOM uint32_t  LPTIMER_CONTROLREG;           /*!< (@ 0x00000008) Timer (n) Control Register                                 */
  __IM  uint32_t  LPTIMER_EOI;                  /*!< (@ 0x0000000C) Timer (n) End-of-Interrupt Register                        */
  __IM  uint32_t  LPTIMER_INTSTAT;              /*!< (@ 0x00000010) Timer (n) Interrupt Status Register                        */
} LPTIMER_LPTIMER_CHANNEL_CFG_Type;             /*!< Size = 20 (0x14)                                                          */


/**
  * @brief LPPDM_PDM_CHANNEL_CFG [PDM_CHANNEL_CFG] ([0..7])
  */
typedef struct {
  __IOM uint32_t  PDM_CH_FIR_COEF_0;            /*!< (@ 0x00000000) Channel (n) FIR Filter Coefficient 0 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_1;            /*!< (@ 0x00000004) Channel (n) FIR Filter Coefficient 1 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_2;            /*!< (@ 0x00000008) Channel (n) FIR Filter Coefficient 2 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_3;            /*!< (@ 0x0000000C) Channel (n) FIR Filter Coefficient 3 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_4;            /*!< (@ 0x00000010) Channel (n) FIR Filter Coefficient 4 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_5;            /*!< (@ 0x00000014) Channel (n) FIR Filter Coefficient 5 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_6;            /*!< (@ 0x00000018) Channel (n) FIR Filter Coefficient 6 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_7;            /*!< (@ 0x0000001C) Channel (n) FIR Filter Coefficient 7 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_8;            /*!< (@ 0x00000020) Channel (n) FIR Filter Coefficient 8 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_9;            /*!< (@ 0x00000024) Channel (n) FIR Filter Coefficient 9 Register              */
  __IOM uint32_t  PDM_CH_FIR_COEF_10;           /*!< (@ 0x00000028) Channel (n) FIR Filter Coefficient 10 Register             */
  __IOM uint32_t  PDM_CH_FIR_COEF_11;           /*!< (@ 0x0000002C) Channel (n) FIR Filter Coefficient 11 Register             */
  __IOM uint32_t  PDM_CH_FIR_COEF_12;           /*!< (@ 0x00000030) Channel (n) FIR Filter Coefficient 12 Register             */
  __IOM uint32_t  PDM_CH_FIR_COEF_13;           /*!< (@ 0x00000034) Channel (n) FIR Filter Coefficient 13 Register             */
  __IOM uint32_t  PDM_CH_FIR_COEF_14;           /*!< (@ 0x00000038) Channel (n) FIR Filter Coefficient 14 Register             */
  __IOM uint32_t  PDM_CH_FIR_COEF_15;           /*!< (@ 0x0000003C) Channel (n) FIR Filter Coefficient 15 Register             */
  __IOM uint32_t  PDM_CH_FIR_COEF_16;           /*!< (@ 0x00000040) Channel (n) FIR Filter Coefficient 16 Register             */
  __IOM uint32_t  PDM_CH_FIR_COEF_17;           /*!< (@ 0x00000044) Channel (n) FIR Filter Coefficient 17 Register             */
  __IM  uint32_t  RESERVED[14];
  __IOM uint32_t  PDM_CH_IIR_COEF_SEL;          /*!< (@ 0x00000080) Channel (n) IIR Filter Coefficient Selection
                                                                    Register                                                   */
  __IOM uint32_t  PDM_CH_PHASE;                 /*!< (@ 0x00000084) Channel (n) Phase Control Register                         */
  __IOM uint32_t  PDM_CH_GAIN;                  /*!< (@ 0x00000088) Channel (n) Gain Control Register                          */
  __IOM uint32_t  PDM_CH_PKDET_TH;              /*!< (@ 0x0000008C) Channel (n) Peak Detector Threshold Register               */
  __IOM uint32_t  PDM_CH_PKDET_ITV;             /*!< (@ 0x00000090) Channel (n) Peak Detector Interval Register                */
  __IM  uint32_t  PDM_CH_PKDET_STAT;            /*!< (@ 0x00000094) Channel (n) Peak Detector Status Register                  */
  __IM  uint32_t  RESERVED1[26];
} LPPDM_PDM_CHANNEL_CFG_Type;                   /*!< Size = 256 (0x100)                                                        */


/**
  * @brief LPUTIMER_UTIMER_CHANNEL_CFG [UTIMER_CHANNEL_CFG] ([0..15])
  */
typedef struct {
  __IOM uint32_t  UTIMER_START_0_SRC;           /*!< (@ 0x00000000) Channel (n) Counter Start Source 0 Register                */
  __IOM uint32_t  UTIMER_START_1_SRC;           /*!< (@ 0x00000004) Channel (n) Counter Start Source 1 Register                */
  __IOM uint32_t  UTIMER_STOP_0_SRC;            /*!< (@ 0x00000008) Channel (n) Counter Stop Source 0 Register                 */
  __IOM uint32_t  UTIMER_STOP_1_SRC;            /*!< (@ 0x0000000C) Channel (n) Counter Stop Source 1 Register                 */
  __IOM uint32_t  UTIMER_CLEAR_0_SRC;           /*!< (@ 0x00000010) Channel (n) Counter Clear Source 0 Register                */
  __IOM uint32_t  UTIMER_CLEAR_1_SRC;           /*!< (@ 0x00000014) Channel (n) Counter Clear Source 1 Register                */
  __IOM uint32_t  UTIMER_UP_0_SRC;              /*!< (@ 0x00000018) Channel (n) Counter Up Count Source 0 Register             */
  __IOM uint32_t  UTIMER_UP_1_SRC;              /*!< (@ 0x0000001C) Channel (n) Counter Up Count Source 1 Register             */
  __IOM uint32_t  UTIMER_DOWN_0_SRC;            /*!< (@ 0x00000020) Channel (n) Counter Down Count Source 0 Register           */
  __IOM uint32_t  UTIMER_DOWN_1_SRC;            /*!< (@ 0x00000024) Channel (n) Counter Down Count Source 1 Register           */
  __IOM uint32_t  UTIMER_TRIG_CAPTURE_SRC_A_0;  /*!< (@ 0x00000028) Channel (n) Trigger Capture Source A 0 Register            */
  __IOM uint32_t  UTIMER_TRIG_CAPTURE_SRC_A_1;  /*!< (@ 0x0000002C) Channel (n) Trigger Capture Source A 1 Register            */
  __IOM uint32_t  UTIMER_TRIG_CAPTURE_SRC_B_0;  /*!< (@ 0x00000030) Channel (n) Trigger Capture Source B 0 Register            */
  __IOM uint32_t  UTIMER_TRIG_CAPTURE_SRC_B_1;  /*!< (@ 0x00000034) Channel (n) Trigger Capture Source B 1 Register            */
  __IOM uint32_t  UTIMER_DMA_CLEAR_SRC_A_0;     /*!< (@ 0x00000038) Channel (n) DMA Clear Source A 0 Register                  */
  __IOM uint32_t  UTIMER_DMA_CLEAR_SRC_A_1;     /*!< (@ 0x0000003C) Channel (n) DMA Clear Source A 1 Register                  */
  __IOM uint32_t  UTIMER_DMA_CLEAR_SRC_B_0;     /*!< (@ 0x00000040) Channel (n) DMA Clear Source B 0 Register                  */
  __IOM uint32_t  UTIMER_DMA_CLEAR_SRC_B_1;     /*!< (@ 0x00000044) Channel (n) DMA Clear Source B 1 Register                  */
  __IOM uint32_t  UTIMER_CNTR_PAUSE_SRC;        /*!< (@ 0x00000048) Channel (n) Counter Pause Source Register                  */
  __IM  uint32_t  RESERVED[13];
  __IOM uint32_t  UTIMER_CNTR_CTRL;             /*!< (@ 0x00000080) Channel (n) Counter Control Register                       */
  __IOM uint32_t  UTIMER_FILTER_CTRL_A;         /*!< (@ 0x00000084) Channel (n) Filter Control A Register                      */
  __IOM uint32_t  UTIMER_FILTER_CTRL_B;         /*!< (@ 0x00000088) Channel (n) Filter Control B Register                      */
  __IOM uint32_t  UTIMER_COMPARE_CTRL_A;        /*!< (@ 0x0000008C) Channel (n) Compare Control A Register                     */
  __IOM uint32_t  UTIMER_COMPARE_CTRL_B;        /*!< (@ 0x00000090) Channel (n) Compare Control B Register                     */
  __IOM uint32_t  UTIMER_BUF_OP_CTRL;           /*!< (@ 0x00000094) Channel (n) Buffer Operation Control Register              */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  UTIMER_CNTR;                  /*!< (@ 0x000000A0) Channel (n) Counter Register                               */
  __IOM uint32_t  UTIMER_CNTR_PTR;              /*!< (@ 0x000000A4) Channel (n) Counter Pointer Register                       */
  __IOM uint32_t  UTIMER_CNTR_PTR_BUF1;         /*!< (@ 0x000000A8) Channel (n) Counter Pointer Buffer 1 Register              */
  __IOM uint32_t  UTIMER_CNTR_PTR_BUF2;         /*!< (@ 0x000000AC) Channel (n) Counter Pointer Buffer 2 Register              */
  __IOM uint32_t  UTIMER_CAPTURE_A;             /*!< (@ 0x000000B0) Channel (n) Capture A Register                             */
  __IOM uint32_t  UTIMER_CAPTURE_A_BUF1;        /*!< (@ 0x000000B4) Channel (n) Capture A Buffer 1 Register                    */
  __IOM uint32_t  UTIMER_CAPTURE_A_BUF2;        /*!< (@ 0x000000B8) Channel (n) Capture A Buffer 2 Register                    */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  UTIMER_CAPTURE_B;             /*!< (@ 0x000000C0) Channel (n) Capture B Register                             */
  __IOM uint32_t  UTIMER_CAPTURE_B_BUF1;        /*!< (@ 0x000000C4) Channel (n) Capture B Buffer 1 Register                    */
  __IOM uint32_t  UTIMER_CAPTURE_B_BUF2;        /*!< (@ 0x000000C8) Channel (n) Capture B Buffer 2 Register                    */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  UTIMER_COMPARE_A;             /*!< (@ 0x000000D0) Channel (n) Compare A Register                             */
  __IOM uint32_t  UTIMER_COMPARE_A_BUF1;        /*!< (@ 0x000000D4) Channel (n) Compare A Buffer 1 Register                    */
  __IOM uint32_t  UTIMER_COMPARE_A_BUF2;        /*!< (@ 0x000000D8) Channel (n) Compare A Buffer 2 Register                    */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  UTIMER_COMPARE_B;             /*!< (@ 0x000000E0) Channel (n) Compare B Register                             */
  __IOM uint32_t  UTIMER_COMPARE_B_BUF1;        /*!< (@ 0x000000E4) Channel (n) Compare B Buffer 1 Register                    */
  __IOM uint32_t  UTIMER_COMPARE_B_BUF2;        /*!< (@ 0x000000E8) Channel (n) Compare B Buffer 2 Register                    */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  UTIMER_DT_UP;                 /*!< (@ 0x000000F0) Channel (n) Dead-time Up Register                          */
  __IOM uint32_t  UTIMER_DT_UP_BUF1;            /*!< (@ 0x000000F4) Channel (n) Dead-time Up Buffer 1 Register                 */
  __IOM uint32_t  UTIMER_DT_DOWN;               /*!< (@ 0x000000F8) Channel (n) Dead-time Down Register                        */
  __IOM uint32_t  UTIMER_DT_DOWN_BUF1;          /*!< (@ 0x000000FC) Channel (n) Dead-time Down Buffer 1 Register               */
  __IM  uint32_t  RESERVED6[5];
  __IOM uint32_t  UTIMER_CHAN_STATUS;           /*!< (@ 0x00000114) Channel (n) Status Register                                */
  __OM  uint32_t  UTIMER_CHAN_INTERRUPT;        /*!< (@ 0x00000118) Channel (n) Interrupt Control Register                     */
  __IOM uint32_t  UTIMER_CHAN_INTERRUPT_MASK;   /*!< (@ 0x0000011C) Channel (n) Interrupt Mask Register                        */
  __IOM uint32_t  UTIMER_DUTY_CYCLE_CTRL;       /*!< (@ 0x00000120) Channel (n) Duty Cycle Control Register                    */
  __IOM uint32_t  UTIMER_DEAD_TIME_CTRL;        /*!< (@ 0x00000124) Channel (n) Dead-time Control Register                     */
  __IM  uint32_t  RESERVED7[2];
  __IOM uint32_t  UTIMER_INT_CNTR_CTRL;         /*!< (@ 0x00000130) Channel (n) Interrupt Counter Control Register             */
  __IOM uint32_t  UTIMER_FAULT_CTRL;            /*!< (@ 0x00000134) Channel (n) Fault Control Register                         */
  __IM  uint32_t  RESERVED8[946];
} UTIMER_UTIMER_CHANNEL_CFG_Type;             /*!< Size = 4096 (0x1000)                                                      */


/**
  * @brief USB_USB_ENDPNT_CMD [USB_ENDPNT_CMD] ([0..15])
  */
typedef struct {
  __IOM uint32_t  DEPCMDPAR2;                   /*!< (@ 0x00000000) Device Physical Endpoint-n Command Parameter
                                                                    2 Register                                                 */
  __IOM uint32_t  DEPCMDPAR1;                   /*!< (@ 0x00000004) Device Physical Endpoint-n Command Parameter
                                                                    1 Register                                                 */
  __IOM uint32_t  DEPCMDPAR0;                   /*!< (@ 0x00000008) Device Physical Endpoint-n Command Parameter
                                                                    0 Register                                                 */
  __IOM uint32_t  DEPCMD;                       /*!< (@ 0x0000000C) Device Physical Endpoint-n Command Register                */
} USB_USB_ENDPNT_CMD_Type;                      /*!< Size = 16 (0x10)                                                          */


/**
  * @brief CDC_CDC_LAYER_CFG [CDC_LAYER_CFG] ([0..1])
  */
typedef struct {
  __IM  uint32_t  CDC_L_CFG1;                   /*!< (@ 0x00000000) Layer (n) Configuration 1 Register                         */
  __IM  uint32_t  CDC_L_CFG2;                   /*!< (@ 0x00000004) Layer (n) Configuration 2 Register                         */
  __IOM uint32_t  CDC_L_REL_CTRL;               /*!< (@ 0x00000008) Layer (n) Shadow Reload Control Register                   */
  __IOM uint32_t  CDC_L_CTRL;                   /*!< (@ 0x0000000C) Layer (n) Control Register                                 */
  __IOM uint32_t  CDC_L_WIN_HPOS;               /*!< (@ 0x00000010) Layer (n) Window Horizontal Position Register              */
  __IOM uint32_t  CDC_L_WIN_VPOS;               /*!< (@ 0x00000014) Layer (n) Window Vertical Position Register                */
  __IOM uint32_t  CDC_L_CKEY;                   /*!< (@ 0x00000018) Layer (n) Color Key Register                               */
  __IOM uint32_t  CDC_L_PIX_FORMAT;             /*!< (@ 0x0000001C) Layer (n) Pixel Format Register                            */
  __IOM uint32_t  CDC_L_CONST_ALPHA;            /*!< (@ 0x00000020) Layer (n) Constant Alpha Register                          */
  __IOM uint32_t  CDC_L_DFLT_COLOR;             /*!< (@ 0x00000024) Layer (n) Default Color Register                           */
  __IOM uint32_t  CDC_L_BLEND_CFG;              /*!< (@ 0x00000028) Layer (n) Blending Factors Register                        */
  __IOM uint32_t  CDC_L_FB_BCTRL;               /*!< (@ 0x0000002C) Layer (n) FB Bus Control Register                          */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CDC_L_CFB_ADDR;               /*!< (@ 0x00000034) Layer (n) Color FB Address Register                        */
  __IOM uint32_t  CDC_L_CFB_LENGTH;             /*!< (@ 0x00000038) Layer (n) Color FB Length Register                         */
  __IOM uint32_t  CDC_L_CFB_LINES;              /*!< (@ 0x0000003C) Layer (n) Color FB Lines Register                          */
  __IM  uint32_t  RESERVED1[4];
  __OM  uint32_t  CDC_L_CLUT_WRACC;             /*!< (@ 0x00000050) Layer (n) CLUT Write Access Register                       */
  __IM  uint32_t  RESERVED2[43];
} CDC_CDC_LAYER_CFG_Type;                       /*!< Size = 256 (0x100)                                                        */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                        CLKCTL_SYS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief CLKCTL_SYS (CLKCTL_SYS)
  */

typedef struct {                                /*!< (@ 0x1A010000) CLKCTL_SYS Structure                                       */
  __IM  uint32_t  RESERVED[320];
  __IM  uint32_t  SYS_LCTRL_ST;                 /*!< (@ 0x00000500) System Lock Control Status Register                        */
  __IOM uint32_t  SYS_LCTRL_SET;                /*!< (@ 0x00000504) System Lock Control Set Register                           */
  __IOM uint32_t  SYS_LCTRL_CLR;                /*!< (@ 0x00000508) System Lock Control Clear Register                         */
  __IM  uint32_t  RESERVED1[197];
  __IOM uint32_t  ACLK_CTRL;                    /*!< (@ 0x00000820) SYST_ACLK Clock Control Register                           */
  __IOM uint32_t  ACLK_DIV0;                    /*!< (@ 0x00000824) SYST_ACLK Clock Divider 0 Register                         */
} CLKCTL_SYS_Type;                              /*!< Size = 2088 (0x828)                                                       */


typedef struct {                                /*!<  Generic Counter Module Control Structure                                 */
  __IOM uint32_t  CNTCR;                        /*!< (@ 0x00000000) Counter Control Register                                   */
  __IM uint32_t   CNTSR;                        /*!< (@ 0x00000004) Counter Status Register                                    */
  __IOM uint32_t  CNTCVL;                       /*!< (@ 0x00000008) Counter Count Lower Value Register                         */
  __IOM uint32_t  CNTCVH;                       /*!< (@ 0x0000000C) Counter Count Higher Value Register                        */
} CNTControlBase_Type;                          /*!<                                                                           */

typedef struct {                                /*!< Generic Counter Module Control Read Structure                             */
  __IM uint32_t  CNTCVL;                        /*!< (@ 0x00000000) Counter Count Lower Value Register                         */
  __IM uint32_t  CNTCVH;                        /*!< (@ 0x00000004) Counter Count Higher Value Register                        */
} CNTReadBase_Type;                             /*!<                                                                           */


/* =========================================================================================================================== */
/* ================                                      REFCLK_CNT_READ                                      ================ */
/* =========================================================================================================================== */


/**
  * @brief REFCLK_CNT_READ (REFCLK_CNT_READ)
  */

typedef struct {                                /*!< (@ 0x1A210000) REFCLK_CNT_READ Structure                                  */
  __IM  uint32_t  RD_CNTCV_LO;                  /*!< (@ 0x00000000) Read-only Version of CNTCV_LO Register                     */
  __IM  uint32_t  RD_CNTCV_HI;                  /*!< (@ 0x00000004) Read-only Version of CNTCV_HI Register                     */
} REFCLK_CNT_READ_Type;                         /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                      REFCLK_CNT_CTL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief REFCLK_CNT_CTL (REFCLK_CNT_CTL)
  */

typedef struct {                                /*!< (@ 0x1A220000) REFCLK_CNT_CTL Structure                                   */
  __IOM uint32_t  CNTFRQ;                       /*!< (@ 0x00000000) Counter Frequency Register                                 */
  __IOM uint32_t  CNTNSAR;                      /*!< (@ 0x00000004) Counter Non-Secure Access Register                         */
  __IM  uint32_t  CNTTIDR;                      /*!< (@ 0x00000008) Counter Timer ID Register                                  */
  __IM  uint32_t  RESERVED[13];
  __IOM uint32_t  CNTACR[4];                    /*!< (@ 0x00000040) CNT_BASEn Access Control Register                          */
  __IM  uint32_t  RESERVED1[12];
  __IOM REFCLK_CNT_CTL_CNT_BASE_VOFF_Type CNT_BASE_VOFF[4];/*!< (@ 0x00000080) [0..3]                                          */
} REFCLK_CNT_CTL_Type;                          /*!< Size = 160 (0xa0)                                                         */



/* =========================================================================================================================== */
/* ================                                     REFCLK_CNT_BASE0                                      ================ */
/* =========================================================================================================================== */


/**
  * @brief REFCLK_CNT_BASE0 (REFCLK_CNT_BASE0)
  */

typedef struct {                                /*!< (@ 0x1A230000) REFCLK_CNT_BASE0 Structure                                 */
  __IM  uint32_t  CNTPCT_LO;                    /*!< (@ 0x00000000) Physical Count Low Register                                */
  __IM  uint32_t  CNTPCT_HI;                    /*!< (@ 0x00000004) Physical Count High Register                               */
  __IM  uint32_t  CNTVCT_LO;                    /*!< (@ 0x00000008) Virtual Count Low Register                                 */
  __IM  uint32_t  CNTVCT_HI;                    /*!< (@ 0x0000000C) Virtual Count High Register                                */
  __IM  uint32_t  RD_CNTFRQ;                    /*!< (@ 0x00000010) Counter Frequency Register                                 */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  CNTVOFF_LO;                   /*!< (@ 0x00000018) Virtual Offset Low Register                                */
  __IM  uint32_t  CNTVOFF_HI;                   /*!< (@ 0x0000001C) Virtual Offset High Register                               */
  __IOM uint32_t  CNTP_CVAL_LO;                 /*!< (@ 0x00000020) Physical Timer Compare Value Low Register                  */
  __IOM uint32_t  CNTP_CVAL_HI;                 /*!< (@ 0x00000024) Physical Timer Compare Value High Register                 */
  __IOM uint32_t  CNTP_TVAL;                    /*!< (@ 0x00000028) Physical Timer Value Register                              */
  __IOM uint32_t  CNTP_CTL;                     /*!< (@ 0x0000002C) Physical Timer Control Register                            */
  __IOM uint32_t  CNTV_CVAL_LO;                 /*!< (@ 0x00000030) Virtual Timer Compare Value Low Register                   */
  __IOM uint32_t  CNTV_CVAL_HI;                 /*!< (@ 0x00000034) Virtual Timer Compare Value High Register                  */
  __IOM uint32_t  CNTV_TVAL;                    /*!< (@ 0x00000038) Virtual Timer Value Register                               */
  __IOM uint32_t  CNTV_CTL;                     /*!< (@ 0x0000003C) Virtual Timer Control Register                             */
} REFCLK_CNT_BASE_Type;                         /*!< Size = 64 (0x40)                                                          */



/* =========================================================================================================================== */
/* ================                                        WDT_AP_CTRL                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief WDT_AP_CTRL (WDT_AP_CTRL)
  */

typedef struct {                                /*!< (@ 0x1A300000) WDT_AP_CTRL Structure                                      */
  
  union {
    __OM  uint32_t WDT_WRR;                     /*!< (@ 0x00000000) Watchdog Refresh Register                                  */
    __IOM uint32_t WDT_WCS;                     /*!< (@ 0x00000000) Watchdog Control and Status Register                       */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  WDT_WOR_31_0;                 /*!< (@ 0x00000008) Watchdog Offset Register, lower bits                       */
  __IOM uint32_t  WDT_WOR_63_32;                /*!< (@ 0x0000000C) Watchdog Offset Register, upper bits                       */
  __IOM uint32_t  WDT_WCV_31_0;                 /*!< (@ 0x00000010) Watchdog Compare Value Register, lower bits                */
  __IOM uint32_t  WDT_WCV_63_32;                /*!< (@ 0x00000014) Watchdog Compare Value Register, upper bits                */
  __IM  uint32_t  RESERVED1[1005];
  __IM  uint32_t  WDT_IIDR;                     /*!< (@ 0x00000FCC) Interface Identification Register                          */
} WDT_AP_CTRL_Type;                             /*!< Size = 4048 (0xfd0)                                                       */



/* =========================================================================================================================== */
/* ================                                          IRQRTR                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief IRQRTR (IRQRTR)
  */

typedef struct {                                /*!< (@ 0x1A500000) IRQRTR Structure                                           */
  __IOM uint32_t  IRQRTR_CTRL;                  /*!< (@ 0x00000000) IRQRTR Control Register                                    */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  IRQRTR_LD_CTRL;               /*!< (@ 0x00000010) IRQRTR Lockdown Control Register                           */
  __IM  uint32_t  RESERVED1[59];
  __IM  uint32_t  IRQRTR_SHD_INT_INFO;          /*!< (@ 0x00000100) IRQRTR Shared Interrupt Information Register               */
  __IOM uint32_t  IRQRTR_SHD_INT_CFG;           /*!< (@ 0x00000104) IRQRTR Shared Interrupt Configuration Register             */
  __IOM uint32_t  IRQRTR_SHD_INT_LCTRL;         /*!< (@ 0x00000108) IRQRTR Shared Interrupt Lock Control Register              */
  __IOM uint32_t  IRQRTR_SHD_INT_SEL;           /*!< (@ 0x0000010C) IRQRTR Shared Interrupt Select Register                    */
  __IM  uint32_t  RESERVED2[864];
  __IOM uint32_t  IRQRTR_TMP_ST;                /*!< (@ 0x00000E90) IRQRTR Tamper Status Register                              */
  __IM  uint32_t  RESERVED3[67];
  __IM  uint32_t  IRQRTR_CAP;                   /*!< (@ 0x00000FA0) IRQRTR Capability Register                                 */
  __IM  uint32_t  RESERVED4[3];
  __IM  uint32_t  IRQRTR_CFG;                   /*!< (@ 0x00000FB0) IRQRTR Configuration Register                              */
} IRQRTR_Type;                                  /*!< Size = 4020 (0xfb4)                                                       */



/* =========================================================================================================================== */
/* ================                                            CGU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CGU (CGU)
  */

typedef struct {                                /*!< (@ 0x1A602000) CGU Structure                                              */
  __IOM uint32_t  OSC_CTRL;                     /*!< (@ 0x00000000) Oscillator Control Register                                */
  __IOM uint32_t  PLL_LOCK_CTRL;                /*!< (@ 0x00000004) PLL Lock Control Register                                  */
  __IOM uint32_t  PLL_CLK_SEL;                  /*!< (@ 0x00000008) PLL Clock Select Register                                  */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  ESCLK_SEL;                    /*!< (@ 0x00000010) Clock Select Register for M55-HP and M55-HE                */
  __IOM uint32_t  CLK_ENA;                      /*!< (@ 0x00000014) Clock Enable Register                                      */
  __IM  uint32_t  RESERVED1[2];
  __IM  uint32_t  CGU_IRQ;                      /*!< (@ 0x00000020) CGU Interrupt Status Register                              */
  __IOM uint32_t  MISC_CLK_CTRL;                /*!< (@ 0x00000024) Miscellaneous Clock Control Register                       */
  __IOM uint32_t  SHMEM_CLK_CTRL;               /*!< (@ 0x00000028) Shared Memory Clock Controllers Control Register           */
} CGU_Type;                                     /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                          PINMUX                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief PINMUX (PINMUX)
  */

typedef struct {                                /*!< (@ 0x1A603000) PINMUX Structure                                           */
  __IOM PINMUX_PINMUX_CFG_Type PINMUX_CFG[18];  /*!< (@ 0x00000000) [0..17]                                                    */
} PINMUX_Type;                                  /*!< Size = 576 (0x240)                                                        */



/* =========================================================================================================================== */
/* ================                                            AON                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AON (AON)
  */

typedef struct {                                /*!< (@ 0x1A604000) AON Structure                                              */
  __IOM uint32_t  RTSS_HP_CTRL;                 /*!< (@ 0x00000000) M55-HP Control Register                                    */
  __IOM uint32_t  RTSS_HP_RESET;                /*!< (@ 0x00000004) M55-HP Reset Status Register                               */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  RTSS_HE_CTRL;                 /*!< (@ 0x00000010) M55-HE Control Register                                    */
  __IOM uint32_t  RTSS_HE_RESET;                /*!< (@ 0x00000014) M55-HE Reset Status Register                               */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  RTSS_HE_LPUART_CKEN;          /*!< (@ 0x0000001C) LPUART Clock Enable Register                               */
  __IOM uint32_t  SYSTOP_CLK_DIV;               /*!< (@ 0x00000020) System Bus Clock Divider Control Register                  */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  MISC_REG1;                    /*!< (@ 0x00000030) HFXO Divider Control Register                              */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  PMU_PERIPH;                   /*!< (@ 0x00000040) ADC Control Register                                       */
  __IOM uint32_t  OSPI_BYPASS_ENABLE;           /*!< (@ 0x00000044) OSPI Bypass Enable                                         */
} AON_Type;                                     /*!< Size = 72 (0x48)                                                          */



/* =========================================================================================================================== */
/* ================                                           VBAT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief VBAT (VBAT)
  */

typedef struct {                                /*!< (@ 0x1A609000) VBAT Structure                                             */
  __IOM uint32_t  GPIO_CTRL;                    /*!< (@ 0x00000000) GPIO 1.8 V / 3.3 V Power Control Register                  */
  __IOM uint32_t  TIMER_CLKSEL;                 /*!< (@ 0x00000004) LPTIMER Clock Select Register                              */
  __IOM uint32_t  PWR_CTRL;                     /*!< (@ 0x00000008) Power Control Register                                     */
  __IOM uint32_t  RET_CTRL;                     /*!< (@ 0x0000000C) Memory Retention Control Register                          */
  __IOM uint32_t  RTC_CLK_EN;                   /*!< (@ 0x00000010) LPRTC Clock Enable Register                                */
} VBAT_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                            ANA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ANA (ANA)
  */

typedef struct {                                /*!< (@ 0x1A60A000) ANA Structure                                              */
  __IOM uint32_t  MISC_CTRL;                    /*!< (@ 0x00000000) VBAT Misc Control Register                                 */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  WKUP_CTRL;                    /*!< (@ 0x00000008) VBAT Wake-up Source Control Register                       */
  __IM  uint32_t  RESERVED1[9];
  __IOM uint32_t  DCDC_REG1;                    /*!< (@ 0x00000030) DC/DC Control Register 1                                   */
  __IOM uint32_t  DCDC_REG2;                    /*!< (@ 0x00000034) DC/DC Control Register 2                                   */
  __IOM uint32_t  VBAT_ANA_REG1;                /*!< (@ 0x00000038) VBAT Analog Control Register 1                             */
  __IOM uint32_t  VBAT_ANA_REG2;                /*!< (@ 0x0000003C) VBAT Analog Control Register 2                             */
  __IOM uint32_t  VBAT_ANA_REG3;                /*!< (@ 0x00000040) VBAT Analog Control Register 3                             */
} ANA_Type;                                     /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                         STOP_MODE                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief STOP_MODE (STOP_MODE)
  */

typedef struct {                                /*!< (@ 0x1A60F000) STOP_MODE Structure                                        */
  __IOM uint32_t  VBAT_STOP_MODE_REG;           /*!< (@ 0x00000000) VBAT Stop Mode Control and Status Register                 */
} STOP_MODE_Type;                               /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                    MHU_A32_M55HE_0_RX                                     ================ */
/* =========================================================================================================================== */


/**
  * @brief MHU_A32_M55HE_0_RX (MHU_A32_M55HE_0_RX)
  */

typedef struct {                                /*!< (@ 0x40000000) MHU_A32_M55HE_0_RX Structure                               */
  __IOM MHU_A32_M55HE_0_RX_MHU_RX_CHANNEL_CFG_Type MHU_RX_CHANNEL_CFG[2];/*!< (@ 0x00000000) [0..1]                            */
  __IM  uint32_t  RESERVED[976];
  __IOM uint32_t  MHU_CFG;                      /*!< (@ 0x00000F80) Module Configuration Register                              */
  __IM  uint32_t  RESERVED1[3];
  __IM  uint32_t  MHU_INT_ST;                   /*!< (@ 0x00000F90) Interrupt Status Register                                  */
  __OM  uint32_t  MHU_INT_CLR;                  /*!< (@ 0x00000F94) Interrupt Clear Register                                   */
  __IOM uint32_t  MHU_INT_EN;                   /*!< (@ 0x00000F98) Interrupt Enable Register                                  */
  __IM  uint32_t  RESERVED2;
  __IM  uint32_t  MHU_CHCOMB_INT_ST0;           /*!< (@ 0x00000FA0) Channel Combined Interrupt Status Register for
                                                                    Channels 0-31                                              */
  __IM  uint32_t  MHU_CHCOMB_INT_ST1;           /*!< (@ 0x00000FA4) Channel Combined Interrupt Status Register for
                                                                    Channels 32-63                                             */
  __IM  uint32_t  MHU_CHCOMB_INT_ST2;           /*!< (@ 0x00000FA8) Channel Combined Interrupt Status Register for
                                                                    Channels 64-95                                             */
  __IM  uint32_t  MHU_CHCOMB_INT_ST3;           /*!< (@ 0x00000FAC) Channel Combined Interrupt Status Register for
                                                                    Channels 96-123                                            */
  __IM  uint32_t  RESERVED3[6];
  __IM  uint32_t  MHU_IIDR;                     /*!< (@ 0x00000FC8) Implementer Identification Register                        */
  __IM  uint32_t  MHU_AIDR;                     /*!< (@ 0x00000FCC) Architecture Identification Register                       */
  __IM  uint32_t  MHU_PID4;                     /*!< (@ 0x00000FD0) Peripheral ID 4 Register                                   */
  __IM  uint32_t  RESERVED4[3];
  __IM  uint32_t  MHU_PID0;                     /*!< (@ 0x00000FE0) Peripheral ID 0 Register                                   */
  __IM  uint32_t  MHU_PID1;                     /*!< (@ 0x00000FE4) Peripheral ID 1 Register                                   */
  __IM  uint32_t  MHU_PID2;                     /*!< (@ 0x00000FE8) Peripheral ID 2 Register                                   */
  __IM  uint32_t  MHU_PID3;                     /*!< (@ 0x00000FEC) Peripheral ID 3 Register                                   */
  __IM  uint32_t  MHU_CID0;                     /*!< (@ 0x00000FF0) Component ID 0 Register                                    */
  __IM  uint32_t  MHU_CID1;                     /*!< (@ 0x00000FF4) Component ID 1 Register                                    */
  __IM  uint32_t  MHU_CID2;                     /*!< (@ 0x00000FF8) Component ID 2 Register                                    */
  __IM  uint32_t  MHU_CID3;                     /*!< (@ 0x00000FFC) Component ID 3 Register                                    */
} MHU_A32_M55HE_RX_Type;                        /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                    MHU_M55HE_A32_0_TX                                     ================ */
/* =========================================================================================================================== */


/**
  * @brief MHU_M55HE_A32_0_TX (MHU_M55HE_A32_0_TX)
  */

typedef struct {                                /*!< (@ 0x40010000) MHU_M55HE_A32_0_TX Structure                               */
  __IOM MHU_M55HE_A32_0_TX_MHU_TX_CHANNEL_CFG_Type MHU_TX_CHANNEL_CFG[2];/*!< (@ 0x00000000) [0..1]                            */
  __IM  uint32_t  RESERVED[976];
  __IM  uint32_t  MHU_CFG;                      /*!< (@ 0x00000F80) Module Configuration Register                              */
  __IOM uint32_t  MHU_RESP_CFG;                 /*!< (@ 0x00000F84) Response Configuration Register                            */
  __IOM uint32_t  MHU_ACCESS_REQUEST;           /*!< (@ 0x00000F88) Access Request Register                                    */
  __IOM uint32_t  MHU_ACCESS_READY;             /*!< (@ 0x00000F8C) Access Ready Register                                      */
  __IM  uint32_t  MHU_INT_ST;                   /*!< (@ 0x00000F90) Interrupt Status Register                                  */
  __OM  uint32_t  MHU_INT_CLR;                  /*!< (@ 0x00000F94) Interrupt Clear Register                                   */
  __IOM uint32_t  MHU_INT_EN;                   /*!< (@ 0x00000F98) Interrupt Enable Register                                  */
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  MHU_CHCOMB_INT_ST0;           /*!< (@ 0x00000FA0) Channel Combined Interrupt Status Register for
                                                                    Channels 0-31                                              */
  __IM  uint32_t  MHU_CHCOMB_INT_ST1;           /*!< (@ 0x00000FA4) Channel Combined Interrupt Status Register for
                                                                    Channels 32-63                                             */
  __IM  uint32_t  MHU_CHCOMB_INT_ST2;           /*!< (@ 0x00000FA8) Channel Combined Interrupt Status Register for
                                                                    Channels 64-95                                             */
  __IM  uint32_t  MHU_CHCOMB_INT_ST3;           /*!< (@ 0x00000FAC) Channel Combined Interrupt Status Register for
                                                                    Channels 96-123                                            */
  __IM  uint32_t  RESERVED2[6];
  __IM  uint32_t  MHU_IIDR;                     /*!< (@ 0x00000FC8) Implementer Identification Register                        */
  __IM  uint32_t  MHU_AIDR;                     /*!< (@ 0x00000FCC) Architecture Identification Register                       */
  __IM  uint32_t  MHU_PID4;                     /*!< (@ 0x00000FD0) Peripheral ID 4 Register                                   */
  __IM  uint32_t  RESERVED3[3];
  __IM  uint32_t  MHU_PID0;                     /*!< (@ 0x00000FE0) Peripheral ID 0 Register                                   */
  __IM  uint32_t  MHU_PID1;                     /*!< (@ 0x00000FE4) Peripheral ID 1 Register                                   */
  __IM  uint32_t  MHU_PID2;                     /*!< (@ 0x00000FE8) Peripheral ID 2 Register                                   */
  __IM  uint32_t  MHU_PID3;                     /*!< (@ 0x00000FEC) Peripheral ID 3 Register                                   */
  __IM  uint32_t  MHU_CID0;                     /*!< (@ 0x00000FF0) Component ID 0 Register                                    */
  __IM  uint32_t  MHU_CID1;                     /*!< (@ 0x00000FF4) Component ID 1 Register                                    */
  __IM  uint32_t  MHU_CID2;                     /*!< (@ 0x00000FF8) Component ID 2 Register                                    */
  __IM  uint32_t  MHU_CID3;                     /*!< (@ 0x00000FFC) Component ID 3 Register                                    */
} MHU_M55HE_A32_TX_Type;                        /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                         DMA2_SEC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA2_SEC (DMA2_SEC)
  */

typedef struct {                                /*!< (@ 0x400C0000) DMA2_SEC Structure                                         */
  __IM  uint32_t  DMA_DSR;                      /*!< (@ 0x00000000) DMA Manager Status Register                                */
  __IM  uint32_t  DMA_DPC;                      /*!< (@ 0x00000004) DMA Program Counter Register                               */
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  DMA_INTEN;                    /*!< (@ 0x00000020) Interrupt Enable Register                                  */
  __IM  uint32_t  DMA_INT_EVENT_RIS;            /*!< (@ 0x00000024) Event-Interrupt Raw Status Register                        */
  __IM  uint32_t  DMA_INTMIS;                   /*!< (@ 0x00000028) Interrupt Status Register                                  */
  __OM  uint32_t  DMA_INTCLR;                   /*!< (@ 0x0000002C) Interrupt Clear Register                                   */
  __IM  uint32_t  DMA_FSRD;                     /*!< (@ 0x00000030) Fault Status DMA Manager Register                          */
  __IM  uint32_t  DMA_FSRC;                     /*!< (@ 0x00000034) Fault Status DMA Channel Register                          */
  __IM  uint32_t  DMA_FTRD;                     /*!< (@ 0x00000038) Fault Type DMA Manager Register                            */
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  DMA_FTR[8];                   /*!< (@ 0x00000040) Fault Type for DMA Channel (n) Register                    */
  __IM  uint32_t  RESERVED2[40];
  __IOM DMA2_SEC_DMA_CHANNEL_RT_INFO_Type DMA_CHANNEL_RT_INFO[8];/*!< (@ 0x00000100) [0..7]                                    */
  __IM  uint32_t  RESERVED3[176];
  __IOM DMA2_SEC_DMA_RT_CHANNEL_CFG_Type DMA_RT_CHANNEL_CFG[8];/*!< (@ 0x00000400) [0..7]                                      */
  __IM  uint32_t  RESERVED4[512];
  __IM  uint32_t  DMA_DBGSTATUS;                /*!< (@ 0x00000D00) Debug Status Register                                      */
  __OM  uint32_t  DMA_DBGCMD;                   /*!< (@ 0x00000D04) Debug Command Register                                     */
  __OM  uint32_t  DMA_DBGINST0;                 /*!< (@ 0x00000D08) Debug Instruction Register 0                               */
  __OM  uint32_t  DMA_DBGINST1;                 /*!< (@ 0x00000D0C) Debug Instruction Register 1                               */
  __IM  uint32_t  RESERVED5[60];
  __IM  uint32_t  DMA_CR0;                      /*!< (@ 0x00000E00) Configuration Register 0                                   */
  __IM  uint32_t  DMA_CR1;                      /*!< (@ 0x00000E04) Configuration Register 1                                   */
  __IM  uint32_t  DMA_CR2;                      /*!< (@ 0x00000E08) Configuration Register 2                                   */
  __IM  uint32_t  DMA_CR3;                      /*!< (@ 0x00000E0C) Configuration Register 3                                   */
  __IM  uint32_t  DMA_CR4;                      /*!< (@ 0x00000E10) Configuration Register 4                                   */
  __IM  uint32_t  DMA_CRD;                      /*!< (@ 0x00000E14) DMA Configuration Register                                 */
  __IM  uint32_t  RESERVED6[26];
  __IOM uint32_t  DMA_WD;                       /*!< (@ 0x00000E80) Watchdog Register                                          */
  __IM  uint32_t  RESERVED7[87];
  __IM  uint32_t  DMA_PERIPH_ID_0;              /*!< (@ 0x00000FE0) Peripheral ID Register 0                                   */
  __IM  uint32_t  DMA_PERIPH_ID_1;              /*!< (@ 0x00000FE4) Peripheral ID Register 1                                   */
  __IM  uint32_t  DMA_PERIPH_ID_2;              /*!< (@ 0x00000FE8) Peripheral ID Register 2                                   */
  __IM  uint32_t  DMA_PERIPH_ID_3;              /*!< (@ 0x00000FEC) Peripheral ID Register 3                                   */
  __IM  uint32_t  DMA_PCELL_ID_0;               /*!< (@ 0x00000FF0) Component Identification Register 0                        */
  __IM  uint32_t  DMA_PCELL_ID_1;               /*!< (@ 0x00000FF4) Component Identification Register 1                        */
  __IM  uint32_t  DMA_PCELL_ID_2;               /*!< (@ 0x00000FF8) Component Identification Register 2                        */
  __IM  uint32_t  DMA_PCELL_ID_3;               /*!< (@ 0x00000FFC) Component Identification Register 3                        */
} DMA_Type;                                     /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          NPU_HE                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief NPU_HE (NPU_HE)
  */

typedef struct {                                /*!< (@ 0x400E1000) NPU_HE Structure                                           */
  __IM  uint32_t  NPUHE_ID;                     /*!< (@ 0x00000000) ID Register                                                */
  __IM  uint32_t  NPUHE_STATUS;                 /*!< (@ 0x00000004) Status Register                                            */
  __IOM uint32_t  NPUHE_CMD;                    /*!< (@ 0x00000008) Command Register                                           */
  __IOM uint32_t  NPUHE_RESET;                  /*!< (@ 0x0000000C) Reset Register                                             */
  __IOM uint32_t  NPUHE_QBASE0;                 /*!< (@ 0x00000010) Queue Base Register 0                                      */
  __IOM uint32_t  NPUHE_QBASE1;                 /*!< (@ 0x00000014) Queue Base Register 1                                      */
  __IM  uint32_t  NPUHE_QREAD;                  /*!< (@ 0x00000018) Queue Read Register                                        */
  __IOM uint32_t  NPUHE_QCONFIG;                /*!< (@ 0x0000001C) Queue Configuration Register                               */
  __IOM uint32_t  NPUHE_QSIZE;                  /*!< (@ 0x00000020) Queue Size Register                                        */
  __IM  uint32_t  NPUHE_PROT;                   /*!< (@ 0x00000024) Protection Register                                        */
  __IM  uint32_t  NPUHE_CONFIG;                 /*!< (@ 0x00000028) Module Configuration Register                              */
  __IOM uint32_t  NPUHE_LOCK;                   /*!< (@ 0x0000002C) Lock Register                                              */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  NPUHE_REGIONCFG;              /*!< (@ 0x0000003C) Region Configuration Register                              */
  __IOM uint32_t  NPUHE_AXI_LIMIT0;             /*!< (@ 0x00000040) AXI Limit Register 0                                       */
  __IOM uint32_t  NPUHE_AXI_LIMIT1;             /*!< (@ 0x00000044) AXI Limit Register 1                                       */
  __IOM uint32_t  NPUHE_AXI_LIMIT2;             /*!< (@ 0x00000048) AXI Limit Register 2                                       */
  __IOM uint32_t  NPUHE_AXI_LIMIT3;             /*!< (@ 0x0000004C) AXI Limit Register 3                                       */
  __IM  uint32_t  RESERVED1[12];
  __IOM uint32_t  NPUHE_BASEP0;                 /*!< (@ 0x00000080) Base Pointer Register 0                                    */
  __IOM uint32_t  NPUHE_BASEP1;                 /*!< (@ 0x00000084) Base Pointer Register 1                                    */
  __IOM uint32_t  NPUHE_BASEP2;                 /*!< (@ 0x00000088) Base Pointer Register 2                                    */
  __IOM uint32_t  NPUHE_BASEP3;                 /*!< (@ 0x0000008C) Base Pointer Register 3                                    */
  __IOM uint32_t  NPUHE_BASEP4;                 /*!< (@ 0x00000090) Base Pointer Register 4                                    */
  __IOM uint32_t  NPUHE_BASEP5;                 /*!< (@ 0x00000094) Base Pointer Register 5                                    */
  __IOM uint32_t  NPUHE_BASEP6;                 /*!< (@ 0x00000098) Base Pointer Register 6                                    */
  __IOM uint32_t  NPUHE_BASEP7;                 /*!< (@ 0x0000009C) Base Pointer Register 7                                    */
  __IOM uint32_t  NPUHE_BASEP8;                 /*!< (@ 0x000000A0) Base Pointer Register 8                                    */
  __IOM uint32_t  NPUHE_BASEP9;                 /*!< (@ 0x000000A4) Base Pointer Register 9                                    */
  __IOM uint32_t  NPUHE_BASEP10;                /*!< (@ 0x000000A8) Base Pointer Register 10                                   */
  __IOM uint32_t  NPUHE_BASEP11;                /*!< (@ 0x000000AC) Base Pointer Register 11                                   */
  __IOM uint32_t  NPUHE_BASEP12;                /*!< (@ 0x000000B0) Base Pointer Register 12                                   */
  __IOM uint32_t  NPUHE_BASEP13;                /*!< (@ 0x000000B4) Base Pointer Register 13                                   */
  __IOM uint32_t  NPUHE_BASEP14;                /*!< (@ 0x000000B8) Base Pointer Register 14                                   */
  __IOM uint32_t  NPUHE_BASEP15;                /*!< (@ 0x000000BC) Base Pointer Register 15                                   */
  __IM  uint32_t  RESERVED2[48];
  __IOM uint32_t  NPUHE_PMCR;                   /*!< (@ 0x00000180) Performance Monitor Control Register                       */
  __IOM uint32_t  NPUHE_PMCNTENSET;             /*!< (@ 0x00000184) Performance Monitor Count Enable Set Register              */
  __IOM uint32_t  NPUHE_PMCNTENCLR;             /*!< (@ 0x00000188) Performance Monitor Count Enable Clear Register            */
  __IOM uint32_t  NPUHE_PMOVSSET;               /*!< (@ 0x0000018C) Performance Monitor Overflow Status Set Register           */
  __IOM uint32_t  NPUHE_PMOVSCLR;               /*!< (@ 0x00000190) Performance Monitor Overflow Status Clear Register         */
  __IOM uint32_t  NPUHE_PMINTSET;               /*!< (@ 0x00000194) Performance Monitor Interrupt Set Register                 */
  __IOM uint32_t  NPUHE_PMINTCLR;               /*!< (@ 0x00000198) Performance Monitor Interrupt Clear Register               */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  NPUHE_PMCCNTR_LO;             /*!< (@ 0x000001A0) Performance Monitor Cycle Count Low Register               */
  __IOM uint32_t  NPUHE_PMCCNTR_HI;             /*!< (@ 0x000001A4) Performance Monitor Cycle Count High Register              */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  NPUHE_PMCAXI_CHAN;            /*!< (@ 0x000001AC) Performance Monitor AXI Channel Select Register            */
  __IM  uint32_t  RESERVED5[84];
  __IOM uint32_t  NPUHE_PMEVCNTR0;              /*!< (@ 0x00000300) Performance Monitor Event Count Register 0                 */
  __IOM uint32_t  NPUHE_PMEVCNTR1;              /*!< (@ 0x00000304) Performance Monitor Event Count Register 1                 */
  __IOM uint32_t  NPUHE_PMEVCNTR2;              /*!< (@ 0x00000308) Performance Monitor Event Count Register 2                 */
  __IOM uint32_t  NPUHE_PMEVCNTR3;              /*!< (@ 0x0000030C) Performance Monitor Event Count Register 3                 */
  __IM  uint32_t  RESERVED6[28];
  __IOM uint32_t  NPUHE_PMEVTYPER0;             /*!< (@ 0x00000380) Performance Monitor Event Type Register 0                  */
  __IOM uint32_t  NPUHE_PMEVTYPER1;             /*!< (@ 0x00000384) Performance Monitor Event Type Register 1                  */
  __IOM uint32_t  NPUHE_PMEVTYPER2;             /*!< (@ 0x00000388) Performance Monitor Event Type Register 2                  */
  __IOM uint32_t  NPUHE_PMEVTYPER3;             /*!< (@ 0x0000038C) Performance Monitor Event Type Register 3                  */
  __IM  uint32_t  RESERVED7[784];
  __IM  uint32_t  NPUHE_PID4;                   /*!< (@ 0x00000FD0) Peripheral ID Register 4                                   */
  __IM  uint32_t  NPUHE_PID5;                   /*!< (@ 0x00000FD4) Peripheral ID Register 5                                   */
  __IM  uint32_t  NPUHE_PID6;                   /*!< (@ 0x00000FD8) Peripheral ID Register 6                                   */
  __IM  uint32_t  NPUHE_PID7;                   /*!< (@ 0x00000FDC) Peripheral ID Register 7                                   */
  __IM  uint32_t  NPUHE_PID0;                   /*!< (@ 0x00000FE0) Peripheral ID Register 0                                   */
  __IM  uint32_t  NPUHE_PID1;                   /*!< (@ 0x00000FE4) Peripheral ID Register 1                                   */
  __IM  uint32_t  NPUHE_PID2;                   /*!< (@ 0x00000FE8) Peripheral ID Register 2                                   */
  __IM  uint32_t  NPUHE_PID3;                   /*!< (@ 0x00000FEC) Peripheral ID Register 3                                   */
  __IM  uint32_t  NPUHE_CID0;                   /*!< (@ 0x00000FF0) Component ID Register 0                                    */
  __IM  uint32_t  NPUHE_CID1;                   /*!< (@ 0x00000FF4) Component ID Register 1                                    */
  __IM  uint32_t  NPUHE_CID2;                   /*!< (@ 0x00000FF8) Component ID Register 2                                    */
  __IM  uint32_t  NPUHE_CID3;                   /*!< (@ 0x00000FFC) Component ID Register 3                                    */
} NPU_HE_Type;                                  /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                        WDT_HE_CTRL                                        ================ */
/* =========================================================================================================================== */

/**
  * @brief WDT_HE_CTRL (WDT_HE_CTRL)
  */

typedef struct {                                /*!< (@ 0x40100000) WDT_HE_CTRL Structure                                      */
  __IOM uint32_t  WDT_WDOGLOAD;                 /*!< (@ 0x00000000) Watchdog Load Register                                     */
  __IM  uint32_t  WDT_WDOGVALUE;                /*!< (@ 0x00000004) Watchdog Value Register                                    */
  __IOM uint32_t  WDT_WDOGCONTROL;              /*!< (@ 0x00000008) Watchdog Control Register                                  */
  __OM  uint32_t  WDT_WDOGINTCLR;               /*!< (@ 0x0000000C) Watchdog Clear Interrupt Register                          */
  __IM  uint32_t  WDT_WDOGRIS;                  /*!< (@ 0x00000010) Watchdog Raw Interrupt Status Register                     */
  __IM  uint32_t  WDT_WDOGMIS;                  /*!< (@ 0x00000014) Watchdog Interrupt Status Register                         */
  __IM  uint32_t  RESERVED[762];
  __IOM uint32_t  WDT_WDOGLOCK;                 /*!< (@ 0x00000C00) Watchdog Lock Register                                     */
  __IM  uint32_t  RESERVED1[243];
  __IM  uint32_t  WDT_WDOGPERIPHID4;            /*!< (@ 0x00000FD0) Peripheral ID Register 4                                   */
  __IM  uint32_t  RESERVED2[3];
  __IM  uint32_t  WDT_WDOGPERIPHID0;            /*!< (@ 0x00000FE0) Peripheral ID Register 0                                   */
  __IM  uint32_t  WDT_WDOGPERIPHID1;            /*!< (@ 0x00000FE4) Peripheral ID Register 1                                   */
  __IM  uint32_t  WDT_WDOGPERIPHID2;            /*!< (@ 0x00000FE8) Peripheral ID Register 2                                   */
  __IM  uint32_t  WDT_WDOGPERIPHID3;            /*!< (@ 0x00000FEC) Peripheral ID Register 3                                   */
  __IM  uint32_t  WDT_WDOGPCELLID0;             /*!< (@ 0x00000FF0) Component ID Register 0                                    */
  __IM  uint32_t  WDT_WDOGPCELLID1;             /*!< (@ 0x00000FF4) Component ID Register 1                                    */
  __IM  uint32_t  WDT_WDOGPCELLID2;             /*!< (@ 0x00000FF8) Component ID Register 2                                    */
  __IM  uint32_t  WDT_WDOGPCELLID3;             /*!< (@ 0x00000FFC) Component ID Register 3                                    */
} WDT_HE_CTRL_Type;                             /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           LPRTC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPRTC (LPRTC)
  */

typedef struct {                                /*!< (@ 0x42000000) LPRTC Structure                                            */
  __IM  uint32_t  LPRTC_CCVR;                   /*!< (@ 0x00000000) Current Counter Value Register                             */
  __IOM uint32_t  LPRTC_CMR;                    /*!< (@ 0x00000004) Counter Match Register                                     */
  __IOM uint32_t  LPRTC_CLR;                    /*!< (@ 0x00000008) Counter Load Register                                      */
  __IOM uint32_t  LPRTC_CCR;                    /*!< (@ 0x0000000C) Counter Control Register                                   */
  __IM  uint32_t  LPRTC_STAT;                   /*!< (@ 0x00000010) Interrupt Status Register                                  */
  __IM  uint32_t  LPRTC_RSTAT;                  /*!< (@ 0x00000014) Interrupt Raw Status Register                              */
  __IM  uint32_t  LPRTC_EOI;                    /*!< (@ 0x00000018) End-of-Interrupt Register                                  */
  __IM  uint32_t  LPRTC_COMP_VERSION;           /*!< (@ 0x0000001C) Component Version Register                                 */
  __IOM uint32_t  LPRTC_CPSR;                   /*!< (@ 0x00000020) Counter Prescaler Register                                 */
  __IM  uint32_t  LPRTC_CPCVR;                  /*!< (@ 0x00000024) Current Prescaler Counter Value Register                   */
} LPRTC_Type;                                   /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                          LPTIMER                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief LPTIMER (LPTIMER)
  */

typedef struct {                                /*!< (@ 0x42001000) LPTIMER Structure                                          */
  __IOM LPTIMER_LPTIMER_CHANNEL_CFG_Type LPTIMER_CHANNEL_CFG[4];/*!< (@ 0x00000000) [0..3]                                     */
  __IM  uint32_t  RESERVED[20];
  __IM  uint32_t  LPTIMERS_INTSTATUS;           /*!< (@ 0x000000A0) Timers Interrupt Status Register                           */
  __IM  uint32_t  LPTIMERS_EOI;                 /*!< (@ 0x000000A4) Timers End-of-Interrupt Register                           */
  __IM  uint32_t  LPTIMERS_RAWINTSTATUS;        /*!< (@ 0x000000A8) Timers Raw Interrupt Status Register                       */
  __IM  uint32_t  LPTIMERS_COMP_VERSION;        /*!< (@ 0x000000AC) LPTIMER Component Version                                  */
  __IOM uint32_t  LPTIMER_LOADCOUNT2[4];        /*!< (@ 0x000000B0) Timer (n) Load Count2 Register                             */
} LPTIMER_Type;                                 /*!< Size = 192 (0xc0)                                                         */



/* =========================================================================================================================== */
/* ================                                          LPGPIO                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPGPIO (LPGPIO)
  */

typedef struct {                                /*!< (@ 0x42002000) LPGPIO Structure                                           */
  __IOM uint32_t  GPIO_SWPORTA_DR;              /*!< (@ 0x00000000) GPIO Port Data Register                                    */
  __IOM uint32_t  GPIO_SWPORTA_DDR;             /*!< (@ 0x00000004) GPIO Port Data Direction Register                          */
  __IOM uint32_t  GPIO_SWPORTA_CTL;             /*!< (@ 0x00000008) GPIO Port Data Source Register                             */
  __IM  uint32_t  RESERVED[9];
  __IOM uint32_t  GPIO_INTEN;                   /*!< (@ 0x00000030) GPIO Port Interrupt Enable Register                        */
  __IOM uint32_t  GPIO_INTMASK;                 /*!< (@ 0x00000034) GPIO Port Interrupt Mask Register                          */
  __IOM uint32_t  GPIO_INTTYPE_LEVEL;           /*!< (@ 0x00000038) GPIO Port Interrupt Level Register                         */
  __IOM uint32_t  GPIO_INT_POLARITY;            /*!< (@ 0x0000003C) GPIO Port Interrupt Polarity Register                      */
  __IM  uint32_t  GPIO_INTSTATUS;               /*!< (@ 0x00000040) GPIO Port Interrupt Status Register                        */
  __IM  uint32_t  GPIO_RAW_INTSTATUS;           /*!< (@ 0x00000044) GPIO Port Raw Interrupt Status Register                    */
  __IOM uint32_t  GPIO_DEBOUNCE;                /*!< (@ 0x00000048) GPIO Port Debounce Enable Register                         */
  __OM  uint32_t  GPIO_PORTA_EOI;               /*!< (@ 0x0000004C) GPIO Port End Of Interrupt Register                        */
  __IM  uint32_t  GPIO_EXT_PORTA;               /*!< (@ 0x00000050) GPIO External Port Read Register                           */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  GPIO_LS_SYNC;                 /*!< (@ 0x00000060) Synchronization Level Register                             */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  GPIO_INT_BOTHEDGE;            /*!< (@ 0x00000068) GPIO Port Interrupt Both Edge Type Register                */
  __IM  uint32_t  GPIO_VER_ID_CODE;             /*!< (@ 0x0000006C) GPIO Version ID Register                                   */
  __IM  uint32_t  GPIO_CONFIG_REG2;             /*!< (@ 0x00000070) Module Configuration Register 2                            */
  __IM  uint32_t  GPIO_CONFIG_REG1;             /*!< (@ 0x00000074) Module Configuration Register 1                            */
  __IM  uint32_t  RESERVED3[34];
  __IOM uint32_t  GPIO_BIT_MAN_CTRL;            /*!< (@ 0x00000100) Bit Manipulation Control Register                          */
  __OM  uint32_t  GPIO_BIT_MAN_CTRL_W1C;        /*!< (@ 0x00000104) Bit Manipulation Control Register - Write 1 to
                                                                    Clear                                                      */
  __OM  uint32_t  GPIO_BIT_MAN_CTRL_W1F;        /*!< (@ 0x00000108) Bit Manipulation Control Register - Write 1 to
                                                                    Toggle                                                     */
  __OM  uint32_t  GPIO_BIT_MAN_CTRL_W1S;        /*!< (@ 0x0000010C) Bit Manipulation Control Register - Write 1 to
                                                                    Set                                                        */
} GPIO_Type;                                    /*!< Size = 272 (0x110)                                                        */



/* =========================================================================================================================== */
/* ================                                           LPCMP                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPCMP (LPCMP)
  */

typedef struct {                                /*!< (@ 0x42003000) LPCMP Structure                                            */
  __IOM uint32_t  LPCOMP_CTRL;                  /*!< (@ 0x00000000) LPCMP Control Register                                     */
} LPCMP_Type;                                   /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                          BOR_BOD                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief BOR_BOD (BOR_BOD)
  */

typedef struct {                                /*!< (@ 0x42004000) BOR_BOD Structure                                          */
  __IOM uint32_t  BROWNOUT_CTRL;                /*!< (@ 0x00000000) BOR and BOD Control Register                               */
} BOR_BOD_Type;                                 /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                        LPGPIO_CTRL                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief LPGPIO_CTRL (LPGPIO_CTRL)
  */

typedef struct {                                /*!< (@ 0x42007000) LPGPIO_CTRL Structure                                      */
  __IOM uint32_t  LPGPIO_CTRL_[8];              /*!< (@ 0x00000000) LPGPIO I/O Buffer Control Register                         */
} LPGPIO_CTRL_Type;                             /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                          LPSPI0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPSPI0 (LPSPI0)
  */

typedef struct {                                /*!< (@ 0x43000000) LPSPI0 Structure                                           */
  __IOM uint32_t  LPSPI_CTRLR0;                 /*!< (@ 0x00000000) Control Register 0                                         */
  __IOM uint32_t  LPSPI_CTRLR1;                 /*!< (@ 0x00000004) Control Register 1                                         */
  __IOM uint32_t  LPSPI_ENR;                    /*!< (@ 0x00000008) LPSPI Enable Register                                      */
  __IOM uint32_t  LPSPI_MWCR;                   /*!< (@ 0x0000000C) Microwire Control Register                                 */
  __IOM uint32_t  LPSPI_SER;                    /*!< (@ 0x00000010) Slave Enable Register                                      */
  __IOM uint32_t  LPSPI_BAUDR;                  /*!< (@ 0x00000014) Baud Rate Select Register                                  */
  __IOM uint32_t  LPSPI_TXFTLR;                 /*!< (@ 0x00000018) Transmit FIFO Threshold Level Register                     */
  __IOM uint32_t  LPSPI_RXFTLR;                 /*!< (@ 0x0000001C) Receive FIFO Threshold Level Register                      */
  __IM  uint32_t  LPSPI_TXFLR;                  /*!< (@ 0x00000020) Transmit FIFO Level Register                               */
  __IM  uint32_t  LPSPI_RXFLR;                  /*!< (@ 0x00000024) Receive FIFO Level Register                                */
  __IM  uint32_t  LPSPI_SR;                     /*!< (@ 0x00000028) Status Register                                            */
  __IOM uint32_t  LPSPI_IMR;                    /*!< (@ 0x0000002C) Interrupt Mask Register                                    */
  __IM  uint32_t  LPSPI_ISR;                    /*!< (@ 0x00000030) Interrupt Status Register                                  */
  __IM  uint32_t  LPSPI_RISR;                   /*!< (@ 0x00000034) Raw Interrupt Status Register                              */
  __IM  uint32_t  LPSPI_TXOICR;                 /*!< (@ 0x00000038) Transmit FIFO Overflow Interrupt Clear Register            */
  __IM  uint32_t  LPSPI_RXOICR;                 /*!< (@ 0x0000003C) Receive FIFO Overflow Interrupt Clear Register             */
  __IM  uint32_t  LPSPI_RXUICR;                 /*!< (@ 0x00000040) Receive FIFO Underflow Interrupt Clear Register            */
  __IM  uint32_t  LPSPI_MSTICR;                 /*!< (@ 0x00000044) Multi-Master Interrupt Clear Register                      */
  __IM  uint32_t  LPSPI_ICR;                    /*!< (@ 0x00000048) Interrupt Clear Register                                   */
  __IOM uint32_t  LPSPI_DMACR;                  /*!< (@ 0x0000004C) DMA Control Register                                       */
  __IOM uint32_t  LPSPI_DMATDLR;                /*!< (@ 0x00000050) DMA Transmit Data Level Register                           */
  __IOM uint32_t  LPSPI_DMARDLR;                /*!< (@ 0x00000054) DMA Receive Data Level Register                            */
  __IM  uint32_t  LPSPI_IDR;                    /*!< (@ 0x00000058) Identification Register                                    */
  __IM  uint32_t  LPSPI_VERSION_ID;             /*!< (@ 0x0000005C) Version ID Register                                        */
  __IOM uint32_t  LPSPI_DR[36];                 /*!< (@ 0x00000060) LPSPI Data Register (n)                                    */
} LPSPI_Type;                                   /*!< Size = 240 (0xf0)                                                         */



/* =========================================================================================================================== */
/* ================                                           LPI2S                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPI2S (LPI2S)
  */

typedef struct {                                /*!< (@ 0x43001000) LPI2S Structure                                            */
  __IOM uint32_t  I2S_IER;                      /*!< (@ 0x00000000) I2S Enable Register                                        */
  __IOM uint32_t  I2S_IRER;                     /*!< (@ 0x00000004) I2S Receiver Block Enable Register                         */
  __IOM uint32_t  I2S_ITER;                     /*!< (@ 0x00000008) I2S Transmitter Block Enable Register                      */
  __IOM uint32_t  I2S_CER;                      /*!< (@ 0x0000000C) Clock Enable Register                                      */
  __IOM uint32_t  I2S_CCR;                      /*!< (@ 0x00000010) Clock Configuration Register                               */
  __IOM uint32_t  I2S_RXFFR;                    /*!< (@ 0x00000014) Receiver Block FIFO Reset Register                         */
  __IOM uint32_t  I2S_TXFFR;                    /*!< (@ 0x00000018) Transmitter Block FIFO Reset Register                      */
  __IM  uint32_t  I2S_SR;                       /*!< (@ 0x0000001C) Status Register                                            */
  
  union {
    __IM  uint32_t I2S_LRBR0;                   /*!< (@ 0x00000020) Left Receive Buffer Register 0                             */
    __OM  uint32_t I2S_LTHR0;                   /*!< (@ 0x00000020) Left Transmit Holding Register 0                           */
  };
  
  union {
    __IM  uint32_t I2S_RRBR0;                   /*!< (@ 0x00000024) Right Receive Buffer Register 0                            */
    __OM  uint32_t I2S_RTHR0;                   /*!< (@ 0x00000024) Right Transmit Holding Register                            */
  };
  __IOM uint32_t  I2S_RER0;                     /*!< (@ 0x00000028) Receive Enable Register 0                                  */
  __IOM uint32_t  I2S_TER0;                     /*!< (@ 0x0000002C) Transmit Enable Register 0                                 */
  __IOM uint32_t  I2S_RCR0;                     /*!< (@ 0x00000030) Receive Configuration Register 0                           */
  __IOM uint32_t  I2S_TCR0;                     /*!< (@ 0x00000034) Transmit Configuration Register 0                          */
  __IM  uint32_t  I2S_ISR0;                     /*!< (@ 0x00000038) Interrupt Status Register 0                                */
  __IOM uint32_t  I2S_IMR0;                     /*!< (@ 0x0000003C) Interrupt Mask Register 0                                  */
  __IM  uint32_t  I2S_ROR0;                     /*!< (@ 0x00000040) Receive Overrun Register 0                                 */
  __IM  uint32_t  I2S_TOR0;                    /*!< (@ 0x00000044) Transmit Interrupt Clear Register 0                        */
  __IOM uint32_t  I2S_RFCR0;                    /*!< (@ 0x00000048) Receive FIFO Configuration Register 0                      */
  __IOM uint32_t  I2S_TFCR0;                    /*!< (@ 0x0000004C) Transmit FIFO Configuration Register 0                     */
  __IOM uint32_t  I2S_RFF0;                     /*!< (@ 0x00000050) Receive FIFO Flush Register 0                              */
  __IOM uint32_t  I2S_TFF0;                     /*!< (@ 0x00000054) Transmit FIFO Flush Register 0                             */
  __IM  uint32_t  RESERVED[90];
  __IM  uint32_t  I2S_RXDMA;                    /*!< (@ 0x000001C0) Receiver Block DMA Register                                */
  __IOM uint32_t  I2S_RRXDMA;                   /*!< (@ 0x000001C4) Reset Receiver Block DMA Register                          */
  __OM  uint32_t  I2S_TXDMA;                    /*!< (@ 0x000001C8) Transmitter Block DMA Register                             */
  __IOM uint32_t  I2S_RTXDMA;                   /*!< (@ 0x000001CC) Reset Transmitter Block DMA Register                       */
  __IM  uint32_t  RESERVED1[8];
  __IM  uint32_t  I2S_COMP_PARAM_2;             /*!< (@ 0x000001F0) Module Configuration Register 2                            */
  __IM  uint32_t  I2S_COMP_PARAM_1;             /*!< (@ 0x000001F4) Module Configuration Register 1                            */
  __IM  uint32_t  I2S_COMP_VERSION;             /*!< (@ 0x000001F8) Component Parameter Register                               */
  __IM  uint32_t  I2S_COMP_TYPE;                /*!< (@ 0x000001FC) Component Type Register                                    */
  __IOM uint32_t  I2S_DMACR;                    /*!< (@ 0x00000200) DMA Control Register                                       */
  __IM  uint32_t  RESERVED2[8];
  
  union {
    __IM  uint32_t I2S_RSLOT[16];               /*!< (@ 0x00000224) Receive Slot (n) Buffer Register                           */
    __IM  uint32_t I2S_TSLOT[16];               /*!< (@ 0x00000224) Transmit Slot (n) Buffer Register                          */
  };
} I2S_Type;                                     /*!< Size = 612 (0x264)                                                        */



/* =========================================================================================================================== */
/* ================                                           LPPDM                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPPDM (LPPDM)
  */

typedef struct {                                /*!< (@ 0x43002000) LPPDM Structure                                            */
  __IOM uint32_t  PDM_CTL0;                     /*!< (@ 0x00000000) PDM Audio Control Register 0                               */
  __IOM uint32_t  PDM_CTL1;                     /*!< (@ 0x00000004) PDM Audio Control Register 1                               */
  __IOM uint32_t  PDM_FIFO_WATERMARK_H;         /*!< (@ 0x00000008) FIFO Watermark Register                                    */
  __IM  uint32_t  PDM_FIFO_STAT;                /*!< (@ 0x0000000C) FIFO Status Register                                       */
  __IM  uint32_t  PDM_ERROR_IRQ;                /*!< (@ 0x00000010) FIFO Error Interrupt Status Register                       */
  __IM  uint32_t  PDM_WARN_IRQ;                 /*!< (@ 0x00000014) FIFO Warning Interrupt Status Register                     */
  __IM  uint32_t  PDM_AUDIO_DETECT_IRQ;         /*!< (@ 0x00000018) Audio Detection Interrupt Status Register                  */
  __IOM uint32_t  PDM_IRQ_ENABLE;               /*!< (@ 0x0000001C) Interrupt Enable Register                                  */
  __IOM uint32_t  PDM_CH0_CH1_AUDIO_OUT;        /*!< (@ 0x00000020) Channels 0 and 1 Audio Output Register                     */
  __IOM uint32_t  PDM_CH2_CH3_AUDIO_OUT;        /*!< (@ 0x00000024) Channels 2 and 3 Audio Output Register                     */
  __IOM uint32_t  PDM_CH4_CH5_AUDIO_OUT;        /*!< (@ 0x00000028) Channels 4 and 5 Audio Output Register                     */
  __IOM uint32_t  PDM_CH6_CH7_AUDIO_OUT;        /*!< (@ 0x0000002C) Channels 6 and 7 Audio Output Register                     */
  __IM  uint32_t  RESERVED[4];
  __IOM LPPDM_PDM_CHANNEL_CFG_Type PDM_CHANNEL_CFG[8];/*!< (@ 0x00000040) [0..7]                                               */
} PDM_Type;                                     /*!< Size = 2112 (0x840)                                                       */



/* =========================================================================================================================== */
/* ================                                           LPCPI                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPCPI (LPCPI)
  */

typedef struct {                                /*!< (@ 0x43003000) LPCPI Structure                                            */
  __IOM uint32_t  CAM_CTRL;                     /*!< (@ 0x00000000) Camera Control Register                                    */
  __OM  uint32_t  CAM_INTR;                     /*!< (@ 0x00000004) Camera Interrupt Status Register                           */
  __IOM uint32_t  CAM_INTR_ENA;                 /*!< (@ 0x00000008) Camera Interrupt Enable Register                           */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CAM_CFG;                      /*!< (@ 0x00000010) Camera Configuration Register                              */
  __IOM uint32_t  CAM_FIFO_CTRL;                /*!< (@ 0x00000014) Camera FIFO Control Register                               */
  __IM  uint32_t  CAM_AXI_ERR_STAT;             /*!< (@ 0x00000018) Camera AXI Error Status Register                           */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CAM_VIDEO_HCFG;               /*!< (@ 0x00000020) Camera Video Horizontal Configure Register                 */
  __IOM uint32_t  CAM_VIDEO_VCFG;               /*!< (@ 0x00000024) Camera Video Vertical Configure Register                   */
  __IOM uint32_t  CAM_VIDEO_FCFG;               /*!< (@ 0x00000028) Camera Video Frame Configuration Register                  */
  __IOM uint32_t  CAM_CSI_CMCFG;                /*!< (@ 0x0000002C) Camera MIPI CSI Color Mode Configuration Register          */
  __IOM uint32_t  CAM_FRAME_ADDR;               /*!< (@ 0x00000030) Camera Video Frame Start Address Register                  */
  __IOM uint32_t  CAM_FRAME_ADDRB;              /*!< (@ 0x00000034) Camera Sequential Video Frame Start Address B
                                                                    Register                                                   */
  __IOM uint32_t  CAM_FRAME_ADDRC;              /*!< (@ 0x00000038) Camera Sequential Video Frame Start Address C
                                                                    Register                                                   */
  __IOM uint32_t  CAM_FRAME_ADDRD;              /*!< (@ 0x0000003C) Camera Sequential Video Frame Start Address D
                                                                    Register                                                   */
  __IM  uint32_t  RESERVED2[4];
  __IOM uint32_t  CAM_AXI_STREAM_CTRL;          /*!< (@ 0x00000050) Camera AXI Stream Control Register                         */
} CPI_Type;                                     /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                         M55HE_CFG                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief M55HE_CFG (M55HE_CFG)
  */

typedef struct {                                /*!< (@ 0x43007000) M55HE_CFG Structure                                        */
  __IOM uint32_t  HE_DMA_CTRL;                  /*!< (@ 0x00000000) DMA2 Boot Control Register                                 */
  __IOM uint32_t  HE_DMA_IRQ;                   /*!< (@ 0x00000004) DMA2 Boot IRQ Non-Secure Register                          */
  __IOM uint32_t  HE_DMA_PERIPH;                /*!< (@ 0x00000008) DMA2 Boot Peripheral Non-Secure Register                   */
  __IOM uint32_t  HE_DMA_SEL;                   /*!< (@ 0x0000000C) DMA2 Select Register                                       */
  __IOM uint32_t  HE_CLK_ENA;                   /*!< (@ 0x00000010) Peripheral Clock Enable Register                           */
  __IOM uint32_t  HE_I2S_CTRL;                  /*!< (@ 0x00000014) LPI2S Control Register                                     */
  __IOM uint32_t  HE_I3C_CTRL;                  /*!< (@ 0x00000018) LPI3C Control Register                                     */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  HE_CAMERA_PIXCLK;             /*!< (@ 0x00000020) LPCPI Pixel Clock Control Register                         */
  __IOM uint32_t  HE_DMA_GPIO16_SEL;            /*!< (@ 0x00000024) DMA2 GPIO16 Filter Select Register                         */
} M55HE_CFG_Type;                               /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                          LPUART                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPUART (LPUART)
  */

typedef struct {                                /*!< (@ 0x43008000) LPUART Structure                                           */
  
  union {
    __IM  uint32_t UART_RBR;                    /*!< (@ 0x00000000) Receive Buffer Register                                    */
    __IOM uint32_t UART_DLL;                    /*!< (@ 0x00000000) Divisor Latch Low Register                                 */
    __IOM uint32_t UART_THR;                    /*!< (@ 0x00000000) Transmit Holding Register                                  */
  };
  
  union {
    __IOM uint32_t UART_DLH;                    /*!< (@ 0x00000004) Divisor Latch High Register                                */
    __IOM uint32_t UART_IER;                    /*!< (@ 0x00000004) Interrupt Enable Register                                  */
  };
  
  union {
    __IOM uint32_t UART_FCR;                    /*!< (@ 0x00000008) FIFO Control Register                                      */
    __IM  uint32_t UART_IIR;                    /*!< (@ 0x00000008) Interrupt Identification Register                          */
  };
  __IOM uint32_t  UART_LCR;                     /*!< (@ 0x0000000C) Line Control Register                                      */
  __IOM uint32_t  UART_MCR;                     /*!< (@ 0x00000010) Modem Control Register                                     */
  __IM  uint32_t  UART_LSR;                     /*!< (@ 0x00000014) Line Status Register                                       */
  __IM  uint32_t  UART_MSR;                     /*!< (@ 0x00000018) Modem Status Register                                      */
  __IOM uint32_t  UART_SCR;                     /*!< (@ 0x0000001C) Scratchpad Register                                        */
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IM  uint32_t UART_SRBR[16];               /*!< (@ 0x00000030) Shadow Receive Buffer Register (n)                         */
    __IOM uint32_t UART_STHR[16];               /*!< (@ 0x00000030) Shadow Transmit Holding Register (n)                       */
  };
  __IOM uint32_t  UART_FAR;                     /*!< (@ 0x00000070) FIFO Access Register                                       */
  __IM  uint32_t  UART_TFR;                     /*!< (@ 0x00000074) Tx FIFO Read Register                                      */
  __IOM uint32_t  UART_RFW;                     /*!< (@ 0x00000078) Rx FIFO Write Register                                     */
  __IM  uint32_t  UART_USR;                     /*!< (@ 0x0000007C) UART Status Register                                       */
  __IM  uint32_t  UART_TFL;                     /*!< (@ 0x00000080) Tx FIFO Level Register                                     */
  __IM  uint32_t  UART_RFL;                     /*!< (@ 0x00000084) Rx FIFO Level Register                                     */
  __IOM uint32_t  UART_SRR;                     /*!< (@ 0x00000088) Software Reset Register                                    */
  __IOM uint32_t  UART_SRTS;                    /*!< (@ 0x0000008C) Shadow Request to Send Register                            */
  __IOM uint32_t  UART_SBCR;                    /*!< (@ 0x00000090) Shadow Break Control Register                              */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  UART_SFE;                     /*!< (@ 0x00000098) Shadow FIFO Enable Register                                */
  __IOM uint32_t  UART_SRT;                     /*!< (@ 0x0000009C) Shadow RCVR Trigger Register                               */
  __IOM uint32_t  UART_STET;                    /*!< (@ 0x000000A0) Shadow Tx Empty Trigger Register                           */
  __IOM uint32_t  UART_HTX;                     /*!< (@ 0x000000A4) Halt Tx Register                                           */
  __IOM uint32_t  UART_DMASA;                   /*!< (@ 0x000000A8) DMA Software Acknowledge Register                          */
  __IOM uint32_t  UART_TCR;                     /*!< (@ 0x000000AC) Transceiver Control Register                               */
  __IOM uint32_t  UART_DE_EN;                   /*!< (@ 0x000000B0) Driver Output Enable Register                              */
  __IOM uint32_t  UART_RE_EN;                   /*!< (@ 0x000000B4) Receiver Output Enable Register                            */
  __IOM uint32_t  UART_DET;                     /*!< (@ 0x000000B8) Driver Output Enable Timing Register                       */
  __IOM uint32_t  UART_TAT;                     /*!< (@ 0x000000BC) Turnaround Timing Register                                 */
  __IOM uint32_t  UART_DLF;                     /*!< (@ 0x000000C0) Divisor Latch Fraction Register                            */
  __IOM uint32_t  UART_RAR;                     /*!< (@ 0x000000C4) Receive Address Register                                   */
  __IOM uint32_t  UART_TAR;                     /*!< (@ 0x000000C8) Transmit Address Register                                  */
  __IOM uint32_t  UART_LCR_EXT;                 /*!< (@ 0x000000CC) Line Extended Control Register                             */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  UART_REG_TIMEOUT_RST;         /*!< (@ 0x000000D4) Timeout Counter Reset Value Register                       */
  __IM  uint32_t  RESERVED3[7];
  __IM  uint32_t  UART_CPR;                     /*!< (@ 0x000000F4) Module Configuration Register                              */
  __IM  uint32_t  UART_UCV;                     /*!< (@ 0x000000F8) Component Version Register                                 */
  __IM  uint32_t  UART_CTR;                     /*!< (@ 0x000000FC) Component Type Register                                    */
} UART_Type;                                    /*!< Size = 256 (0x100)                                                        */



/* =========================================================================================================================== */
/* ================                                          LPI2C0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LPI2C0 (LPI2C0)
  */

typedef struct {                                /*!< (@ 0x43009000) LPI2C0 Structure                                           */
  __IOM uint32_t  LPI2C_DATA;                   /*!< (@ 0x00000000) Read/Write Data Register                                   */
  __IM  uint32_t  RESERVED[3];
  __IM  uint32_t  LPI2C_INFIFO_STATUS;          /*!< (@ 0x00000010) Inbound FIFO Status Register                               */
  __IM  uint32_t  RESERVED1[3];
  __IM  uint32_t  LPI2C_OUTFIFO_STATUS;         /*!< (@ 0x00000020) Outbound FIFO Status Register                              */
} LPI2C_Type;                                   /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                         LPUTIMER                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief LPUTIMER (LPUTIMER)
  */

typedef struct {                                /*!< (@ 0x4300C000) LPUTIMER Structure                                         */
  __IOM uint32_t  UTIMER_GLB_CNTR_START;        /*!< (@ 0x00000000) Channels Global Counter Start Register                     */
  __IOM uint32_t  UTIMER_GLB_CNTR_STOP;         /*!< (@ 0x00000004) Channels Global Counter Stop Register                      */
  __IOM uint32_t  UTIMER_GLB_CNTR_CLEAR;        /*!< (@ 0x00000008) Channels Global Counter Clear Register                     */
  __IM  uint32_t  UTIMER_GLB_CNTR_RUNNING;      /*!< (@ 0x0000000C) Channels Global Counter Running Status Register            */
  __IOM uint32_t  UTIMER_GLB_DRIVER_OEN;        /*!< (@ 0x00000010) Channels Driver Output Enable Register                     */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  UTIMER_GLB_CLOCK_ENABLE;      /*!< (@ 0x00000020) Channels Clock Enable Register                             */
  __IM  uint32_t  RESERVED1[1015];
  __IOM UTIMER_UTIMER_CHANNEL_CFG_Type UTIMER_CHANNEL_CFG[16];/*!< (@ 0x00001000) [0..15]                                    */
} UTIMER_Type;                                  /*!< Size = 69632 (0x11000)                                                    */



/* =========================================================================================================================== */
/* ================                                            ETH                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ETH (ETH)
  */

typedef struct {                                /*!< (@ 0x48100000) ETH Structure                                              */
  __IOM uint32_t  ETH_MAC_CONFIGURATION;        /*!< (@ 0x00000000) MAC Configuration Register                                 */
  __IOM uint32_t  ETH_MAC_EXT_CONFIGURATION;    /*!< (@ 0x00000004) MAC Extended Configuration Register                        */
  __IOM uint32_t  ETH_MAC_PACKET_FILTER;        /*!< (@ 0x00000008) MAC Packet Filter Register                                 */
  __IOM uint32_t  ETH_MAC_WD_JB_TIMEOUT;        /*!< (@ 0x0000000C) Watchdog Timeout Register                                  */
  __IM  uint32_t  RESERVED[16];
  __IOM uint32_t  ETH_MAC_VLAN_TAG;             /*!< (@ 0x00000050) VLAN Tag Register                                          */
  __IM  uint32_t  RESERVED1[7];
  __IOM uint32_t  ETH_MAC_Q0_TX_FLOW_CTRL;      /*!< (@ 0x00000070) Flow Control Register                                      */
  __IM  uint32_t  RESERVED2[7];
  __IOM uint32_t  ETH_MAC_RX_FLOW_CTRL;         /*!< (@ 0x00000090) Receive Flow Control Register                              */
  __IM  uint32_t  RESERVED3[7];
  __IM  uint32_t  ETH_MAC_INTERRUPT_STATUS;     /*!< (@ 0x000000B0) Interrupt Status Register                                  */
  __IOM uint32_t  ETH_MAC_INTERRUPT_ENABLE;     /*!< (@ 0x000000B4) Interrupt Enable Register                                  */
  __IM  uint32_t  ETH_MAC_RX_TX_STATUS;         /*!< (@ 0x000000B8) Receive Transmit Status Register                           */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  ETH_MAC_PMT_CONTROL_STATUS;   /*!< (@ 0x000000C0) PMT Control and Status Register                            */
  
  union {
    __IOM uint32_t ETH_RWK_PACKET_FILTER;       /*!< (@ 0x000000C4) Remote Wakeup Filter Byte Mask Register                    */
    __IOM uint32_t ETH_RWK_FILTER_BYTE_MASK;    /*!< (@ 0x000000C4) Remote Wakeup Filter Byte Mask Register                    */
    __IOM uint32_t ETH_RWK_FILTER_COMMAND;      /*!< (@ 0x000000C4) Remote Wakeup Filter Command Register                      */
    __IOM uint32_t ETH_RWK_FILTER_OFFSET;       /*!< (@ 0x000000C4) Remote Wakeup Filter Offset Register                       */
    __IOM uint32_t ETH_RWK_FILTER_CRC;          /*!< (@ 0x000000C4) Remote Wakeup Filter CRC-16 Register                       */
  };
  __IM  uint32_t  RESERVED5[18];
  __IM  uint32_t  ETH_MAC_VERSION;              /*!< (@ 0x00000110) Module Version Register                                    */
  __IM  uint32_t  ETH_MAC_DEBUG;                /*!< (@ 0x00000114) Debug Register                                             */
  __IM  uint32_t  RESERVED6;
  __IM  uint32_t  ETH_MAC_HW_FEATURE0;          /*!< (@ 0x0000011C) ETH Hardware Feature Register 0                            */
  __IM  uint32_t  ETH_MAC_HW_FEATURE1;          /*!< (@ 0x00000120) ETH Hardware Feature Register 1                            */
  __IM  uint32_t  ETH_MAC_HW_FEATURE2;          /*!< (@ 0x00000124) ETH Hardware Feature Register 2                            */
  __IM  uint32_t  ETH_MAC_HW_FEATURE3;          /*!< (@ 0x00000128) ETH Hardware Feature Register 3                            */
  __IM  uint32_t  ETH_MAC_HW_FEATURE4;          /*!< (@ 0x0000012C) ETH Hardware Feature Register 3                            */
  __IM  uint32_t  RESERVED7[52];
  __IOM uint32_t  ETH_MAC_MDIO_ADDRESS;         /*!< (@ 0x00000200) MDIO Address Register                                      */
  __IOM uint32_t  ETH_MAC_MDIO_DATA;            /*!< (@ 0x00000204) MDIO Data Register                                         */
  __IOM uint32_t  ETH_MAC_GPIO_CONTROL;         /*!< (@ 0x00000208) GPIO Control Register                                      */
  __IOM uint32_t  ETH_MAC_GPIO_STATUS;          /*!< (@ 0x0000020C) GPIO Status Register                                       */
  __IOM uint32_t  ETH_MAC_ARP_ADDRESS;          /*!< (@ 0x00000210) ARP Address Register                                       */
  __IM  uint32_t  RESERVED8[7];
  __IOM uint32_t  ETH_MAC_CSR_SW_CTRL;          /*!< (@ 0x00000230) CSR Software Control Register                              */
  __IM  uint32_t  RESERVED9[51];
  __IOM uint32_t  ETH_MAC_ADDRESS0_HIGH;        /*!< (@ 0x00000300) MAC Address 0 High Register                                */
  __IOM uint32_t  ETH_MAC_ADDRESS0_LOW;         /*!< (@ 0x00000304) MAC Address 0 Low Register                                 */
  __IM  uint32_t  RESERVED10[510];
  __IOM uint32_t  ETH_MAC_TIMESTAMP_CONTROL;    /*!< (@ 0x00000B00) Timestamp Control Register                                 */
  __IOM uint32_t  ETH_MAC_SUB_SECOND_INCREMENT; /*!< (@ 0x00000B04) Sub-second Increment Register                              */
  __IM  uint32_t  ETH_MAC_SYSTEM_TIME_SECONDS;  /*!< (@ 0x00000B08) System Time Seconds Register                               */
  __IM  uint32_t  ETH_MAC_SYSTEM_TIME_NANOSECONDS;/*!< (@ 0x00000B0C) System Time Nanoseconds Register                         */
  __IOM uint32_t  ETH_MAC_SYSTEM_TIME_SECONDS_UPDATE;/*!< (@ 0x00000B10) System Time Seconds Update Register                   */
  __IOM uint32_t  ETH_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE;/*!< (@ 0x00000B14) System Time Nanoseconds Update Register           */
  __IOM uint32_t  ETH_MAC_TIMESTAMP_ADDEND;     /*!< (@ 0x00000B18) Timestamp Addend Register                                  */
  __IM  uint32_t  RESERVED11;
  __IM  uint32_t  ETH_MAC_TIMESTAMP_STATUS;     /*!< (@ 0x00000B20) Timestamp Status Register                                  */
  __IOM uint32_t  ETH_MAC_RX_DOMAIN_TIME_INCR;  /*!< (@ 0x00000B24) Rx Domain Time Increment Register                          */
  __IOM uint32_t  ETH_MAC_TX_DOMAIN_TIME_INCR;  /*!< (@ 0x00000B28) Tx Domain Time Increment Register                          */
  __IM  uint32_t  RESERVED12;
  __IM  uint32_t  ETH_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS;/*!< (@ 0x00000B30) Transmit Timestamp Status Nanoseconds Register   */
  __IM  uint32_t  ETH_MAC_TX_TIMESTAMP_STATUS_SECONDS;/*!< (@ 0x00000B34) Transmit Timestamp Status Seconds Register           */
  __IM  uint32_t  RESERVED13[8];
  __IOM uint32_t  ETH_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND;/*!< (@ 0x00000B58) Timestamp Ingress Correction Nanoseconds Register */
  __IOM uint32_t  ETH_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND;/*!< (@ 0x00000B5C) Timestamp Egress Correction Nanoseconds Register */
  __IM  uint32_t  RESERVED14[2];
  __IM  uint32_t  ETH_MAC_TIMESTAMP_INGRESS_LATENCY;/*!< (@ 0x00000B68) Ingress MAC latency Register                           */
  __IM  uint32_t  ETH_MAC_TIMESTAMP_EGRESS_LATENCY;/*!< (@ 0x00000B6C) Egress MAC latency Register                             */
  __IOM uint32_t  ETH_MAC_PPS_CONTROL;          /*!< (@ 0x00000B70) PPS Control Register                                       */
  __IM  uint32_t  RESERVED15[3];
  __IOM uint32_t  ETH_MAC_PPS0_TARGET_TIME_SECONDS;/*!< (@ 0x00000B80) PPS0 Target Time Seconds Register                       */
  __IOM uint32_t  ETH_MAC_PPS0_TARGET_TIME_NANOSECONDS;/*!< (@ 0x00000B84) PPS0 Target Time Nanoseconds Register               */
  __IM  uint32_t  RESERVED16[30];
  __IOM uint32_t  ETH_MTL_OPERATION_MODE;       /*!< (@ 0x00000C00) Operation Mode Register                                    */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  ETH_MTL_DBG_CTL;              /*!< (@ 0x00000C08) FIFO Debug Access Control and Status Register              */
  __IOM uint32_t  ETH_MTL_DBG_STS;              /*!< (@ 0x00000C0C) FIFO Debug Status Register                                 */
  __IOM uint32_t  ETH_MTL_FIFO_DEBUG_DATA;      /*!< (@ 0x00000C10) FIFO Debug Data Register                                   */
  __IM  uint32_t  RESERVED18[3];
  __IM  uint32_t  ETH_MTL_INTERRUPT_STATUS;     /*!< (@ 0x00000C20) MTL Interrupt Status Register                              */
  __IM  uint32_t  RESERVED19[55];
  __IOM uint32_t  ETH_MTL_TXQ0_OPERATION_MODE;  /*!< (@ 0x00000D00) Queue 0 Transmit Operation Mode Register                   */
  __IM  uint32_t  ETH_MTL_TXQ0_UNDERFLOW;       /*!< (@ 0x00000D04) Queue 0 Underflow Counter Register                         */
  __IM  uint32_t  ETH_MTL_TXQ0_DEBUG;           /*!< (@ 0x00000D08) Queue 0 Transmit Debug Register                            */
  __IM  uint32_t  RESERVED20[8];
  __IOM uint32_t  ETH_MTL_Q0_INTERRUPT_CONTROL_STATUS;/*!< (@ 0x00000D2C) Queue 0 Interrupt Enable and Status Register         */
  __IOM uint32_t  ETH_MTL_RXQ0_OPERATION_MODE;  /*!< (@ 0x00000D30) Queue 0 Receive Operation Mode Register                    */
  __IM  uint32_t  ETH_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT;/*!< (@ 0x00000D34) Queue 0 Missed Packet and Overflow Counter Register */
  __IM  uint32_t  ETH_MTL_RXQ0_DEBUG;           /*!< (@ 0x00000D38) Queue 0 Receive Debug Register                             */
  __IM  uint32_t  RESERVED21[177];
  __IOM uint32_t  ETH_DMA_MODE;                 /*!< (@ 0x00001000) Bus Mode Register                                          */
  __IOM uint32_t  ETH_DMA_SYSBUS_MODE;          /*!< (@ 0x00001004) System Bus Mode Register                                   */
  __IM  uint32_t  ETH_DMA_INTERRUPT_STATUS;     /*!< (@ 0x00001008) DMA, MTL, and MAC Interrupt Status Register                */
  __IM  uint32_t  ETH_DMA_DEBUG_STATUS0;        /*!< (@ 0x0000100C) Debug Status 0 Register                                    */
  __IM  uint32_t  RESERVED22[4];
  __IOM uint32_t  ETH_AXI4_TX_AR_ACE_CONTROL;   /*!< (@ 0x00001020) AXI4 TX DMA Read ACE Control Register                      */
  __IOM uint32_t  ETH_AXI4_RX_AW_ACE_CONTROL;   /*!< (@ 0x00001024) AXI4 RX DMA Write ACE Control Register                     */
  __IOM uint32_t  ETH_AXI4_TXRX_AWAR_ACE_CONTROL;/*!< (@ 0x00001028) AXI4 TX/RX DMA Read/Write ACE Control Register            */
  __IM  uint32_t  RESERVED23[5];
  __IOM uint32_t  ETH_AXI_LPI_ENTRY_INTERVAL;   /*!< (@ 0x00001040) AXI LPI Entry Interval Register                            */
  __IM  uint32_t  RESERVED24[47];
  __IOM uint32_t  ETH_DMA_CH0_CONTROL;          /*!< (@ 0x00001100) DMA Channel 0 Control Register                             */
  __IOM uint32_t  ETH_DMA_CH0_TX_CONTROL;       /*!< (@ 0x00001104) DMA Channel 0 Transmit Control Register                    */
  __IOM uint32_t  ETH_DMA_CH0_RX_CONTROL;       /*!< (@ 0x00001108) DMA Channel 0 Receive Control Register                     */
  __IM  uint32_t  RESERVED25[2];
  __IOM uint32_t  ETH_DMA_CH0_TXDESC_LIST_ADDRESS;/*!< (@ 0x00001114) DMA Channel 0 Transmit Descriptor List Address
                                                                    Register                                                   */
  __IM  uint32_t  RESERVED26;
  __IOM uint32_t  ETH_DMA_CH0_RXDESC_LIST_ADDRESS;/*!< (@ 0x0000111C) DMA Channel 0 Receive Descriptor List Address
                                                                    Register                                                   */
  __IOM uint32_t  ETH_DMA_CH0_TXDESC_TAIL_POINTER;/*!< (@ 0x00001120) DMA Channel 0 Transmit Descriptor Tail Pointer
                                                                    Register                                                   */
  __IM  uint32_t  RESERVED27;
  __IOM uint32_t  ETH_DMA_CH0_RXDESC_TAIL_POINTER;/*!< (@ 0x00001128) DMA Channel 0 Receive Descriptor Tail Pointer
                                                                    Register                                                   */
  __IOM uint32_t  ETH_DMA_CH0_TXDESC_RING_LENGTH;/*!< (@ 0x0000112C) DMA Channel 0 Transmit Descriptor Ring Length
                                                                    Register                                                   */
  __IOM uint32_t  ETH_DMA_CH0_RXDESC_RING_LENGTH;/*!< (@ 0x00001130) DMA Channel 0 Receive Descriptor Ring Length
                                                                    Register                                                   */
  __IOM uint32_t  ETH_DMA_CH0_INTERRUPT_ENABLE; /*!< (@ 0x00001134) DMA Channel 0 Interrupt Enable Register                    */
  __IOM uint32_t  ETH_DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER;/*!< (@ 0x00001138) DMA Channel 0 Receive Interrupt Watchdog Timer
                                                                    Register                                                   */
  __IM  uint32_t  RESERVED28[2];
  __IM  uint32_t  ETH_DMA_CH0_CURRENT_APP_TXDESC;/*!< (@ 0x00001144) DMA Channel 0 Current Application Transmit Descriptor
                                                                    Register                                                   */
  __IM  uint32_t  RESERVED29;
  __IM  uint32_t  ETH_DMA_CH0_CURRENT_APP_RXDESC;/*!< (@ 0x0000114C) DMA Channel 0 Current Application Receive Descriptor
                                                                    Register                                                   */
  __IM  uint32_t  RESERVED30;
  __IM  uint32_t  ETH_DMA_CH0_CURRENT_APP_TXBUFFER;/*!< (@ 0x00001154) DMA Channel 0 Current Application Transmit Buffer
                                                                    Address Register                                           */
  __IM  uint32_t  RESERVED31;
  __IM  uint32_t  ETH_DMA_CH0_CURRENT_APP_RXBUFFER;/*!< (@ 0x0000115C) DMA Channel 0 Current Application Receive Buffer
                                                                    Address Register                                           */
  __IOM uint32_t  ETH_DMA_CH0_STATUS;           /*!< (@ 0x00001160) DMA Channel 0 Status Register                              */
  __IM  uint32_t  ETH_DMA_CH0_MISS_FRAME_CNT;   /*!< (@ 0x00001164) DMA Channel 0 Dropped Packet Counter Register              */
} ETH_Type;                                     /*!< Size = 4456 (0x1168)                                                      */



/* =========================================================================================================================== */
/* ================                                           SDMMC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief SDMMC (SDMMC)
  */

typedef struct {                                /*!< (@ 0x48102000) SDMMC Structure                                            */
  __IOM uint32_t  SDMMC_SDMASA_R;               /*!< (@ 0x00000000) SDMA System Address Register                               */
  __IOM uint16_t  SDMMC_BLOCKSIZE_R;            /*!< (@ 0x00000004) Block Size Register                                        */
  __IOM uint16_t  SDMMC_BLOCKCOUNT_R;           /*!< (@ 0x00000006) 16-bit Block Count Register                                */
  __IOM uint32_t  SDMMC_ARGUMENT_R;             /*!< (@ 0x00000008) Argument Register                                          */
  __IOM uint16_t  SDMMC_XFER_MODE_R;            /*!< (@ 0x0000000C) Transfer Mode Register                                     */
  __IOM uint16_t  SDMMC_CMD_R;                  /*!< (@ 0x0000000E) Command Register                                           */
  __IM  uint32_t  SDMMC_RESP01_R;               /*!< (@ 0x00000010) Response Register 0/1                                      */
  __IM  uint32_t  SDMMC_RESP23_R;               /*!< (@ 0x00000014) Response Register 2/3                                      */
  __IM  uint32_t  SDMMC_RESP45_R;               /*!< (@ 0x00000018) Response Register 4/5                                      */
  __IM  uint32_t  SDMMC_RESP67_R;               /*!< (@ 0x0000001C) Response Register 6/7                                      */
  __IOM uint32_t  SDMMC_BUF_DATA_R;             /*!< (@ 0x00000020) Buffer Data Port Register                                  */
  __IM  uint32_t  SDMMC_PSTATE_REG;             /*!< (@ 0x00000024) Present State Register                                     */
  __IOM uint8_t   SDMMC_HOST_CTRL1_R;           /*!< (@ 0x00000028) Host Control 1 Register                                    */
  __IOM uint8_t   SDMMC_PWR_CTRL_R;             /*!< (@ 0x00000029) Power Control Register                                     */
  __IOM uint8_t   SDMMC_BGAP_CTRL_R;            /*!< (@ 0x0000002A) Block Gap Control Register                                 */
  __IOM uint8_t   SDMMC_WUP_CTRL_R;             /*!< (@ 0x0000002B) Wakeup Control Register                                    */
  __IOM uint16_t  SDMMC_CLK_CTRL_R;             /*!< (@ 0x0000002C) Clock Control Register                                     */
  __IOM uint8_t   SDMMC_TOUT_CTRL_R;            /*!< (@ 0x0000002E) Timeout Control Register                                   */
  __IOM uint8_t   SDMMC_SW_RST_R;               /*!< (@ 0x0000002F) Software Reset Register                                    */
  __IOM uint16_t  SDMMC_NORMAL_INT_STAT_R;      /*!< (@ 0x00000030) Normal Interrupt Status Register                           */
  __IOM uint16_t  SDMMC_ERROR_INT_STAT_R;       /*!< (@ 0x00000032) Error Interrupt Status Register                            */
  __IOM uint16_t  SDMMC_NORMAL_INT_STAT_EN_R;   /*!< (@ 0x00000034) Normal Interrupt Status Enable Register                    */
  __IOM uint16_t  SDMMC_ERROR_INT_STAT_EN_R;    /*!< (@ 0x00000036) Error Interrupt Status Enable Register                     */
  __IOM uint16_t  SDMMC_NORMAL_INT_SIGNAL_EN_R; /*!< (@ 0x00000038) Normal Interrupt Signal Enable Register                    */
  __IOM uint16_t  SDMMC_ERROR_INT_SIGNAL_EN_R;  /*!< (@ 0x0000003A) Error Interrupt Signal Enable Register                     */
  __IM  uint16_t  SDMMC_AUTO_CMD_STAT_R;        /*!< (@ 0x0000003C) Auto CMD Status Register                                   */
  __IOM uint16_t  SDMMC_HOST_CTRL2_R;           /*!< (@ 0x0000003E) Host Control 2 Register                                    */
  __IM  uint32_t  SDMMC_CAPABILITIES1_R;        /*!< (@ 0x00000040) Capabilities 1 Register (0 to 31)                          */
  __IM  uint32_t  SDMMC_CAPABILITIES2_R;        /*!< (@ 0x00000044) Capabilities 2 Register (32 to 63)                         */
  __IM  uint32_t  SDMMC_CURR_CAPABILITIES1_R;   /*!< (@ 0x00000048) Maximum Current Capabilities 1 Register (0 to
                                                                    31)                                                        */
  __IM  uint32_t  RESERVED;
  __IOM uint16_t  SDMMC_FORCE_AUTO_CMD_STAT_R;  /*!< (@ 0x00000050) Force Event Register for Auto CMD Error Status             */
  __OM  uint16_t  SDMMC_FORCE_ERROR_INT_STAT_R; /*!< (@ 0x00000052) Force Event Register for Error Interrupt Status            */
  __IM  uint8_t   SDMMC_ADMA_ERR_STAT_R;        /*!< (@ 0x00000054) ADMA Error Status Register                                 */
  __IM  uint8_t   RESERVED1;
  __IM  uint16_t  RESERVED2;
  __IOM uint32_t  SDMMC_ADMA_SA_LOW_R;          /*!< (@ 0x00000058) ADMA System Address Register (Low)                         */
  __IM  uint32_t  RESERVED3;
  __IM  uint16_t  SDMMC_PRESET_INIT_R;          /*!< (@ 0x00000060) Register with Preset Value for Initialization              */
  __IM  uint16_t  SDMMC_PRESET_DS_R;            /*!< (@ 0x00000062) Register with Preset Value for Default Speed               */
  __IM  uint16_t  SDMMC_PRESET_HS_R;            /*!< (@ 0x00000064) Register with Preset Value for High Speed                  */
  __IM  uint16_t  SDMMC_PRESET_SDR12_R;         /*!< (@ 0x00000066) Register with Preset Value for SDR12                       */
  __IM  uint16_t  SDMMC_PRESET_SDR25_R;         /*!< (@ 0x00000068) Register with Preset Value for SDR25                       */
  __IM  uint16_t  SDMMC_PRESET_SDR50_R;         /*!< (@ 0x0000006A) Register with Preset Value for SDR50                       */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  SDMMC_ADMA_ID_LOW_R;          /*!< (@ 0x00000078) ADMA3 Integrated Descriptor Address Register
                                                                    (Low)                                                      */
  __IM  uint32_t  RESERVED5[27];
  __IM  uint16_t  SDMMC_P_VENDOR_SPECIFIC_AREA; /*!< (@ 0x000000E8) Pointer for Vendor Specific Area 1                         */
  __IM  uint16_t  RESERVED6;
  __IM  uint32_t  RESERVED7[4];
  __IM  uint16_t  SDMMC_SLOT_INTR_STATUS_R;     /*!< (@ 0x000000FC) Slot Interrupt Status Register                             */
  __IM  uint16_t  SDMMC_HOST_CNTRL_VERS_R;      /*!< (@ 0x000000FE) Host Controller Version Register                           */
  __IM  uint32_t  RESERVED8[256];
  __IM  uint32_t  SDMMC_MSHC_VER_ID_R;          /*!< (@ 0x00000500) MSHC Version ID Register                                   */
  __IM  uint32_t  SDMMC_MSHC_VER_TYPE_R;        /*!< (@ 0x00000504) MSHC Version Type Register                                 */
  __IOM uint8_t   SDMMC_MSHC_CTRL_R;            /*!< (@ 0x00000508) SDMMC Host Controller Control Register                     */
  __IM  uint8_t   RESERVED9;
  __IM  uint16_t  RESERVED10;
  __IM  uint32_t  RESERVED11;
  __IOM uint8_t   SDMMC_MBIU_CTRL_R;            /*!< (@ 0x00000510) Master Bus Interface Unit Control Register                 */
  __IM  uint8_t   RESERVED12;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[6];
  __IOM uint16_t  SDMMC_EMMC_CTRL_R;            /*!< (@ 0x0000052C) eMMC Control Register                                      */
  __IOM uint16_t  SDMMC_BOOT_CTRL_R;            /*!< (@ 0x0000052E) eMMC Boot Control Register                                 */
  __IM  uint32_t  RESERVED15[655];
  __IOM uint32_t  SDMMC_EMBEDDED_CTRL_R;        /*!< (@ 0x00000F6C) Embedded Control Register                                  */
} SDMMC_Type;                                   /*!< Size = 3952 (0xf70)                                                       */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI0 (SPI0)
  */

typedef struct {                                /*!< (@ 0x48103000) SPI0 Structure                                             */
  __IOM uint32_t  SPI_CTRLR0;                   /*!< (@ 0x00000000) Control Register 0                                         */
  __IOM uint32_t  SPI_CTRLR1;                   /*!< (@ 0x00000004) Control Register 1                                         */
  __IOM uint32_t  SPI_ENR;                      /*!< (@ 0x00000008) SPI Enable Register                                        */
  __IOM uint32_t  SPI_MWCR;                     /*!< (@ 0x0000000C) Microwire Control Register                                 */
  __IOM uint32_t  SPI_SER;                      /*!< (@ 0x00000010) Slave Enable Register                                      */
  __IOM uint32_t  SPI_BAUDR;                    /*!< (@ 0x00000014) Baud Rate Select Register                                  */
  __IOM uint32_t  SPI_TXFTLR;                   /*!< (@ 0x00000018) Transmit FIFO Threshold Level Register                     */
  __IOM uint32_t  SPI_RXFTLR;                   /*!< (@ 0x0000001C) Receive FIFO Threshold Level Register                      */
  __IM  uint32_t  SPI_TXFLR;                    /*!< (@ 0x00000020) Transmit FIFO Level Register                               */
  __IM  uint32_t  SPI_RXFLR;                    /*!< (@ 0x00000024) Receive FIFO Level Register                                */
  __IM  uint32_t  SPI_SR;                       /*!< (@ 0x00000028) Status Register                                            */
  __IOM uint32_t  SPI_IMR;                      /*!< (@ 0x0000002C) Interrupt Mask Register                                    */
  __IM  uint32_t  SPI_ISR;                      /*!< (@ 0x00000030) Interrupt Status Register                                  */
  __IM  uint32_t  SPI_RISR;                     /*!< (@ 0x00000034) Raw Interrupt Status Register                              */
  __IM  uint32_t  SPI_TXEICR;                   /*!< (@ 0x00000038) Transmit FIFO Overflow Interrupt Clear Register            */
  __IM  uint32_t  SPI_RXOICR;                   /*!< (@ 0x0000003C) Receive FIFO Overflow Interrupt Clear Register             */
  __IM  uint32_t  SPI_RXUICR;                   /*!< (@ 0x00000040) Receive FIFO Underflow Interrupt Clear Register            */
  __IM  uint32_t  SPI_MSTICR;                   /*!< (@ 0x00000044) Multi-Master Interrupt Clear Register                      */
  __IM  uint32_t  SPI_ICR;                      /*!< (@ 0x00000048) Interrupt Clear Register                                   */
  __IOM uint32_t  SPI_DMACR;                    /*!< (@ 0x0000004C) DMA Control Register                                       */
  __IOM uint32_t  SPI_DMATDLR;                  /*!< (@ 0x00000050) DMA Transmit Data Level Register                           */
  __IOM uint32_t  SPI_DMARDLR;                  /*!< (@ 0x00000054) DMA Receive Data Level Register                            */
  __IM  uint32_t  SPI_IDR;                      /*!< (@ 0x00000058) Identification Register                                    */
  __IM  uint32_t  SPI_VERSION_ID;               /*!< (@ 0x0000005C) Version ID Register                                        */
  __IOM uint32_t  SPI_DR[36];                   /*!< (@ 0x00000060) SPI Data Register (n)                                      */
  __IOM uint32_t  SPI_RX_SAMPLE_DELAY;          /*!< (@ 0x000000F0) Rx Sample Delay Register                                   */
} SPI_Type;                                     /*!< Size = 244 (0xf4)                                                         */



/* =========================================================================================================================== */
/* ================                                           CRC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CRC0 (CRC0)
  */

typedef struct {                                /*!< (@ 0x48107000) CRC0 Structure                                             */
  __IOM uint32_t  CRC_CONTROL;                  /*!< (@ 0x00000000) CRC Calculation Setup Register                             */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  CRC_SEED;                     /*!< (@ 0x00000010) Seed Value Register                                        */
  __IOM uint32_t  CRC_POLY_CUSTOM;              /*!< (@ 0x00000014) Custom Polynomial Register                                 */
  __IM  uint32_t  CRC_OUT;                      /*!< (@ 0x00000018) Accumulated CRC Register                                   */
  __IM  uint32_t  RESERVED1;
  __OM  uint8_t   CRC_DATA_IN_8_[64];           /*!< (@ 0x00000020) 8-bit Values Register n                                    */
  __OM  uint32_t  CRC_DATA_IN_32_[40];          /*!< (@ 0x00000060) 32-bit Values Register n                                   */
} CRC_Type;                                     /*!< Size = 256 (0x100)                                                        */



/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief USB (USB)
  */

typedef struct {                                /*!< (@ 0x48200000) USB Structure                                              */
  __IM  uint32_t  CAPLENGTH;                    /*!< (@ 0x00000000) Capability Registers Length                                */
  __IM  uint32_t  HCSPARAMS1;                   /*!< (@ 0x00000004) Structural Parameters 1 Register                           */
  __IM  uint32_t  HCSPARAMS2;                   /*!< (@ 0x00000008) Structural Parameters 2 Register                           */
  __IM  uint32_t  HCSPARAMS3;                   /*!< (@ 0x0000000C) Structural Parameters 3 Register                           */
  __IM  uint32_t  HCCPARAMS1;                   /*!< (@ 0x00000010) Capability Parameters 1 Register                           */
  __IM  uint32_t  DBOFF;                        /*!< (@ 0x00000014) Doorbell Offset                                            */
  __IM  uint32_t  RTSOFF;                       /*!< (@ 0x00000018) Run-time Register Space Offset                             */
  __IM  uint32_t  HCCPARAMS2;                   /*!< (@ 0x0000001C) Host Controller Capability Parameters 2                    */
  __IM  uint32_t  RESERVED[12344];
  __IOM uint32_t  GSBUSCFG0;                    /*!< (@ 0x0000C100) Global SoC Bus Configuration Register 0                    */
  __IOM uint32_t  GSBUSCFG1;                    /*!< (@ 0x0000C104) Global SoC Bus Configuration Register 1                    */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  GCTL;                         /*!< (@ 0x0000C110) Global Core Control Register                               */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  GSTS;                         /*!< (@ 0x0000C118) Global Status Register                                     */
  __IOM uint32_t  GUCTL1;                       /*!< (@ 0x0000C11C) Global User Control Register 1                             */
  __IM  uint32_t  GSNPSID;                      /*!< (@ 0x0000C120) Global Controller ID Register                              */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  GUID;                         /*!< (@ 0x0000C128) Global User ID Register                                    */
  __IOM uint32_t  GUCTL;                        /*!< (@ 0x0000C12C) Global User Control Register                               */
  __IM  uint32_t  GBUSERRADDRLO;                /*!< (@ 0x0000C130) Global SoC Bus Error Address Register-Low                  */
  __IM  uint32_t  GBUSERRADDRHI;                /*!< (@ 0x0000C134) Global SoC Bus Error Address Register-High                 */
  __IM  uint32_t  RESERVED4[2];
  __IM  uint32_t  GHWPARAMS0;                   /*!< (@ 0x0000C140) Global Hardware Parameters Register 0                      */
  __IM  uint32_t  GHWPARAMS1;                   /*!< (@ 0x0000C144) Global Hardware Parameters Register 1                      */
  __IM  uint32_t  GHWPARAMS2;                   /*!< (@ 0x0000C148) Global Hardware Parameters Register 2                      */
  __IM  uint32_t  GHWPARAMS3;                   /*!< (@ 0x0000C14C) Global Hardware Parameters Register 3                      */
  __IM  uint32_t  GHWPARAMS4;                   /*!< (@ 0x0000C150) Global Hardware Parameters Register 4                      */
  __IM  uint32_t  GHWPARAMS5;                   /*!< (@ 0x0000C154) Global Hardware Parameters Register 5                      */
  __IM  uint32_t  GHWPARAMS6;                   /*!< (@ 0x0000C158) Global Hardware Parameters Register 6                      */
  __IM  uint32_t  GHWPARAMS7;                   /*!< (@ 0x0000C15C) Global Hardware Parameters Register 7                      */
  __IM  uint32_t  RESERVED5[8];
  __IOM uint32_t  GPRTBIMAP_HSLO;               /*!< (@ 0x0000C180) Global High-Speed Port to Bus Instance Mapping
                                                                    (Low)                                                      */
  __IOM uint32_t  GPRTBIMAP_HSHI;               /*!< (@ 0x0000C184) Global High-Speed Port to Bus Instance Mapping
                                                                    (High)                                                     */
  __IOM uint32_t  GPRTBIMAP_FSLO;               /*!< (@ 0x0000C188) Global Full-Speed Port to Bus Instance Mapping
                                                                    (Low)                                                      */
  __IOM uint32_t  GPRTBIMAP_FSHI;               /*!< (@ 0x0000C18C) Global Full-Speed Port to Bus Instance Mapping
                                                                    (High)                                                     */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  GUCTL2;                       /*!< (@ 0x0000C19C) Global User Control Register 2                             */
  __IM  uint32_t  RESERVED7[24];
  __IOM uint32_t  GUSB2PHYCFG0;                 /*!< (@ 0x0000C200) Global USB2 PHY Configuration Register                     */
  __IM  uint32_t  RESERVED8[63];
  __IOM uint32_t  GTXFIFOSIZ[11];               /*!< (@ 0x0000C300) Global Transmit FIFO Size Register n                       */
  __IM  uint32_t  RESERVED9[21];
  __IOM uint32_t  GRXFIFOSIZ[11];               /*!< (@ 0x0000C380) Global Receive FIFO Size Register n                        */
  __IM  uint32_t  RESERVED10[21];
  __IOM uint32_t  GEVNTADRLO0;                  /*!< (@ 0x0000C400) Global Event Buffer Address (Low)                          */
  __IOM uint32_t  GEVNTADRHI0;                  /*!< (@ 0x0000C404) Global Event Buffer Address (High)                         */
  __IOM uint32_t  GEVNTSIZ0;                    /*!< (@ 0x0000C408) Global Event Buffer Size Register                          */
  __IOM uint32_t  GEVNTCOUNT0;                  /*!< (@ 0x0000C40C) Global Event Buffer Count Register                         */
  __IM  uint32_t  RESERVED11[124];
  __IM  uint32_t  GHWPARAMS8;                   /*!< (@ 0x0000C600) Global Hardware Parameters Register 8                      */
  __IM  uint32_t  RESERVED12[3];
  __IOM uint32_t  GTXFIFOPRIDEV;                /*!< (@ 0x0000C610) Global Device TX FIFO DMA Priority Register                */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  GTXFIFOPRIHST;                /*!< (@ 0x0000C618) Global Host TX FIFO DMA Priority Register                  */
  __IOM uint32_t  GRXFIFOPRIHST;                /*!< (@ 0x0000C61C) Global Host RX FIFO DMA Priority Register                  */
  __IM  uint32_t  RESERVED14[4];
  __IOM uint32_t  GFLADJ;                       /*!< (@ 0x0000C630) Global Frame Length Adjustment Register                    */
  __IM  uint32_t  RESERVED15[3];
  __IOM uint32_t  GUSB2RHBCTL0;                 /*!< (@ 0x0000C640) Global USB 2.0 Root Hub Control Register                   */
  __IM  uint32_t  RESERVED16[47];
  __IOM uint32_t  DCFG;                         /*!< (@ 0x0000C700) Device Configuration Register                              */
  __IOM uint32_t  DCTL;                         /*!< (@ 0x0000C704) Device Control Register                                    */
  __IOM uint32_t  DEVTEN;                       /*!< (@ 0x0000C708) Device Event Enable Register                               */
  __IOM uint32_t  DSTS;                         /*!< (@ 0x0000C70C) Device Status Register                                     */
  __IOM uint32_t  DGCMDPAR;                     /*!< (@ 0x0000C710) Device Generic Command Parameter Register                  */
  __IOM uint32_t  DGCMD;                        /*!< (@ 0x0000C714) Device Generic Command Register                            */
  __IM  uint32_t  RESERVED17[2];
  __IOM uint32_t  DALEPENA;                     /*!< (@ 0x0000C720) Device Active USB Endpoint Enable Register                 */
  __IM  uint32_t  RESERVED18[55];
  __IOM USB_USB_ENDPNT_CMD_Type USB_ENDPNT_CMD[16];/*!< (@ 0x0000C800) [0..15]                                                 */
  __IM  uint32_t  RESERVED19[64];
  __IOM uint32_t  DEV_IMOD0;                    /*!< (@ 0x0000CA00) Device Interrupt Moderation Register                       */
} USB_Type;                                     /*!< Size = 51716 (0xca04)                                                     */
  
  

/* =========================================================================================================================== */
/* ================                                   I2C0                                          ================ */
/* =========================================================================================================================== */


  /**
    * @brief I2C0 (I2C0)
    */
  
  typedef struct {                                /*!< (@ 0x49010000) I2C0 Structure                                             */
    __IOM uint32_t  I2C_CON;                      /*!< (@ 0x00000000) Control Register                                           */
    __IOM uint32_t  I2C_TAR;                      /*!< (@ 0x00000004) Target Address Register                                    */
    __IOM uint32_t  I2C_SAR;                      /*!< (@ 0x00000008) Slave Address Register                                     */
    __IOM uint32_t  I2C_HS_MADDR;                 /*!< (@ 0x0000000C) High Speed Master Mode Code Address Register               */
    __IOM uint32_t  I2C_DATA_CMD;                 /*!< (@ 0x00000010) Rx/Tx Data Buffer and Command Register                     */
    __IOM uint32_t  I2C_SS_SCL_HCNT;              /*!< (@ 0x00000014) Standard Speed SCL High Count Register                     */
    __IOM uint32_t  I2C_SS_SCL_LCNT;              /*!< (@ 0x00000018) Standard Speed SCL Low Count Register                      */
    __IOM uint32_t  I2C_FS_SCL_HCNT;              /*!< (@ 0x0000001C) Fast Speed or Fast Mode Plus SCL High Count Register       */
    __IOM uint32_t  I2C_FS_SCL_LCNT;              /*!< (@ 0x00000020) Fast Speed or Fast Mode Plus SCL Low Count Register        */
    __IOM uint32_t  I2C_HS_SCL_HCNT;              /*!< (@ 0x00000024) High Speed SCL High Count Register                         */
    __IOM uint32_t  I2C_HS_SCL_LCNT;              /*!< (@ 0x00000028) High Speed SCL Low Count Register                          */
    __IM  uint32_t  I2C_INTR_STAT;                /*!< (@ 0x0000002C) Interrupt Status Register                                  */
    __IOM uint32_t  I2C_INTR_MASK;                /*!< (@ 0x00000030) Interrupt Mask Register                                    */
    __IM  uint32_t  I2C_RAW_INTR_STAT;            /*!< (@ 0x00000034) Raw Interrupt Status Register                              */
    __IOM uint32_t  I2C_RX_TL;                    /*!< (@ 0x00000038) Receive FIFO Threshold Register                            */
    __IOM uint32_t  I2C_TX_TL;                    /*!< (@ 0x0000003C) Transmit FIFO Threshold Register                           */
    __IM  uint32_t  I2C_CLR_INTR;                 /*!< (@ 0x00000040) Clear Combined and Individual Interrupt Register           */
    __IM  uint32_t  I2C_CLR_RX_UNDER;             /*!< (@ 0x00000044) Clear RX_UNDER Interrupt Register                          */
    __IM  uint32_t  I2C_CLR_RX_OVER;              /*!< (@ 0x00000048) Clear RX_OVER Interrupt Register                           */
    __IM  uint32_t  I2C_CLR_TX_OVER;              /*!< (@ 0x0000004C) Clear TX_OVER Interrupt Register                           */
    __IM  uint32_t  I2C_CLR_RD_REQ;               /*!< (@ 0x00000050) Clear RD_REQ Interrupt Register                            */
    __IM  uint32_t  I2C_CLR_TX_ABRT;              /*!< (@ 0x00000054) Clear TX_ABRT Interrupt Register                           */
    __IM  uint32_t  I2C_CLR_RX_DONE;              /*!< (@ 0x00000058) Clear RX_DONE Interrupt Register                           */
    __IM  uint32_t  I2C_CLR_ACTIVITY;             /*!< (@ 0x0000005C) Clear ACTIVITY Interrupt Register                          */
    __IM  uint32_t  I2C_CLR_STOP_DET;             /*!< (@ 0x00000060) Clear STOP_DET Interrupt Register                          */
    __IM  uint32_t  I2C_CLR_START_DET;            /*!< (@ 0x00000064) Clear START_DET Interrupt Register                         */
    __IM  uint32_t  I2C_CLR_GEN_CALL;             /*!< (@ 0x00000068) Clear GEN_CALL Interrupt Register                          */
    __IOM uint32_t  I2C_ENABLE;                   /*!< (@ 0x0000006C) Enable Register                                            */
    __IM  uint32_t  I2C_STATUS;                   /*!< (@ 0x00000070) Status Register                                            */
    __IM  uint32_t  I2C_TXFLR;                    /*!< (@ 0x00000074) Transmit FIFO Level Register                               */
    __IM  uint32_t  I2C_RXFLR;                    /*!< (@ 0x00000078) Receive FIFO Level Register                                */
    __IOM uint32_t  I2C_SDA_HOLD;                 /*!< (@ 0x0000007C) SDA Hold Time Length Register                              */
    __IM  uint32_t  I2C_TX_ABRT_SOURCE;           /*!< (@ 0x00000080) Transmit Abort Source Register                             */
    __IM  uint32_t  RESERVED;
    __IOM uint32_t  I2C_DMA_CR;                   /*!< (@ 0x00000088) DMA Control Register                                       */
    __IOM uint32_t  I2C_DMA_TDLR;                 /*!< (@ 0x0000008C) DMA Transmit Data Level Register                           */
    __IOM uint32_t  I2C_DMA_RDLR;                 /*!< (@ 0x00000090) DMA Receive Data Level Register                            */
    __IOM uint32_t  I2C_SDA_SETUP;                /*!< (@ 0x00000094) SDA Setup Register                                         */
    __IOM uint32_t  I2C_ACK_GENERAL_CALL;         /*!< (@ 0x00000098) ACK General Call Register                                  */
    __IM  uint32_t  I2C_ENABLE_STATUS;            /*!< (@ 0x0000009C) Enable Status Register                                     */
    __IOM uint32_t  I2C_FS_SPKLEN;                /*!< (@ 0x000000A0) SS, FS or FM+ Spike Suppression Limit Register             */
    __IOM uint32_t  I2C_HS_SPKLEN;                /*!< (@ 0x000000A4) HS Spike Suppression Limit Register                        */
    __IM  uint32_t  RESERVED1;
    __IOM uint32_t  I2C_SCL_STUCK_AT_LOW_TIMEOUT; /*!< (@ 0x000000AC) SCL Stuck at Low Timeout Register                          */
    __IOM uint32_t  I2C_SDA_STUCK_AT_LOW_TIMEOUT; /*!< (@ 0x000000B0) SDA Stuck at Low Timeout Register                          */
    __IM  uint32_t  I2C_CLR_SCL_STUCK_DET;        /*!< (@ 0x000000B4) Clear SCL Stuck at Low Detect Interrupt Register           */
    __IM  uint32_t  I2C_DEVICE_ID;                /*!< (@ 0x000000B8) Device-ID Register                                         */
    __IM  uint32_t  RESERVED2[13];
    __IOM uint32_t  I2C_REG_TIMEOUT_RST;          /*!< (@ 0x000000F0) Timeout Counter Reset Value Register                       */
    __IM  uint32_t  I2C_COMP_PARAM_1;             /*!< (@ 0x000000F4) Component Parameter Register 1                             */
    __IM  uint32_t  I2C_COMP_VERSION;             /*!< (@ 0x000000F8) Component Version Register                                 */
    __IM  uint32_t  I2C_COMP_TYPE;                /*!< (@ 0x000000FC) Component Type Register                                    */
  } I2C_Type;                                     /*!< Size = 256 (0x100)                                                        */
  
  
  
  /* =========================================================================================================================== */
  /* ================                                          ADC120                                           ================ */
  /* =========================================================================================================================== */
  
  
/**
  * @brief ADC120 (ADC120)
  */

typedef struct {                                /*!< (@ 0x49020000) ADC120 Structure                                           */
  __IOM uint32_t  ADC_START_SRC;                /*!< (@ 0x00000000) ADC Start-of-Conversion Source Register                    */
  __IOM uint32_t  ADC_COMP_THRESH_A;            /*!< (@ 0x00000004) ADC Comparator Threshold A Register                        */
  __IOM uint32_t  ADC_COMP_THRESH_B;            /*!< (@ 0x00000008) ADC Comparator Threshold B Register                        */
  __IOM uint32_t  ADC_CLK_DIVISOR;              /*!< (@ 0x0000000C) ADC Clock Divider Value Register                           */
  __IOM uint32_t  ADC_INTERRUPT;                /*!< (@ 0x00000010) ADC Interrupt Status and Clear Register                    */
  __IOM uint32_t  ADC_INTERRUPT_MASK;           /*!< (@ 0x00000014) ADC Interrupt Mask Register                                */
  __IOM uint32_t  ADC_SAMPLE_WIDTH;             /*!< (@ 0x00000018) ADC Sampling Signal Duration Register                      */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  ADC_AVG_NUM;                  /*!< (@ 0x00000020) ADC Number of Samples for Averaging Register               */
  __IOM uint32_t  ADC_SHIFT_CONTROL;            /*!< (@ 0x00000024) ADC Data Shift Select Register                             */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  ADC_CONTROL;                  /*!< (@ 0x00000030) ADC Single-shot Conversion Start and Comparator
                                                                    Threshold Mode Register                                    */
  __IOM uint32_t  ADC_SEQUENCER_CTRL;           /*!< (@ 0x00000034) ADC Sequencer Control Register                             */
  __IOM uint32_t  ADC_REG1;                     /*!< (@ 0x00000038) ADC Analog Control Register for ADC12 Modules              */
  __IM  uint32_t  ADC_SEL;                      /*!< (@ 0x0000003C) ADC Sample Register Selected (read-only value
                                                                    of n)                                                      */
  __IOM uint32_t  ADC_PERIPH;                   /*!< (@ 0x00000040) ADC Peripheral Register                                    */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  ADC_SAMPLE_REG_[9];           /*!< (@ 0x00000050) ADC Sampled Value From Input n Register                    */
} ADC_Type;                                     /*!< Size = 116 (0x74)                                                         */



/* =========================================================================================================================== */
/* ================                                           CMP0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CMP0 (CMP0)
  */

typedef struct {                                /*!< (@ 0x49023000) CMP0 Structure                                             */
  __IOM uint32_t  CMP_COMP_REG1;                /*!< (@ 0x00000000) CMP Control Register 1                                     */
  __IOM uint32_t  CMP_COMP_REG2;                /*!< (@ 0x00000004) CMP Control Register 2                                     */
  __IOM uint32_t  CMP_POLARITY_CTRL;            /*!< (@ 0x00000008) CMP Polarity Control Register                              */
  __IOM uint32_t  CMP_WINDOW_CTRL;              /*!< (@ 0x0000000C) CMP Window Control Register                                */
  __IOM uint32_t  CMP_FILTER_CTRL;              /*!< (@ 0x00000010) CMP Filter Control Register                                */
  __IOM uint32_t  CMP_PRESCALER_CTRL;           /*!< (@ 0x00000014) CMP Prescaler Control Register                             */
  __IM  uint32_t  CMP_STATUS;                   /*!< (@ 0x00000018) CMP Status Register                                        */
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  CMP_INTERRUPT_STATUS;         /*!< (@ 0x00000020) CMP Interrupt Status and Clear Register                    */
  __IOM uint32_t  CMP_INTERRUPT_MASK;           /*!< (@ 0x00000024) CMP Interrupt Mask Register                                */
} CMP_Type;                                     /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                          DAC120                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DAC120 (DAC120)
  */

typedef struct {                                /*!< (@ 0x49028000) DAC120 Structure                                           */
  __IOM uint32_t  DAC_REG1;                     /*!< (@ 0x00000000) REG1 DAC Control Register                                  */
  __IOM uint32_t  DAC_IN;                       /*!< (@ 0x00000004) DAC Input Value Register                                   */
} DAC_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           DAC6                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DAC6 (DAC6)
  */

typedef struct {                                /*!< (@ 0x4902A000) DAC6 Structure                                             */
  __IOM uint32_t  DAC6_REG;                     /*!< (@ 0x00000000) DAC6 Register                                              */
} DAC6_Type;                                    /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         ADC_VREF                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief ADC_VREF (ADC_VREF)
  */

typedef struct {                                /*!< (@ 0x4902B000) ADC_VREF Structure                                         */
  __IOM uint32_t  ADC_VREF_REG;                 /*!< (@ 0x00000000) ADC_VREF Register                                          */
} ADC_VREF_Type;                                /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                          HWSEM0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief HWSEM0 (HWSEM0)
  */

typedef struct {                                /*!< (@ 0x4902E000) HWSEM0 Structure                                           */
  __IOM uint32_t  HWSEM_REQ_REG;                /*!< (@ 0x00000000) Request register                                           */
  __IOM uint32_t  HWSEM_REL_REG;                /*!< (@ 0x00000004) Release register                                           */
  __OM  uint32_t  HWSEM_RST_REG;                /*!< (@ 0x00000008) Reset register                                             */
} HWSEM_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                      CLKCTL_PER_SLV                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLKCTL_PER_SLV (CLKCTL_PER_SLV)
  */

typedef struct {                                /*!< (@ 0x4902F000) CLKCTL_PER_SLV Structure                                   */
  __IOM uint32_t  EXPMST0_CTRL;                 /*!< (@ 0x00000000) Clock Control Register                                     */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  UART_CTRL;                    /*!< (@ 0x00000008) UART Control Register                                      */
  __IOM uint32_t  CANFD_CTRL;                   /*!< (@ 0x0000000C) CANFD Control Register                                     */
  __IOM uint32_t  I2S_CTRL[4];                  /*!< (@ 0x00000010) I2Sn Control Register                                      */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  I3C_CTRL;                     /*!< (@ 0x00000024) I3C Control Register                                       */
  __IOM uint32_t  SSI_CTRL;                     /*!< (@ 0x00000028) SPI Control Register                                       */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  ADC_CTRL;                     /*!< (@ 0x00000030) ADC Control Register                                       */
  __IOM uint32_t  DAC_CTRL;                     /*!< (@ 0x00000034) DAC Control Register                                       */
  __IOM uint32_t  CMP_CTRL;                     /*!< (@ 0x00000038) CMP Control Register                                       */
  __IOM uint32_t  OSPI_CTRL;                    /*!< (@ 0x0000003C) OSPI Control Register                                      */
  __IOM uint32_t  FREQ_MON_CTRL0;               /*!< (@ 0x00000040) Frequency Monitor 0 Control Register                       */
  __IM  uint32_t  FREQ_MON_STAT0;               /*!< (@ 0x00000044) Frequency Monitor 0 Status Register                        */
  __IOM uint32_t  FREQ_MON_CTRL1;               /*!< (@ 0x00000048) Frequency Monitor 1 Control Register                       */
  __IM  uint32_t  FREQ_MON_STAT1;               /*!< (@ 0x0000004C) Frequency Monitor 1 Status Register                        */
  __IOM uint32_t  I2C0_CTRL;                    /*!< (@ 0x00000050) I2C0 Control Register                                      */
  __IOM uint32_t  I2C1_CTRL;                    /*!< (@ 0x00000054) I2C1 Control Register                                      */
  __IOM uint32_t  I2C2_CTRL;                    /*!< (@ 0x00000058) I2C2 Control Register                                      */
  __IOM uint32_t  I2C3_CTRL;                    /*!< (@ 0x0000005C) I2C3 Control Register                                      */
  __IM  uint32_t  RESERVED3[8];
  __IOM uint32_t  GPIO_CTRL[15];                /*!< (@ 0x00000080) GPIOn Control Register                                     */
} CLKCTL_PER_SLV_Type;                          /*!< Size = 188 (0xbc)                                                         */



/* =========================================================================================================================== */
/* ================                                            CDC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CDC (CDC)
  */

typedef struct {                                /*!< (@ 0x49031000) CDC Structure                                              */
  __IM  uint32_t  CDC_HW_VER;                   /*!< (@ 0x00000000) HW Version Register                                        */
  __IM  uint32_t  CDC_LCNT;                     /*!< (@ 0x00000004) Layer Count Register                                       */
  __IOM uint32_t  CDC_SYNC_SIZE_CFG;            /*!< (@ 0x00000008) Sync Size Register                                         */
  __IOM uint32_t  CDC_BP_CFG;                   /*!< (@ 0x0000000C) Back Porch Register                                        */
  __IOM uint32_t  CDC_ACTW_CFG;                 /*!< (@ 0x00000010) Active Width Register                                      */
  __IOM uint32_t  CDC_TOTALW_CFG;               /*!< (@ 0x00000014) Total Width Register                                       */
  __IOM uint32_t  CDC_GLB_CTRL;                 /*!< (@ 0x00000018) Global Control Register                                    */
  __IM  uint32_t  CDC_CFG1;                     /*!< (@ 0x0000001C) Global Configuration 1 Register                            */
  __IM  uint32_t  CDC_CFG2;                     /*!< (@ 0x00000020) Global Configuration 2 Register                            */
  __IOM uint32_t  CDC_SRCTRL;                   /*!< (@ 0x00000024) Shadow Reload Control Register                             */
  __OM  uint32_t  CDC_GAMMA_CORR;               /*!< (@ 0x00000028) Gamma Correction Register                                  */
  __IOM uint32_t  CDC_BACKGND_COLOR;            /*!< (@ 0x0000002C) Background Color Register                                  */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CDC_IRQ_MASK0;                /*!< (@ 0x00000034) IRQ Enable 1 Register                                      */
  __IM  uint32_t  CDC_IRQ_STATUS0;              /*!< (@ 0x00000038) IRQ Status 1 Register                                      */
  __OM  uint32_t  CDC_IRQ_CLEAR0;               /*!< (@ 0x0000003C) IRQ Clear Register                                         */
  __IOM uint32_t  CDC_LINE_IRQ_POS;             /*!< (@ 0x00000040) Line Number IRQ Control Register                           */
  __IM  uint32_t  CDC_POS_STAT;                 /*!< (@ 0x00000044) Position Status Register                                   */
  __IM  uint32_t  CDC_SYNC_BLANK_STAT;          /*!< (@ 0x00000048) Sync/Blank Status Register                                 */
  __IM  uint32_t  RESERVED1[9];
  __IOM uint32_t  CDC_SLINE_IRQ_POS;            /*!< (@ 0x00000070) Secure Line IRQ Position Control Register                  */
  __IM  uint32_t  RESERVED2[35];
  __IOM CDC_CDC_LAYER_CFG_Type CDC_LAYER_CFG[2];/*!< (@ 0x00000100) [0..1]                                                     */
} CDC_Type;                                     /*!< Size = 768 (0x300)                                                        */



/* =========================================================================================================================== */
/* ================                                            DSI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DSI (DSI)
  */

typedef struct {                                /*!< (@ 0x49032000) DSI Structure                                              */
  __IM  uint32_t  DSI_VERSION;                  /*!< (@ 0x00000000) DSI Host Controller Version Register                       */
  __IOM uint32_t  DSI_PWR_UP;                   /*!< (@ 0x00000004) Power-up Control Register                                  */
  __IOM uint32_t  DSI_CLKMGR_CFG;               /*!< (@ 0x00000008) Clock Control Register                                     */
  __IOM uint32_t  DSI_DPI_VCID;                 /*!< (@ 0x0000000C) VC ID Configuration Register                               */
  __IOM uint32_t  DSI_DPI_COLOR_CODING;         /*!< (@ 0x00000010) DPI Color Coding Register                                  */
  __IOM uint32_t  DSI_DPI_CFG_POL;              /*!< (@ 0x00000014) DPI Polarity Configuration Register                        */
  __IOM uint32_t  DSI_DPI_LP_CMD_TIM;           /*!< (@ 0x00000018) DPI Low-Power Mode Configuration Register                  */
  __IM  uint32_t  RESERVED[4];
  __IOM uint32_t  DSI_PCKHDL_CFG;               /*!< (@ 0x0000002C) Protocol Configuration Register                            */
  __IOM uint32_t  DSI_GEN_VCID;                 /*!< (@ 0x00000030) Generic VC ID Configuration Register                       */
  __IOM uint32_t  DSI_MODE_CFG;                 /*!< (@ 0x00000034) Mode Configuration Register                                */
  __IOM uint32_t  DSI_VID_MODE_CFG;             /*!< (@ 0x00000038) Video Mode Configuration Register                          */
  __IOM uint32_t  DSI_VID_PKT_SIZE;             /*!< (@ 0x0000003C) Video Packet Size Register                                 */
  __IOM uint32_t  DSI_VID_NUM_CHUNKS;           /*!< (@ 0x00000040) Video Chunks Configuration Register                        */
  __IOM uint32_t  DSI_VID_NULL_SIZE;            /*!< (@ 0x00000044) Video Null Packet Configuration Register                   */
  __IOM uint32_t  DSI_VID_HSA_TIME;             /*!< (@ 0x00000048) Video HSA Configuration Register                           */
  __IOM uint32_t  DSI_VID_HBP_TIME;             /*!< (@ 0x0000004C) Video HBP Configuration Register                           */
  __IOM uint32_t  DSI_VID_HLINE_TIME;           /*!< (@ 0x00000050) Video Line Configuration Register                          */
  __IOM uint32_t  DSI_VID_VSA_LINES;            /*!< (@ 0x00000054) Video VSA Configuration Register                           */
  __IOM uint32_t  DSI_VID_VBP_LINES;            /*!< (@ 0x00000058) Video VBP Configuration Register                           */
  __IOM uint32_t  DSI_VID_VFP_LINES;            /*!< (@ 0x0000005C) Video VFP Configuration Register                           */
  __IOM uint32_t  DSI_VID_VACTIVE_LINES;        /*!< (@ 0x00000060) Video VA Configuration Register                            */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DSI_CMD_MODE_CFG;             /*!< (@ 0x00000068) Generic Packet Command Configuration Register              */
  __IOM uint32_t  DSI_GEN_HDR;                  /*!< (@ 0x0000006C) Generic Header Configuration Register                      */
  __IOM uint32_t  DSI_GEN_PLD_DATA;             /*!< (@ 0x00000070) Generic Payload Data Register                              */
  __IM  uint32_t  DSI_CMD_PKT_STATUS;           /*!< (@ 0x00000074) Generic Packet Status Register                             */
  __IOM uint32_t  DSI_TO_CNT_CFG;               /*!< (@ 0x00000078) Timeout Counter Configuration Register                     */
  __IOM uint32_t  DSI_HS_RD_TO_CNT;             /*!< (@ 0x0000007C) HS Read Timeout Configuration Register                     */
  __IOM uint32_t  DSI_LP_RD_TO_CNT;             /*!< (@ 0x00000080) LP Read Timeout Configuration Register                     */
  __IOM uint32_t  DSI_HS_WR_TO_CNT;             /*!< (@ 0x00000084) HS Write Timeout Configuration Register                    */
  __IOM uint32_t  DSI_LP_WR_TO_CNT;             /*!< (@ 0x00000088) LP Write Timeout Configuration Register                    */
  __IOM uint32_t  DSI_BTA_TO_CNT;               /*!< (@ 0x0000008C) BTA Timeout Configuration Register                         */
  __IOM uint32_t  DSI_SDF_3D;                   /*!< (@ 0x00000090) 3D Control Register                                        */
  __IOM uint32_t  DSI_LPCLK_CTRL;               /*!< (@ 0x00000094) Clock Lane Power Control Register                          */
  __IOM uint32_t  DSI_PHY_TMR_LPCLK_CFG;        /*!< (@ 0x00000098) Clock Lane Timer Configuration Register                    */
  __IOM uint32_t  DSI_PHY_TMR_CFG;              /*!< (@ 0x0000009C) Data Lane Timer Configuration Register                     */
  __IOM uint32_t  DSI_PHY_RSTZ;                 /*!< (@ 0x000000A0) PHY Control Register                                       */
  __IOM uint32_t  DSI_PHY_IF_CFG;               /*!< (@ 0x000000A4) PHY Configuration Register                                 */
  __IOM uint32_t  DSI_PHY_ULPS_CTRL;            /*!< (@ 0x000000A8) PHY ULPS Control Register                                  */
  __IOM uint32_t  DSI_PHY_TX_TRIGGERS;          /*!< (@ 0x000000AC) PHY TX Trigger Configuration Register                      */
  __IM  uint32_t  DSI_PHY_STATUS;               /*!< (@ 0x000000B0) PHY Status Register                                        */
  __IOM uint32_t  DSI_PHY_TST_CTRL0;            /*!< (@ 0x000000B4) PHY Test Interface Control Register 0                      */
  __IOM uint32_t  DSI_PHY_TST_CTRL1;            /*!< (@ 0x000000B8) PHY Test Interface Control Register 1                      */
  __IM  uint32_t  DSI_INT_ST0;                  /*!< (@ 0x000000BC) Interrupt Status Register 0                                */
  __IM  uint32_t  DSI_INT_ST1;                  /*!< (@ 0x000000C0) Interrupt Status Register 1                                */
  __IOM uint32_t  DSI_INT_MSK0;                 /*!< (@ 0x000000C4) Interrupt Mask Register 0                                  */
  __IOM uint32_t  DSI_INT_MSK1;                 /*!< (@ 0x000000C8) Interrupt Mask Register 1                                  */
  __IOM uint32_t  DSI_PHY_CAL;                  /*!< (@ 0x000000CC) PHY skew calibration control                               */
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  DSI_INT_FORCE0;               /*!< (@ 0x000000D8) Force Interrupt Register 0                                 */
  __IOM uint32_t  DSI_INT_FORCE1;               /*!< (@ 0x000000DC) Force Interrupt Register 1                                 */
  __IM  uint32_t  RESERVED3[5];
  __IOM uint32_t  DSI_PHY_TMR_RD_CFG;           /*!< (@ 0x000000F4) Data Lane Timer Read Configuration Register                */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  DSI_VID_SHADOW_CTRL;          /*!< (@ 0x00000100) Video Shadow Control Register                              */
  __IM  uint32_t  RESERVED5[2];
  __IM  uint32_t  DSI_DPI_VCID_ACT;             /*!< (@ 0x0000010C) Current VC ID Register                                     */
  __IM  uint32_t  DSI_DPI_COLOR_CODING_ACT;     /*!< (@ 0x00000110) Current Color Coding Register                              */
  __IM  uint32_t  RESERVED6;
  __IM  uint32_t  DSI_DPI_LP_CMD_TIM_ACT;       /*!< (@ 0x00000118) Low-Power Mode Current Configuration Register              */
  __IM  uint32_t  RESERVED7[7];
  __IM  uint32_t  DSI_VID_MODE_CFG_ACT;         /*!< (@ 0x00000138) Video Mode Current Configuration Register                  */
  __IM  uint32_t  DSI_VID_PKT_SIZE_ACT;         /*!< (@ 0x0000013C) Video Packet Size Current Configuration Register           */
  __IM  uint32_t  DSI_VID_NUM_CHUNKS_ACT;       /*!< (@ 0x00000140) Video Chunks Current Configuration Register                */
  __IM  uint32_t  DSI_VID_NULL_SIZE_ACT;        /*!< (@ 0x00000144) Video Null Packet Size Current Configuration
                                                                    Register                                                   */
  __IM  uint32_t  DSI_VID_HSA_TIME_ACT;         /*!< (@ 0x00000148) Video HSA Current Configuration Register                   */
  __IM  uint32_t  DSI_VID_HBP_TIME_ACT;         /*!< (@ 0x0000014C) Video HBP Current Configuration Register                   */
  __IM  uint32_t  DSI_VID_HLINE_TIME_ACT;       /*!< (@ 0x00000150) Video Line Current Configuration Register                  */
  __IM  uint32_t  DSI_VID_VSA_LINES_ACT;        /*!< (@ 0x00000154) Video VSA Current Configuration Register                   */
  __IM  uint32_t  DSI_VID_VBP_LINES_ACT;        /*!< (@ 0x00000158) Video VBP Current Configuration Register                   */
  __IM  uint32_t  DSI_VID_VFP_LINES_ACT;        /*!< (@ 0x0000015C) Video VFP Current Configuration Register                   */
  __IM  uint32_t  DSI_VID_VACTIVE_LINES_ACT;    /*!< (@ 0x00000160) Video VA Current Configuration Register                    */
  __IM  uint32_t  RESERVED8;
  __IM  uint32_t  DSI_VID_PKT_STATUS;           /*!< (@ 0x00000168) Video Packet Status Register                               */
  __IM  uint32_t  RESERVED9[9];
  __IM  uint32_t  DSI_SDF_3D_ACT;               /*!< (@ 0x00000190) 3D Current Configuration Register                          */
} DSI_Type;                                     /*!< Size = 404 (0x194)                                                        */



/* =========================================================================================================================== */
/* ================                                            CSI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CSI (CSI)
  */

typedef struct {                                /*!< (@ 0x49033000) CSI Structure                                              */
  __IM  uint32_t  CSI_VERSION;                  /*!< (@ 0x00000000) Module Version Code Register                               */
  __IOM uint32_t  CSI_N_LANES;                  /*!< (@ 0x00000004) Lane Configuration Register                                */
  __IOM uint32_t  CSI_CSI2_RESETN;              /*!< (@ 0x00000008) CSI Controller Reset Control Register                      */
  __IM  uint32_t  CSI_INT_ST_MAIN;              /*!< (@ 0x0000000C) Main Interrupt Status Register                             */
  __IOM uint32_t  CSI_DATA_IDS_1;               /*!< (@ 0x00000010) DT Data ID Monitors Configuration Register                 */
  __IM  uint32_t  RESERVED[7];
  __IOM uint32_t  CSI_DATA_IDS_VC_1;            /*!< (@ 0x00000030) VC Data ID Monitors Configuration Register                 */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  CSI_PHY_SHUTDOWNZ;            /*!< (@ 0x00000040) PHY Shutdown Control Register                              */
  __IOM uint32_t  CSI_DPHY_RSTZ;                /*!< (@ 0x00000044) PHY Reset Control Register                                 */
  __IM  uint32_t  CSI_PHY_RX;                   /*!< (@ 0x00000048) PHY RX Signals Status Register                             */
  __IM  uint32_t  CSI_PHY_STOPSTATE;            /*!< (@ 0x0000004C) PHY STOPSTATE Signal Status Register                       */
  __IOM uint32_t  CSI_PHY_TEST_CTRL0;           /*!< (@ 0x00000050) PHY Test Control 0 Register                                */
  __IOM uint32_t  CSI_PHY_TEST_CTRL1;           /*!< (@ 0x00000054) PHY Test Control 1 Register                                */
  __IM  uint32_t  RESERVED2[10];
  __IOM uint32_t  CSI_IPI_MODE;                 /*!< (@ 0x00000080) IPI Mode Selection Register                                */
  __IOM uint32_t  CSI_IPI_VCID;                 /*!< (@ 0x00000084) IPI VC Selection Register                                  */
  __IOM uint32_t  CSI_IPI_DATA_TYPE;            /*!< (@ 0x00000088) IPI DT Selection Register                                  */
  __IOM uint32_t  CSI_IPI_MEM_FLUSH;            /*!< (@ 0x0000008C) IPI Memory Flush Control Register                          */
  __IOM uint32_t  CSI_IPI_HSA_TIME;             /*!< (@ 0x00000090) IPI HSA Configuration Register                             */
  __IOM uint32_t  CSI_IPI_HBP_TIME;             /*!< (@ 0x00000094) IPI HBP Configuration Register                             */
  __IOM uint32_t  CSI_IPI_HSD_TIME;             /*!< (@ 0x00000098) IPI HSD Configuration Register                             */
  __IOM uint32_t  CSI_IPI_HLINE_TIME;           /*!< (@ 0x0000009C) IPI HLINE Configuration Register                           */
  __IOM uint32_t  CSI_IPI_SOFTRSTN;             /*!< (@ 0x000000A0) IPI Reset Control Register                                 */
  __IM  uint32_t  RESERVED3[2];
  __IOM uint32_t  CSI_IPI_ADV_FEATURES;         /*!< (@ 0x000000AC) IPI Advanced Features Configuration Register               */
  __IOM uint32_t  CSI_IPI_VSA_LINES;            /*!< (@ 0x000000B0) IPI VSA Configuration Register                             */
  __IOM uint32_t  CSI_IPI_VBP_LINES;            /*!< (@ 0x000000B4) IPI VBP Configuration Register                             */
  __IOM uint32_t  CSI_IPI_VFP_LINES;            /*!< (@ 0x000000B8) IPI VFP Configuration Register                             */
  __IOM uint32_t  CSI_IPI_VACTIVE_LINES;        /*!< (@ 0x000000BC) IPI VACTIVE Configuration Register                         */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  CSI_VC_EXTENSION;             /*!< (@ 0x000000C8) VC Extension Configuration Register                        */
  __IM  uint32_t  CSI_PHY_CAL;                  /*!< (@ 0x000000CC) PHY CALIBRATION Signal Status Register                     */
  __IM  uint32_t  RESERVED5[4];
  __IM  uint32_t  CSI_INT_ST_PHY_FATAL;         /*!< (@ 0x000000E0) PHY Packet Discarded Interrupt Status Register             */
  __IOM uint32_t  CSI_INT_MSK_PHY_FATAL;        /*!< (@ 0x000000E4) PHY Packet Discarded Interrupt Mask Register               */
  __IOM uint32_t  CSI_INT_FORCE_PHY_FATAL;      /*!< (@ 0x000000E8) PHY Packet Discarded Interrupt Force Register              */
  __IM  uint32_t  RESERVED6;
  __IM  uint32_t  CSI_INT_ST_PKT_FATAL;         /*!< (@ 0x000000F0) PHY Packet Construction Interrupt Status Register          */
  __IOM uint32_t  CSI_INT_MSK_PKT_FATAL;        /*!< (@ 0x000000F4) PHY Packet Construction Interrupt Mask Register            */
  __IOM uint32_t  CSI_INT_FORCE_PKT_FATAL;      /*!< (@ 0x000000F8) PHY Packet Construction Interrupt Force Register           */
  __IM  uint32_t  RESERVED7[5];
  __IM  uint32_t  CSI_INT_ST_PHY;               /*!< (@ 0x00000110) PHY Interrupt Status Register                              */
  __IOM uint32_t  CSI_INT_MSK_PHY;              /*!< (@ 0x00000114) PHY Interrupt Mask Register                                */
  __IOM uint32_t  CSI_INT_FORCE_PHY;            /*!< (@ 0x00000118) PHY Interrupt Force Register                               */
  __IM  uint32_t  RESERVED8[5];
  __IM  uint32_t  CSI_INT_ST_LINE;              /*!< (@ 0x00000130) PHY Line Construction Interrupt Status Register            */
  __IOM uint32_t  CSI_INT_MSK_LINE;             /*!< (@ 0x00000134) PHY Line Construction Interrupt Mask Register              */
  __IOM uint32_t  CSI_INT_FORCE_LINE;           /*!< (@ 0x00000138) PHY Line Construction Interrupt Force Register             */
  __IM  uint32_t  RESERVED9;
  __IM  uint32_t  CSI_INT_ST_IPI_FATAL;         /*!< (@ 0x00000140) IPI Interface Interrupt Status Register                    */
  __IOM uint32_t  CSI_INT_MSK_IPI_FATAL;        /*!< (@ 0x00000144) IPI Interface Interrupt Mask Register                      */
  __IOM uint32_t  CSI_INT_FORCE_IPI_FATAL;      /*!< (@ 0x00000148) IPI Interface Interrupt Force Register                     */
  __IM  uint32_t  RESERVED10[77];
  __IM  uint32_t  CSI_INT_ST_BNDRY_FRAME_FATAL; /*!< (@ 0x00000280) Frame Boundary Error Interrupt Status Register             */
  __IOM uint32_t  CSI_INT_MSK_BNDRY_FRAME_FATAL;/*!< (@ 0x00000284) Frame Boundary Error Interrupt Mask Register               */
  __IOM uint32_t  CSI_INT_FORCE_BNDRY_FRAME_FATAL;/*!< (@ 0x00000288) Frame Boundary Error Interrupt Force Register            */
  __IM  uint32_t  RESERVED11;
  __IM  uint32_t  CSI_INT_ST_SEQ_FRAME_FATAL;   /*!< (@ 0x00000290) Frame Sequence Error Interrupt Status Register             */
  __IOM uint32_t  CSI_INT_MSK_SEQ_FRAME_FATAL;  /*!< (@ 0x00000294) Frame Sequence Error Interrupt Mask Register               */
  __IOM uint32_t  CSI_INT_FORCE_SEQ_FRAME_FATAL;/*!< (@ 0x00000298) Frame Sequence Error Interrupt Force Register              */
  __IM  uint32_t  RESERVED12;
  __IM  uint32_t  CSI_INT_ST_CRC_FRAME_FATAL;   /*!< (@ 0x000002A0) Frame CRC Error Interrupt Status Register                  */
  __IOM uint32_t  CSI_INT_MSK_CRC_FRAME_FATAL;  /*!< (@ 0x000002A4) Frame CRC Error Interrupt Mask Register                    */
  __IOM uint32_t  CSI_INT_FORCE_CRC_FRAME_FATAL;/*!< (@ 0x000002A8) Frame CRC Error Interrupt Force Register                   */
  __IM  uint32_t  RESERVED13;
  __IM  uint32_t  CSI_INT_ST_PLD_CRC_FATAL;     /*!< (@ 0x000002B0) Frame Payload Error Interrupt Status Register              */
  __IOM uint32_t  CSI_INT_MSK_PLD_CRC_FATAL;    /*!< (@ 0x000002B4) Frame Payload Error Interrupt Mask Register                */
  __IOM uint32_t  CSI_INT_FORCE_PLD_CRC_FATAL;  /*!< (@ 0x000002B8) Frame Payload Error Interrupt Force Register               */
  __IM  uint32_t  RESERVED14;
  __IM  uint32_t  CSI_INT_ST_DATA_ID;           /*!< (@ 0x000002C0) DT Error Interrupt Status Register                         */
  __IOM uint32_t  CSI_INT_MSK_DATA_ID;          /*!< (@ 0x000002C4) DT Error Interrupt Mask Register                           */
  __IOM uint32_t  CSI_INT_FORCE_DATA_ID;        /*!< (@ 0x000002C8) DT Error Interrupt Force Register                          */
  __IM  uint32_t  RESERVED15;
  __IM  uint32_t  CSI_INT_ST_ECC_CORRECTED;     /*!< (@ 0x000002D0) ECC Interrupt Status Register                              */
  __IOM uint32_t  CSI_INT_MSK_ECC_CORRECTED;    /*!< (@ 0x000002D4) ECC Interrupt Mask Register                                */
  __IOM uint32_t  CSI_INT_FORCE_ECC_CORRECTED;  /*!< (@ 0x000002D8) ECC Interrupt Force Register                               */
  __IM  uint32_t  RESERVED16[9];
  __IOM uint32_t  CSI_SCRAMBLING;               /*!< (@ 0x00000300) Descrambling Control Register                              */
  __IOM uint32_t  CSI_SCRAMBLING_SEED1;         /*!< (@ 0x00000304) Descrambling Seed Configuration Lane 0 Register            */
  __IOM uint32_t  CSI_SCRAMBLING_SEED2;         /*!< (@ 0x00000308) Descrambling Seed Configuration Lane 1 Register            */
} CSI_Type;                                     /*!< Size = 780 (0x30c)                                                        */



/* =========================================================================================================================== */
/* ================                                            I3C                                       ================ */
/* =========================================================================================================================== */


/**
    * @brief I3C (I3C)
    */
  
typedef struct {                                /*!< (@ 0x43006000) LPI3C Structure                                            */
  __IOM uint32_t  I3C_DEVICE_CTRL;              /*!< (@ 0x00000000) Device Control Register                                    */
  __IOM uint32_t  I3C_DEVICE_ADDR;              /*!< (@ 0x00000004) Device Address Register                                    */
  __IM  uint32_t  I3C_HW_CAPABILITY;            /*!< (@ 0x00000008) Hardware Capability Register                               */
  __OM  uint32_t  I3C_COMMAND_QUEUE_PORT;       /*!< (@ 0x0000000C) Command Queue Port Register                                */
  __IM  uint32_t  I3C_RESPONSE_QUEUE_PORT;      /*!< (@ 0x00000010) Response Queue Port Register                               */
  
  union {
    __IM  uint32_t I3C_RX_DATA_PORT;            /*!< (@ 0x00000014) Receive Data Port Register                                 */
    __OM  uint32_t I3C_TX_DATA_PORT;            /*!< (@ 0x00000014) Transmit Data Port Register                                */
  };
  __IM  uint32_t  I3C_IBI_QUEUE_STATUS;         /*!< (@ 0x00000018) In-Band Interrupt Queue Status Register                    */
  __IOM uint32_t  I3C_QUEUE_THLD_CTRL;          /*!< (@ 0x0000001C) Queue Threshold Control Register                           */
  __IOM uint32_t  I3C_DATA_BUFFER_THLD_CTRL;    /*!< (@ 0x00000020) Data Buffer Threshold Control Register                     */
  __IOM uint32_t  I3C_IBI_QUEUE_CTRL;           /*!< (@ 0x00000024) IBI Queue Control Register                                 */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  I3C_IBI_MR_REQ_REJECT;        /*!< (@ 0x0000002C) IBI MR Request Rejection Control Register                  */
  __IOM uint32_t  I3C_IBI_SIR_REQ_REJECT;       /*!< (@ 0x00000030) IBI SIR Request Rejection Control Register                 */
  __IOM uint32_t  I3C_RESET_CTRL;               /*!< (@ 0x00000034) Reset Control Register                                     */
  __IOM uint32_t  I3C_SLV_EVENT_STATUS;         /*!< (@ 0x00000038) Slave Event Status Register                                */
  __IOM uint32_t  I3C_INTR_STATUS;              /*!< (@ 0x0000003C) Interrupt Status Register                                  */
  __IOM uint32_t  I3C_INTR_STATUS_EN;           /*!< (@ 0x00000040) Interrupt Status Enable Register                           */
  __IOM uint32_t  I3C_INTR_SIGNAL_EN;           /*!< (@ 0x00000044) Interrupt Signal Enable Register                           */
  __IOM uint32_t  I3C_INTR_FORCE;               /*!< (@ 0x00000048) Interrupt Force Enable Register                            */
  __IM  uint32_t  I3C_QUEUE_STATUS_LEVEL;       /*!< (@ 0x0000004C) Queue Status Level Register                                */
  __IM  uint32_t  I3C_DATA_BUFFER_STATUS_LEVEL; /*!< (@ 0x00000050) Data Buffer Status Level Register                          */
  __IM  uint32_t  I3C_PRESENT_STATE;            /*!< (@ 0x00000054) Present State Register                                     */
  __IM  uint32_t  I3C_CCC_DEVICE_STATUS;        /*!< (@ 0x00000058) Device Operating Status Register                           */
  __IM  uint32_t  I3C_DEVICE_ADDR_TABLE_POINTER;/*!< (@ 0x0000005C) Pointer for Device Address Table Registers                 */
  __IOM uint32_t  I3C_DEV_CHAR_TABLE_POINTER;   /*!< (@ 0x00000060) Pointer for Device Characteristics Table Register          */
  __IM  uint32_t  RESERVED1[2];
  __IM  uint32_t  I3C_VENDOR_SPECIFIC_REG_POINTER;/*!< (@ 0x0000006C) Pointer for Vendor Specific Registers                    */
  __IOM uint32_t  I3C_SLV_MIPI_ID_VALUE;        /*!< (@ 0x00000070) Manufacturer ID Register                                   */
  __IOM uint32_t  I3C_SLV_PID_VALUE;            /*!< (@ 0x00000074) Provisional ID Register                                    */
  __IOM uint32_t  I3C_SLV_CHAR_CTRL;            /*!< (@ 0x00000078) I3C Slave Characteristic Register                          */
  __IM  uint32_t  I3C_SLV_MAX_LEN;              /*!< (@ 0x0000007C) I3C Max Write/Read Length Register                         */
  __IM  uint32_t  I3C_MAX_READ_TURNAROUND;      /*!< (@ 0x00000080) MXDS Maximum Read Turnaround Time Register                 */
  __IOM uint32_t  I3C_MAX_DATA_SPEED;           /*!< (@ 0x00000084) MXDS Maximum Data Speed Register                           */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  I3C_SLV_INTR_REQ;             /*!< (@ 0x0000008C) Slave Interrupt Request Register                           */
  __IM  uint32_t  RESERVED3[8];
  __IOM uint32_t  I3C_DEVICE_CTRL_EXTENDED;     /*!< (@ 0x000000B0) Device Control Extended Register                           */
  __IOM uint32_t  I3C_SCL_I3C_OD_TIMING;        /*!< (@ 0x000000B4) SCL I3C Open Drain Timing Register                         */
  __IOM uint32_t  I3C_SCL_I3C_PP_TIMING;        /*!< (@ 0x000000B8) SCL I3C Push Pull Timing Register                          */
  __IOM uint32_t  I3C_SCL_I2C_FM_TIMING;        /*!< (@ 0x000000BC) SCL I2C Fast Mode Timing Register                          */
  __IOM uint32_t  I3C_SCL_I2C_FMP_TIMING;       /*!< (@ 0x000000C0) SCL I2C Fast Mode Plus Timing Register                     */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  I3C_SCL_EXT_LCNT_TIMING;      /*!< (@ 0x000000C8) SCL Extended Low Count Timing Register                     */
  __IOM uint32_t  I3C_SCL_EXT_TERMN_LCNT_TIMING;/*!< (@ 0x000000CC) SCL Termination Bit Low Count Timing Register              */
  __IOM uint32_t  I3C_SDA_HOLD_SWITCH_DLY_TIMING;/*!< (@ 0x000000D0) SDA Hold and Mode Switch Delay Timing Register            */
  __IOM uint32_t  I3C_BUS_FREE_AVAIL_TIMING;    /*!< (@ 0x000000D4) Bus Free Timing Register                                   */
  __IOM uint32_t  I3C_BUS_IDLE_TIMING;          /*!< (@ 0x000000D8) Bus Idle Timing Register                                   */
  __IOM uint32_t  I3C_SCL_LOW_MST_EXT_TIMEOUT;  /*!< (@ 0x000000DC) SCL Low Master Extended Timeout Register                   */
  __IM  uint32_t  I3C_VER_ID;                   /*!< (@ 0x000000E0) Version ID Register                                        */
  __IM  uint32_t  I3C_VER_TYPE;                 /*!< (@ 0x000000E4) Version Type Register                                      */
  __IM  uint32_t  I3C_QUEUE_SIZE_CAPABILITY;    /*!< (@ 0x000000E8) I3C Queue Size Capability Register                         */
  __IM  uint32_t  RESERVED5[69];
  
  union {
    __IM  uint32_t I3C_DEV_CHAR_TABLE1_LOC1;    /*!< (@ 0x00000200) Device Characteristic Table Location 1 Register            */
    __IM  uint32_t I3C_SEC_DEV_CHAR_TABLE1;     /*!< (@ 0x00000200) Secondary Master Device Characteristic Table
                                                                    Location Register                                          */
  };
  __IM  uint32_t  I3C_DEV_CHAR_TABLE1_LOC2;     /*!< (@ 0x00000204) Device Characteristic Table Location 2 Register            */
  __IM  uint32_t  I3C_DEV_CHAR_TABLE1_LOC3;     /*!< (@ 0x00000208) Device Characteristic Table Location 3 Register            */
  __IM  uint32_t  I3C_DEV_CHAR_TABLE1_LOC4;     /*!< (@ 0x0000020C) Device Characteristic Table Location 4 Register            */
  __IM  uint32_t  RESERVED6[28];
  __IOM uint32_t  I3C_DEV_ADDR_TABLE_LOC1;      /*!< (@ 0x00000280) Device Address Table Location 1 Register                   */
} I3C_Type;                                     /*!< Size = 644 (0x284)                                                        */

  
  
  
  /* =========================================================================================================================== */
  /* ================                                          EVTRTR0                                          ================ */
  /* =========================================================================================================================== */
    
  /**
  * @brief EVTRTR0 (EVTRTR0)
  */

typedef struct {                                /*!< (@ 0x49035000) EVTRTR0 Structure                                          */
  __IOM uint32_t  EVTRTR_DMA_CTRL[32];         /*!< (@ 0x00000000) DMA/Event Router Control and Status Register
                                                                    (n)                                                        */
  __IOM uint32_t  EVTRTR_DMA_REQ_CTRL;         /*!< (@ 0x00000080) DMA Request Control Register                               */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  EVTRTR_DMA_ACK_TYPE0;        /*!< (@ 0x00000090) DMA Handshake Type Register 0                              */
  __IOM uint32_t  EVTRTR_DMA_ACK_TYPE1;        /*!< (@ 0x00000094) DMA Handshake Type Register 1                              */
  __IOM uint32_t  EVTRTR_DMA_ACK_TYPE2;        /*!< (@ 0x00000098) DMA Handshake Type Register 2                              */
  __IOM uint32_t  EVTRTR_DMA_ACK_TYPE3;        /*!< (@ 0x0000009C) DMA Handshake Type Register 3                              */
} EVTRTR_Type;                                  /*!< Size = 160 (0xa0)                                                         */



/* =========================================================================================================================== */
/* ================                                           CANFD                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief CANFD (CANFD)
  */

typedef struct {                                /*!< (@ 0x49036000) CANFD Structure                                            */
  __IM  uint32_t  CANFD_RBUF[20];               /*!< (@ 0x00000000) Receive Buffer Register                                    */
  __IOM uint32_t  CANFD_TBUF[18];               /*!< (@ 0x00000050) Transmit Buffer Register                                   */
  __IM  uint32_t  CANFD_TTS;                    /*!< (@ 0x00000098) Transmission Time Stamp Register                           */
  __IM  uint32_t  RESERVED;
  __IOM uint8_t   CANFD_CFG_STAT;               /*!< (@ 0x000000A0) Configuration and Status Register                          */
  __IOM uint8_t   CANFD_TCMD;                   /*!< (@ 0x000000A1) Command Register                                           */
  __IOM uint8_t   CANFD_TCTRL;                  /*!< (@ 0x000000A2) Transmit Control Register                                  */
  __IOM uint8_t   CANFD_RCTRL;                  /*!< (@ 0x000000A3) Receive Control Register                                   */
  __IOM uint8_t   CANFD_RTIE;                   /*!< (@ 0x000000A4) Receive and Transmit Interrupt Enable Register             */
  __IOM uint8_t   CANFD_RTIF;                   /*!< (@ 0x000000A5) Receive and Transmit Interrupt Flag Register               */
  __IOM uint8_t   CANFD_ERRINT;                 /*!< (@ 0x000000A6) Error Interrupt Enable and Flag Register                   */
  __IOM uint8_t   CANFD_LIMIT;                  /*!< (@ 0x000000A7) Warning Limits Register                                    */
  __IOM uint8_t   CANFD_S_SEG_1;                /*!< (@ 0x000000A8) Slow Speed Bit Timing 1 Register (Segment 1)               */
  __IOM uint8_t   CANFD_S_SEG_2;                /*!< (@ 0x000000A9) Slow Speed Bit Timing 2 Register (Segment 2)               */
  __IOM uint8_t   CANFD_S_SJW;                  /*!< (@ 0x000000AA) Slow Speed Bit Timing 3 Register (Synchronization
                                                                    Jump Width)                                                */
  __IOM uint8_t   CANFD_S_PRESC;                /*!< (@ 0x000000AB) Slow Speed Prescaler Register                              */
  __IOM uint8_t   CANFD_F_SEG_1;                /*!< (@ 0x000000AC) Fast Speed Bit Timing 1 Register (Segment 1)               */
  __IOM uint8_t   CANFD_F_SEG_2;                /*!< (@ 0x000000AD) Fast Speed Bit Timing 2 Register (Segment 2)               */
  __IOM uint8_t   CANFD_F_SJW;                  /*!< (@ 0x000000AE) Fast Speed Bit Timing 3 Register (Synchronization
                                                                    Jump Width)                                                */
  __IOM uint8_t   CANFD_F_PRESC;                /*!< (@ 0x000000AF) Fast Speed Prescaler Register                              */
  __IM  uint8_t   CANFD_EALCAP;                 /*!< (@ 0x000000B0) Error and Arbitration Lost Capture Register                */
  __IOM uint8_t   CANFD_TDC;                    /*!< (@ 0x000000B1) Transmitter Delay Compensation Register                    */
  __IM  uint8_t   CANFD_RECNT;                  /*!< (@ 0x000000B2) Receive Error Counter Register                             */
  __IM  uint8_t   CANFD_TECNT;                  /*!< (@ 0x000000B3) Transmit Error Counter Register                            */
  __IOM uint8_t   CANFD_ACFCTRL;                /*!< (@ 0x000000B4) Acceptance Filter Control Register                         */
  __IOM uint8_t   CANFD_TIMECFG;                /*!< (@ 0x000000B5) CiA 603 Time-Stamping Register                             */
  __IOM uint8_t   CANFD_ACF_EN_0;               /*!< (@ 0x000000B6) Acceptance Filter Enable 0 Register                        */
  __IOM uint8_t   CANFD_ACF_EN_1;               /*!< (@ 0x000000B7) Acceptance Filter Enable 1 Register                        */

  union {
    __IOM uint32_t CANFD_ACF_0_3_CODE;          /*!< (@ 0x000000B8) Acceptance CODE Register                                   */
    __IOM uint32_t CANFD_ACF_0_3_MASK;          /*!< (@ 0x000000B8) Acceptance MASK Register                                   */
  };
  __IM  uint8_t   CANFD_VER_0;                  /*!< (@ 0x000000BC) Version Information 0 Register                             */
  __IM  uint8_t   CANFD_VER_1;                  /*!< (@ 0x000000BD) Version Information 1 Register                             */
  __IM  uint16_t  RESERVED1;
  __IM  uint32_t  RESERVED2[2];
  __IM  uint16_t  RESERVED3;
  __IOM uint8_t   CANFD_MEM_PROT;               /*!< (@ 0x000000CA) Memory Protection Register                                 */
  __IOM uint8_t   CANFD_MEM_STAT;               /*!< (@ 0x000000CB) Memory Status Register                                     */
  __IOM uint8_t   CANFD_MEM_ES_0;               /*!< (@ 0x000000CC) Memory Error Stimulation 0 Register                        */
  __IOM uint8_t   CANFD_MEM_ES_1;               /*!< (@ 0x000000CD) Memory Error Stimulation 1 Register                        */
  __IOM uint8_t   CANFD_MEM_ES_2;               /*!< (@ 0x000000CE) Memory Error Stimulation 2 Register                        */
  __IOM uint8_t   CANFD_MEM_ES_3;               /*!< (@ 0x000000CF) Memory Error Stimulation 3 Register                        */
  __IOM uint8_t   CANFD_SRCFG;                  /*!< (@ 0x000000D0) Spatial Redundancy Configuration Register                  */
  __IM  uint8_t   RESERVED4;
  __IM  uint16_t  RESERVED5;
} CANFD_Type;                                   /*!< Size = 212 (0xd4)                                                         */



/* =========================================================================================================================== */
/* ================                                          CAN_CNT                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief CAN_CNT (CAN_CNT)
  */

typedef struct {                                /*!< (@ 0x49037000) CAN_CNT Structure                                          */
  __OM  uint32_t  CANFD_CNTR_CTRL;              /*!< (@ 0x00000000) CANFD Counter Control Register                             */
  __IOM uint32_t  CANFD_CNTR_LOW;               /*!< (@ 0x00000004) CANFD Counter Low Register                                 */
  __IOM uint32_t  CANFD_CNTR_HIGH;              /*!< (@ 0x00000008) CANFD Counter High Register                                */
} CAN_CNT_Type;                                 /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                      CLKCTL_PER_MST                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief CLKCTL_PER_MST (CLKCTL_PER_MST)
  */

typedef struct {                                /*!< (@ 0x4903F000) CLKCTL_PER_MST Structure                                   */
  __IOM uint32_t  CAMERA_PIXCLK_CTRL;           /*!< (@ 0x00000000) CPI Pixel Clock Control Register                           */
  __IOM uint32_t  CDC200_PIXCLK_CTRL;           /*!< (@ 0x00000004) CDC Pixel Clock Control Register                           */
  __IOM uint32_t  CSI_PIXCLK_CTRL;              /*!< (@ 0x00000008) CSI Pixel Clock Control Register                           */
  __IOM uint32_t  PERIPH_CLK_ENA;               /*!< (@ 0x0000000C) Peripheral Clock Enable Register                           */
  __IOM uint32_t  DPHY_PLL_CTRL0;               /*!< (@ 0x00000010) MIPI-DPHY PLL Control Register 0                           */
  __IOM uint32_t  DPHY_PLL_CTRL1;               /*!< (@ 0x00000014) MIPI-DPHY PLL Control Register 1                           */
  __IOM uint32_t  DPHY_PLL_CTRL2;               /*!< (@ 0x00000018) MIPI-DPHY PLL Control Register 2                           */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  DPHY_PLL_STAT0;               /*!< (@ 0x00000020) MIPI-DPHY PLL Status Register 0                            */
  __IM  uint32_t  DPHY_PLL_STAT1;               /*!< (@ 0x00000024) MIPI-DPHY PLL Status Register 1                            */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  TX_DPHY_CTRL0;                /*!< (@ 0x00000030) MIPI-DPHY TX Control Register 0                            */
  __IOM uint32_t  TX_DPHY_CTRL1;                /*!< (@ 0x00000034) MIPI-DPHY TX Control Register 1                            */
  __IOM uint32_t  RX_DPHY_CTRL0;                /*!< (@ 0x00000038) MIPI-DPHY RX Control Register 0                            */
  __IOM uint32_t  RX_DPHY_CTRL1;                /*!< (@ 0x0000003C) MIPI-DPHY RX Control Register 1                            */
  __IOM uint32_t  MIPI_CKEN;                    /*!< (@ 0x00000040) MIPI-DPHY Clock Enable Register                            */
  __IOM uint32_t  DSI_CTRL;                     /*!< (@ 0x00000044) DSI Control Register                                       */
  __IM  uint32_t  RESERVED2[10];
  __IOM uint32_t  DMA_CTRL;                     /*!< (@ 0x00000070) DMA0 Boot Control Register                                 */
  __IOM uint32_t  DMA_IRQ;                      /*!< (@ 0x00000074) DMA0 Boot IRQ Non-Secure Register                          */
  __IOM uint32_t  DMA_PERIPH;                   /*!< (@ 0x00000078) DMA0 Boot Peripheral Non-Secure Register                   */
  __IOM uint32_t  DMA_GLITCH_FLT;               /*!< (@ 0x0000007C) DMA0 Glitch Filter Register                                */
  __IOM uint32_t  ETH_CTRL0;                    /*!< (@ 0x00000080) ETH Control Register                                       */
  __IM  uint32_t  ETH_STAT0;                    /*!< (@ 0x00000084) ETH Status Register                                        */
  __IM  uint32_t  ETH_PTP_TMST0;                /*!< (@ 0x00000088) ETH Timestamp Register 0                                   */
  __IM  uint32_t  ETH_PTP_TMST1;                /*!< (@ 0x0000008C) ETH Timestamp Register 1                                   */
  __IOM uint32_t  SDC_CTRL0;                    /*!< (@ 0x00000090) SDMMC Control Register                                     */
  __IM  uint32_t  SDC_STAT0;                    /*!< (@ 0x00000094) SDMMC Status Register 0                                    */
  __IM  uint32_t  SDC_STAT1;                    /*!< (@ 0x00000098) SDMMC Status Register 1                                    */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  USB_GPIO0;                    /*!< (@ 0x000000A0) USB GPIO Register                                          */
  __IM  uint32_t  USB_STAT0;                    /*!< (@ 0x000000A4) USB Status Register                                        */
  __IOM uint32_t  USB_CTRL1;                    /*!< (@ 0x000000A8) USB Control Register 1                                     */
  __IOM uint32_t  USB_CTRL2;                    /*!< (@ 0x000000AC) USB Control Register 2                                     */
} CLKCTL_PER_MST_Type;                          /*!< Size = 176 (0xb0)                                                         */



/* =========================================================================================================================== */
/* ================                                           GPU2D                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief GPU2D (GPU2D)
  */

typedef struct {                                /*!< (@ 0x49040000) GPU2D Structure                                            */

  union {
    __OM  uint32_t GPU2D_CONTROL;               /*!< (@ 0x00000000) Geometry Control Register                                  */
    __IM  uint32_t GPU2D_STATUS;                /*!< (@ 0x00000000) Status Control Register                                    */
  };

  union {
    __OM  uint32_t GPU2D_CONTROL2;              /*!< (@ 0x00000004) Surface Control Register                                   */
    __IM  uint32_t GPU2D_HWREVISION;            /*!< (@ 0x00000004) Hardware Version and Feature Set ID Register               */
  };
  __IM  uint32_t  RESERVED[2];
  __OM  uint32_t  GPU2D_L1START;                /*!< (@ 0x00000010) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L2START;                /*!< (@ 0x00000014) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L3START;                /*!< (@ 0x00000018) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L4START;                /*!< (@ 0x0000001C) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L5START;                /*!< (@ 0x00000020) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L6START;                /*!< (@ 0x00000024) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L1XADD;                 /*!< (@ 0x00000028) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L2XADD;                 /*!< (@ 0x0000002C) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L3XADD;                 /*!< (@ 0x00000030) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L4XADD;                 /*!< (@ 0x00000034) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L5XADD;                 /*!< (@ 0x00000038) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L6XADD;                 /*!< (@ 0x0000003C) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L1YADD;                 /*!< (@ 0x00000040) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L2YADD;                 /*!< (@ 0x00000044) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L3YADD;                 /*!< (@ 0x00000048) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L4YADD;                 /*!< (@ 0x0000004C) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L5YADD;                 /*!< (@ 0x00000050) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L6YADD;                 /*!< (@ 0x00000054) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L1BAND;                 /*!< (@ 0x00000058) Geometry Register                                          */
  __OM  uint32_t  GPU2D_L2BAND;                 /*!< (@ 0x0000005C) Geometry Register                                          */
  __IM  uint32_t  RESERVED1;
  __OM  uint32_t  GPU2D_COLOR1;                 /*!< (@ 0x00000064) Base Color Register                                        */
  __OM  uint32_t  GPU2D_COLOR2;                 /*!< (@ 0x00000068) Secondary Color Register                                   */
  __IM  uint32_t  RESERVED2;
  __OM  uint8_t   GPU2D_PATTERN;                /*!< (@ 0x00000070) Pattern Register                                           */
  __IM  uint8_t   RESERVED3;
  __IM  uint16_t  RESERVED4;
  __IM  uint32_t  RESERVED5;
  __OM  uint32_t  GPU2D_SIZE;                   /*!< (@ 0x00000078) Bounding Box Dimension Register                            */
  __OM  uint32_t  GPU2D_PITCH;                  /*!< (@ 0x0000007C) Framebuffer Pitch and Spanstore Delay Register             */
  __OM  uint32_t  GPU2D_ORIGIN;                 /*!< (@ 0x00000080) Address of the First Pixel in Framebuffer Register         */
  __IM  uint32_t  RESERVED6[3];
  __OM  uint32_t  GPU2D_LUSTART;                /*!< (@ 0x00000090) Texture Mapping Register                                   */
  __OM  uint32_t  GPU2D_LUXADD;                 /*!< (@ 0x00000094) Texture Mapping Register                                   */
  __OM  uint32_t  GPU2D_LUYADD;                 /*!< (@ 0x00000098) Texture Mapping Register                                   */
  __OM  uint32_t  GPU2D_LVSTARTI;               /*!< (@ 0x0000009C) Texture Mapping Register                                   */
  __OM  uint32_t  GPU2D_LVSTARTF;               /*!< (@ 0x000000A0) Texture Mapping Register                                   */
  __OM  uint32_t  GPU2D_LVXADDI;                /*!< (@ 0x000000A4) Texture Mapping Register                                   */
  __OM  uint32_t  GPU2D_LVYADDI;                /*!< (@ 0x000000A8) Texture Mapping Register                                   */
  __OM  uint32_t  GPU2D_LVYXADDF;               /*!< (@ 0x000000AC) Texture Mapping Register                                   */
  __IM  uint32_t  RESERVED7;
  __OM  uint32_t  GPU2D_TEXPITCH;               /*!< (@ 0x000000B4) Texels per Texture Line Register                           */
  __OM  uint32_t  GPU2D_TEXMASK;                /*!< (@ 0x000000B8) U/V Texture Mask Register                                  */
  __OM  uint32_t  GPU2D_TEXORIGIN;              /*!< (@ 0x000000BC) Texture Base Address Register                              */
  __OM  uint32_t  GPU2D_IRQCTL;                 /*!< (@ 0x000000C0) Interrupt Control Register                                 */
  __OM  uint32_t  GPU2D_CACHECTL;               /*!< (@ 0x000000C4) Cache Control Register                                     */
  __OM  uint32_t  GPU2D_DLISTSTART;             /*!< (@ 0x000000C8) Display List Start Address Register                        */
  __IOM uint32_t  GPU2D_PERFCOUNT1;             /*!< (@ 0x000000CC) Performance Counter 1 Register                             */
  __IOM uint32_t  GPU2D_PERFCOUNT2;             /*!< (@ 0x000000D0) Performance Counter 2 Register                             */
  __OM  uint32_t  GPU2D_PERFTRIGGER;            /*!< (@ 0x000000D4) Performance Counter Control Register                       */
  __OM  uint32_t  GPU2D_TEXCLUT;                /*!< (@ 0x000000D8) CLUT Index Texture Format Register                         */
  __OM  uint32_t  GPU2D_TEXCLUT_ADDR;           /*!< (@ 0x000000DC) CLUT Write Address Register                                */
  __OM  uint32_t  GPU2D_TEXCLUT_DATA;           /*!< (@ 0x000000E0) CLUT Write Data Register                                   */
  __OM  uint32_t  GPU2D_TEXCLUT_OFFSET;         /*!< (@ 0x000000E4) CLUT Offset Access for Index of Texture Register           */
  __OM  uint32_t  GPU2D_COLKEY;                 /*!< (@ 0x000000E8) Color Keying Register                                      */
} GPU2D_Type;                                   /*!< Size = 236 (0xec)                                                         */



/* =========================================================================================================================== */
/* ================                                          NPU_HG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief NPU_HG (NPU_HG)
  */

typedef struct {                                /*!< (@ 0x49042000) NPU_HG Structure                                           */
  __IM  uint32_t  NPU85_ID;                     /*!< (@ 0x00000000) ID Register                                                */
  __IM  uint32_t  NPU85_STATUS;                 /*!< (@ 0x00000004) STATUS Register                                            */
  __IOM uint32_t  NPU85_CMD;                    /*!< (@ 0x00000008) CMD Register                                               */
  __IOM uint32_t  NPU85_RESET;                  /*!< (@ 0x0000000C) RESET Register                                             */
  __IOM uint32_t  NPU85_QBASE;                  /*!< (@ 0x00000010) QBASE Register                                             */
  __IOM uint32_t  NPU85_QBASE_HI;               /*!< (@ 0x00000014) QBASE_hi Register                                          */
  __IM  uint32_t  NPU85_QREAD;                  /*!< (@ 0x00000018) QREAD Register                                             */
  __IOM uint32_t  NPU85_QCONFIG;                /*!< (@ 0x0000001C) QCONFIG Register                                           */
  __IOM uint32_t  NPU85_QSIZE;                  /*!< (@ 0x00000020) QSIZE Register                                             */
  __IM  uint32_t  NPU85_PROT;                   /*!< (@ 0x00000024) PROT Register                                              */
  __IM  uint32_t  NPU85_CONFIG;                 /*!< (@ 0x00000028) CONFIG Register                                            */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  NPU85_COND_STATUS;            /*!< (@ 0x00000030) COND_STATUS Register                                       */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  NPU85_POWER_CTRL;             /*!< (@ 0x00000038) POWER_CTRL Register                                        */
  __IOM uint32_t  NPU85_REGIONCFG;              /*!< (@ 0x0000003C) REGIONCFG Register                                         */
  __IOM uint32_t  NPU85_MEM_ATTR0;              /*!< (@ 0x00000040) MEM_ATTR0 Register                                         */
  __IOM uint32_t  NPU85_MEM_ATTR1;              /*!< (@ 0x00000044) MEM_ATTR1 Register                                         */
  __IOM uint32_t  NPU85_MEM_ATTR2;              /*!< (@ 0x00000048) MEM_ATTR2 Register                                         */
  __IOM uint32_t  NPU85_MEM_ATTR3;              /*!< (@ 0x0000004C) MEM_ATTR3 Register                                         */
  __IOM uint32_t  NPU85_AXI_SRAM;               /*!< (@ 0x00000050) AXI_SRAM Register                                          */
  __IOM uint32_t  NPU85_AXI_EXT;                /*!< (@ 0x00000054) AXI_EXT Register                                           */
  __IM  uint32_t  RESERVED2[2];
  __IM  uint32_t  NPU85_CFG_SRAM_CAP;           /*!< (@ 0x00000060) CFG_SRAM_CAP Register                                      */
  __IM  uint32_t  NPU85_CFG_EXT_CAP;            /*!< (@ 0x00000064) CFG_EXT_CAP Register                                       */
  __IM  uint32_t  NPU85_CFG_SRAM_HASH0;         /*!< (@ 0x00000068) CFG_SRAM_HASH0 Register                                    */
  __IM  uint32_t  NPU85_CFG_SRAM_HASH0_HI;      /*!< (@ 0x0000006C) CFG_SRAM_HASH0_hi Register                                 */
  __IM  uint32_t  NPU85_CFG_SRAM_HASH1;         /*!< (@ 0x00000070) CFG_SRAM_HASH1 Register                                    */
  __IM  uint32_t  NPU85_CFG_SRAM_HASH1_HI;      /*!< (@ 0x00000074) CFG_SRAM_HASH1_hi Register                                 */
  __IM  uint32_t  NPU85_CFG_EXT_HASH0;          /*!< (@ 0x00000078) CFG_EXT_HASH0 Register                                     */
  __IM  uint32_t  NPU85_CFG_EXT_HASH0_HI;       /*!< (@ 0x0000007C) CFG_EXT_HASH0_hi Register                                  */
  __IOM uint32_t  NPU85_BASEP0;                 /*!< (@ 0x00000080) BASEP0 Register                                            */
  __IOM uint32_t  NPU85_BASEP0_HI;              /*!< (@ 0x00000084) BASEP0_hi Register                                         */
  __IOM uint32_t  NPU85_BASEP1;                 /*!< (@ 0x00000088) BASEP1 Register                                            */
  __IOM uint32_t  NPU85_BASEP1_HI;              /*!< (@ 0x0000008C) BASEP1_hi Register                                         */
  __IOM uint32_t  NPU85_BASEP2;                 /*!< (@ 0x00000090) BASEP2 Register                                            */
  __IOM uint32_t  NPU85_BASEP2_HI;              /*!< (@ 0x00000094) BASEP2_hi Register                                         */
  __IOM uint32_t  NPU85_BASEP3;                 /*!< (@ 0x00000098) BASEP3 Register                                            */
  __IOM uint32_t  NPU85_BASEP3_HI;              /*!< (@ 0x0000009C) BASEP3_hi Register                                         */
  __IOM uint32_t  NPU85_BASEP4;                 /*!< (@ 0x000000A0) BASEP4 Register                                            */
  __IOM uint32_t  NPU85_BASEP4_HI;              /*!< (@ 0x000000A4) BASEP4_hi Register                                         */
  __IOM uint32_t  NPU85_BASEP5;                 /*!< (@ 0x000000A8) BASEP5 Register                                            */
  __IOM uint32_t  NPU85_BASEP5_HI;              /*!< (@ 0x000000AC) BASEP5_hi Register                                         */
  __IOM uint32_t  NPU85_BASEP6;                 /*!< (@ 0x000000B0) BASEP6 Register                                            */
  __IOM uint32_t  NPU85_BASEP6_HI;              /*!< (@ 0x000000B4) BASEP6_hi Register                                         */
  __IOM uint32_t  NPU85_BASEP7;                 /*!< (@ 0x000000B8) BASEP7 Register                                            */
  __IOM uint32_t  NPU85_BASEP7_HI;              /*!< (@ 0x000000BC) BASEP7_hi Register                                         */
  __IM  uint32_t  RESERVED3[964];
  __IM  uint32_t  NPU85_PID4;                   /*!< (@ 0x00000FD0) PID4 Register                                              */
  __IM  uint32_t  NPU85_PID5;                   /*!< (@ 0x00000FD4) PID5 Register                                              */
  __IM  uint32_t  NPU85_PID6;                   /*!< (@ 0x00000FD8) PID6 Register                                              */
  __IM  uint32_t  NPU85_PID7;                   /*!< (@ 0x00000FDC) PID7 Register                                              */
  __IM  uint32_t  NPU85_PID0;                   /*!< (@ 0x00000FE0) PID0 Register                                              */
  __IM  uint32_t  NPU85_PID1;                   /*!< (@ 0x00000FE4) PID1 Register                                              */
  __IM  uint32_t  NPU85_PID2;                   /*!< (@ 0x00000FE8) PID2 Register                                              */
  __IM  uint32_t  NPU85_PID3;                   /*!< (@ 0x00000FEC) PID3 Register                                              */
  __IM  uint32_t  NPU85_CID0;                   /*!< (@ 0x00000FF0) CID0 Register                                              */
  __IM  uint32_t  NPU85_CID1;                   /*!< (@ 0x00000FF4) CID1 Register                                              */
  __IM  uint32_t  NPU85_CID2;                   /*!< (@ 0x00000FF8) CID2 Register                                              */
  __IM  uint32_t  NPU85_CID3;                   /*!< (@ 0x00000FFC) CID3 Register                                              */
  __IM  uint32_t  RESERVED4[96];
  __IOM uint32_t  NPU85_PMCR;                   /*!< (@ 0x00001180) PMCR Register                                              */
  __IOM uint32_t  NPU85_PMCNTENSET;             /*!< (@ 0x00001184) PMCNTENSET Register                                        */
  __IOM uint32_t  NPU85_PMCNTENCLR;             /*!< (@ 0x00001188) PMCNTENCLR Register                                        */
  __IOM uint32_t  NPU85_PMOVSSET;               /*!< (@ 0x0000118C) PMOVSSET Register                                          */
  __IOM uint32_t  NPU85_PMOVSCLR;               /*!< (@ 0x00001190) PMOVSCLR Register                                          */
  __IOM uint32_t  NPU85_PMINTSET;               /*!< (@ 0x00001194) PMINTSET Register                                          */
  __IOM uint32_t  NPU85_PMINTCLR;               /*!< (@ 0x00001198) PMINTCLR Register                                          */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  NPU85_PMCCNTR;                /*!< (@ 0x000011A0) PMCCNTR Register                                           */
  __IOM uint32_t  NPU85_PMCCNTR_HI;             /*!< (@ 0x000011A4) PMCCNTR_hi Register                                        */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  NPU85_PMCAXI_CHAN;            /*!< (@ 0x000011AC) PMCAXI_CHAN Register                                       */
  __IOM uint32_t  NPU85_PMCLUT;                 /*!< (@ 0x000011B0) PMCLUT Register                                            */
  __IM  uint32_t  RESERVED7[83];
  __IOM uint32_t  NPU85_PMEVCNTR0;              /*!< (@ 0x00001300) PMEVCNTR0 Register                                         */
  __IOM uint32_t  NPU85_PMEVCNTR1;              /*!< (@ 0x00001304) PMEVCNTR1 Register                                         */
  __IOM uint32_t  NPU85_PMEVCNTR2;              /*!< (@ 0x00001308) PMEVCNTR2 Register                                         */
  __IOM uint32_t  NPU85_PMEVCNTR3;              /*!< (@ 0x0000130C) PMEVCNTR3 Register                                         */
  __IOM uint32_t  NPU85_PMEVCNTR4;              /*!< (@ 0x00001310) PMEVCNTR4 Register                                         */
  __IOM uint32_t  NPU85_PMEVCNTR5;              /*!< (@ 0x00001314) PMEVCNTR5 Register                                         */
  __IOM uint32_t  NPU85_PMEVCNTR6;              /*!< (@ 0x00001318) PMEVCNTR6 Register                                         */
  __IOM uint32_t  NPU85_PMEVCNTR7;              /*!< (@ 0x0000131C) PMEVCNTR7 Register                                         */
  __IM  uint32_t  RESERVED8[24];
  __IOM uint32_t  NPU85_PMEVTYPER0;             /*!< (@ 0x00001380) PMEVTYPER0 Register                                        */
  __IOM uint32_t  NPU85_PMEVTYPER1;             /*!< (@ 0x00001384) PMEVTYPER1 Register                                        */
  __IOM uint32_t  NPU85_PMEVTYPER2;             /*!< (@ 0x00001388) PMEVTYPER2 Register                                        */
  __IOM uint32_t  NPU85_PMEVTYPER3;             /*!< (@ 0x0000138C) PMEVTYPER3 Register                                        */
  __IOM uint32_t  NPU85_PMEVTYPER4;             /*!< (@ 0x00001390) PMEVTYPER4 Register                                        */
  __IOM uint32_t  NPU85_PMEVTYPER5;             /*!< (@ 0x00001394) PMEVTYPER5 Register                                        */
  __IOM uint32_t  NPU85_PMEVTYPER6;             /*!< (@ 0x00001398) PMEVTYPER6 Register                                        */
  __IOM uint32_t  NPU85_PMEVTYPER7;             /*!< (@ 0x0000139C) PMEVTYPER7 Register                                        */
} NPU_HG_Type;                                  /*!< Size = 5024 (0x13a0)                                                      */



/* =========================================================================================================================== */
/* ================                                           JPEG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief JPEG (JPEG)
  */

typedef struct {                                /*!< (@ 0x49044000) JPEG Structure                                             */
  __IM  uint32_t  JPEG_SWREG0;                  /*!< (@ 0x00000000) swreg0 register                                            */
  __IOM uint32_t  JPEG_SWREG1;                  /*!< (@ 0x00000004) swreg1 register                                            */
  __IOM uint32_t  JPEG_SWREG2;                  /*!< (@ 0x00000008) swreg2 register                                            */
  __IOM uint32_t  JPEG_SWREG3;                  /*!< (@ 0x0000000C) swreg3 register                                            */
  __IOM uint32_t  JPEG_SWREG4;                  /*!< (@ 0x00000010) swreg4 register                                            */
  __IOM uint32_t  JPEG_SWREG5;                  /*!< (@ 0x00000014) swreg5 register                                            */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  JPEG_SWREG8;                  /*!< (@ 0x00000020) swreg8 register                                            */
  __IOM uint32_t  JPEG_SWREG9;                  /*!< (@ 0x00000024) swreg9 register                                            */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  JPEG_SWREG12;                 /*!< (@ 0x00000030) swreg12 register                                           */
  __IOM uint32_t  JPEG_SWREG13;                 /*!< (@ 0x00000034) swreg13 register                                           */
  __IOM uint32_t  JPEG_SWREG14;                 /*!< (@ 0x00000038) swreg14 register                                           */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  JPEG_SWREG18;                 /*!< (@ 0x00000048) swreg18 register                                           */
  __IOM uint32_t  JPEG_SWREG19;                 /*!< (@ 0x0000004C) swreg19 register                                           */
  __IOM uint32_t  JPEG_SWREG20;                 /*!< (@ 0x00000050) swreg20 register                                           */
  __IOM uint32_t  JPEG_SWREG21;                 /*!< (@ 0x00000054) swreg21 register                                           */
  __IM  uint32_t  RESERVED3[15];
  __IOM uint32_t  JPEG_SWREG37;                 /*!< (@ 0x00000094) swreg37 register                                           */
  __IOM uint32_t  JPEG_SWREG38;                 /*!< (@ 0x00000098) swreg38 register                                           */
  __IOM uint32_t  JPEG_SWREG39;                 /*!< (@ 0x0000009C) swreg39 register                                           */
  __IOM uint32_t  JPEG_SWREG40;                 /*!< (@ 0x000000A0) swreg40 register                                           */
  __IOM uint32_t  JPEG_SWREG41;                 /*!< (@ 0x000000A4) swreg41 register                                           */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  JPEG_SWREG44;                 /*!< (@ 0x000000B0) swreg44 register                                           */
  __IOM uint32_t  JPEG_SWREG45;                 /*!< (@ 0x000000B4) swreg45 register                                           */
  __IM  uint32_t  RESERVED5[7];
  __IOM uint32_t  JPEG_SWREG53;                 /*!< (@ 0x000000D4) swreg53 register                                           */
  __IOM uint32_t  JPEG_SWREG54;                 /*!< (@ 0x000000D8) swreg54 register                                           */
  __IOM uint32_t  JPEG_SWREG55;                 /*!< (@ 0x000000DC) swreg55 register                                           */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  JPEG_SWREG59;                 /*!< (@ 0x000000EC) swreg59 register                                           */
  __IM  uint32_t  RESERVED7[20];
  __IM  uint32_t  JPEG_SWREG80;                 /*!< (@ 0x00000140) swreg80 register                                           */
  __IOM uint32_t  JPEG_SWREG81;                 /*!< (@ 0x00000144) swreg81 register                                           */
  __IOM uint32_t  JPEG_SWREG82;                 /*!< (@ 0x00000148) swreg82 register                                           */
  __IOM uint32_t  JPEG_SWREG83;                 /*!< (@ 0x0000014C) swreg83 register                                           */
  __IOM uint32_t  JPEG_SWREG84;                 /*!< (@ 0x00000150) swreg84 register                                           */
  __IOM uint32_t  JPEG_SWREG85;                 /*!< (@ 0x00000154) swreg85 register                                           */
  __IOM uint32_t  JPEG_SWREG86;                 /*!< (@ 0x00000158) swreg86 register                                           */
  __IOM uint32_t  JPEG_SWREG87;                 /*!< (@ 0x0000015C) swreg87 register                                           */
  __IOM uint32_t  JPEG_SWREG88;                 /*!< (@ 0x00000160) swreg88 register                                           */
  __IOM uint32_t  JPEG_SWREG89;                 /*!< (@ 0x00000164) swreg89 register                                           */
  __IOM uint32_t  JPEG_SWREG90;                 /*!< (@ 0x00000168) swreg90 register                                           */
  __IOM uint32_t  JPEG_SWREG91;                 /*!< (@ 0x0000016C) swreg91 register                                           */
  __IOM uint32_t  JPEG_SWREG92;                 /*!< (@ 0x00000170) swreg92 register                                           */
  __IOM uint32_t  JPEG_SWREG93;                 /*!< (@ 0x00000174) swreg93 register                                           */
  __IOM uint32_t  JPEG_SWREG94;                 /*!< (@ 0x00000178) swreg94 register                                           */
  __IOM uint32_t  JPEG_SWREG95;                 /*!< (@ 0x0000017C) swreg95 register                                           */
  __IOM uint32_t  JPEG_SWREG96;                 /*!< (@ 0x00000180) swreg96 register                                           */
  __IOM uint32_t  JPEG_SWREG97;                 /*!< (@ 0x00000184) swreg97 register                                           */
  __IOM uint32_t  JPEG_SWREG98;                 /*!< (@ 0x00000188) swreg98 register                                           */
  __IOM uint32_t  JPEG_SWREG99;                 /*!< (@ 0x0000018C) swreg99 register                                           */
  __IOM uint32_t  JPEG_SWREG100;                /*!< (@ 0x00000190) swreg100 register                                          */
  __IOM uint32_t  JPEG_SWREG101;                /*!< (@ 0x00000194) swreg101 register                                          */
  __IOM uint32_t  JPEG_SWREG102;                /*!< (@ 0x00000198) swreg102 register                                          */
  __IOM uint32_t  JPEG_SWREG103;                /*!< (@ 0x0000019C) swreg103 register                                          */
  __IOM uint32_t  JPEG_SWREG104;                /*!< (@ 0x000001A0) swreg104 register                                          */
  __IOM uint32_t  JPEG_SWREG105;                /*!< (@ 0x000001A4) swreg105 register                                          */
  __IOM uint32_t  JPEG_SWREG106;                /*!< (@ 0x000001A8) swreg106 register                                          */
  __IOM uint32_t  JPEG_SWREG107;                /*!< (@ 0x000001AC) swreg107 register                                          */
  __IOM uint32_t  JPEG_SWREG108;                /*!< (@ 0x000001B0) swreg108 register                                          */
  __IOM uint32_t  JPEG_SWREG109;                /*!< (@ 0x000001B4) swreg109 register                                          */
  __IOM uint32_t  JPEG_SWREG110;                /*!< (@ 0x000001B8) swreg110 register                                          */
  __IOM uint32_t  JPEG_SWREG111;                /*!< (@ 0x000001BC) swreg111 register                                          */
  __IOM uint32_t  JPEG_SWREG112;                /*!< (@ 0x000001C0) swreg112 register                                          */
  __IOM uint32_t  JPEG_SWREG113;                /*!< (@ 0x000001C4) swreg113 register                                          */
  __IOM uint32_t  JPEG_SWREG114;                /*!< (@ 0x000001C8) swreg114 register                                          */
  __IM  uint32_t  RESERVED8[12];
  __IOM uint32_t  JPEG_SWREG127;                /*!< (@ 0x000001FC) swreg127 register                                          */
  __IOM uint32_t  JPEG_SWREG128;                /*!< (@ 0x00000200) swreg128 register                                          */
  __IOM uint32_t  JPEG_SWREG129;                /*!< (@ 0x00000204) swreg129 register                                          */
  __IOM uint32_t  JPEG_SWREG130;                /*!< (@ 0x00000208) swreg130 register                                          */
  __IOM uint32_t  JPEG_SWREG131;                /*!< (@ 0x0000020C) swreg131 register                                          */
  __IOM uint32_t  JPEG_SWREG132;                /*!< (@ 0x00000210) swreg132 register                                          */
  __IM  uint32_t  RESERVED9[5];
  __IOM uint32_t  JPEG_SWREG138;                /*!< (@ 0x00000228) swreg138 register                                          */
  __IOM uint32_t  JPEG_SWREG139;                /*!< (@ 0x0000022C) swreg139 register                                          */
  __IOM uint32_t  JPEG_SWREG140;                /*!< (@ 0x00000230) swreg140 register                                          */
  __IOM uint32_t  JPEG_SWREG141;                /*!< (@ 0x00000234) swreg141 register                                          */
  __IOM uint32_t  JPEG_SWREG142;                /*!< (@ 0x00000238) swreg142 register                                          */
  __IOM uint32_t  JPEG_SWREG143;                /*!< (@ 0x0000023C) swreg143 register                                          */
  __IOM uint32_t  JPEG_SWREG144;                /*!< (@ 0x00000240) swreg144 register                                          */
  __IOM uint32_t  JPEG_SWREG145;                /*!< (@ 0x00000244) swreg145 register                                          */
  __IOM uint32_t  JPEG_SWREG146;                /*!< (@ 0x00000248) swreg146 register                                          */
  __IOM uint32_t  JPEG_SWREG147;                /*!< (@ 0x0000024C) swreg147 register                                          */
  __IOM uint32_t  JPEG_SWREG148;                /*!< (@ 0x00000250) swreg148 register                                          */
  __IOM uint32_t  JPEG_SWREG149;                /*!< (@ 0x00000254) swreg149 register                                          */
  __IOM uint32_t  JPEG_SWREG150;                /*!< (@ 0x00000258) swreg150 register                                          */
  __IOM uint32_t  JPEG_SWREG151;                /*!< (@ 0x0000025C) swreg151 register                                          */
  __IOM uint32_t  JPEG_SWREG152;                /*!< (@ 0x00000260) swreg152 register                                          */
  __IOM uint32_t  JPEG_SWREG153;                /*!< (@ 0x00000264) swreg153 register                                          */
  __IOM uint32_t  JPEG_SWREG154;                /*!< (@ 0x00000268) swreg154 register                                          */
  __IOM uint32_t  JPEG_SWREG155;                /*!< (@ 0x0000026C) swreg155 register                                          */
  __IOM uint32_t  JPEG_SWREG156;                /*!< (@ 0x00000270) swreg156 register                                          */
  __IOM uint32_t  JPEG_SWREG157;                /*!< (@ 0x00000274) swreg157 register                                          */
  __IOM uint32_t  JPEG_SWREG158;                /*!< (@ 0x00000278) swreg158 register                                          */
  __IOM uint32_t  JPEG_SWREG159;                /*!< (@ 0x0000027C) swreg159 register                                          */
  __IOM uint32_t  JPEG_SWREG160;                /*!< (@ 0x00000280) swreg160 register                                          */
  __IOM uint32_t  JPEG_SWREG161;                /*!< (@ 0x00000284) swreg161 register                                          */
  __IOM uint32_t  JPEG_SWREG162;                /*!< (@ 0x00000288) swreg162 register                                          */
  __IOM uint32_t  JPEG_SWREG163;                /*!< (@ 0x0000028C) swreg163 register                                          */
  __IOM uint32_t  JPEG_SWREG164;                /*!< (@ 0x00000290) swreg164 register                                          */
  __IOM uint32_t  JPEG_SWREG165;                /*!< (@ 0x00000294) swreg165 register                                          */
  __IOM uint32_t  JPEG_SWREG166;                /*!< (@ 0x00000298) swreg166 register                                          */
  __IOM uint32_t  JPEG_SWREG167;                /*!< (@ 0x0000029C) swreg167 register                                          */
  __IOM uint32_t  JPEG_SWREG168;                /*!< (@ 0x000002A0) swreg168 register                                          */
  __IOM uint32_t  JPEG_SWREG169;                /*!< (@ 0x000002A4) swreg169 register                                          */
  __IM  uint32_t  RESERVED10[4];
  __IOM uint32_t  JPEG_SWREG174;                /*!< (@ 0x000002B8) swreg174 register                                          */
  __IOM uint32_t  JPEG_SWREG175;                /*!< (@ 0x000002BC) swreg175 register                                          */
  __IOM uint32_t  JPEG_SWREG176;                /*!< (@ 0x000002C0) swreg176 register                                          */
  __IOM uint32_t  JPEG_SWREG177;                /*!< (@ 0x000002C4) swreg177 register                                          */
  __IOM uint32_t  JPEG_SWREG178;                /*!< (@ 0x000002C8) swreg178 register                                          */
  __IOM uint32_t  JPEG_SWREG179;                /*!< (@ 0x000002CC) swreg179 register                                          */
  __IOM uint32_t  JPEG_SWREG180;                /*!< (@ 0x000002D0) swreg180 register                                          */
  __IM  uint32_t  RESERVED11[4];
  __IOM uint32_t  JPEG_SWREG185;                /*!< (@ 0x000002E4) swreg185 register                                          */
  __IM  uint32_t  RESERVED12[7];
  __IOM uint32_t  JPEG_SWREG193;                /*!< (@ 0x00000304) swreg193 register                                          */
  __IM  uint32_t  RESERVED13[2];
  __IOM uint32_t  JPEG_SWREG196;                /*!< (@ 0x00000310) swreg196 register                                          */
  __IOM uint32_t  JPEG_SWREG197;                /*!< (@ 0x00000314) swreg197 register                                          */
  __IM  uint32_t  RESERVED14;
  __IOM uint32_t  JPEG_SWREG199;                /*!< (@ 0x0000031C) swreg199 register                                          */
  __IOM uint32_t  JPEG_SWREG200;                /*!< (@ 0x00000320) swreg200 register                                          */
  __IM  uint32_t  RESERVED15[9];
  __IOM uint32_t  JPEG_SWREG210;                /*!< (@ 0x00000348) swreg210 register                                          */
  __IOM uint32_t  JPEG_SWREG211;                /*!< (@ 0x0000034C) swreg211 register                                          */
  __IM  uint32_t  RESERVED16[2];
  __IM  uint32_t  JPEG_SWREG214;                /*!< (@ 0x00000358) swreg214 register                                          */
  __IM  uint32_t  JPEG_SWREG215;                /*!< (@ 0x0000035C) swreg215 register                                          */
  __IM  uint32_t  JPEG_SWREG216;                /*!< (@ 0x00000360) swreg216 register                                          */
  __IM  uint32_t  JPEG_SWREG217;                /*!< (@ 0x00000364) swreg217 register                                          */
  __IM  uint32_t  JPEG_SWREG218;                /*!< (@ 0x00000368) swreg218 register                                          */
  __IM  uint32_t  JPEG_SWREG219;                /*!< (@ 0x0000036C) swreg219 register                                          */
  __IM  uint32_t  JPEG_SWREG220;                /*!< (@ 0x00000370) swreg220 register                                          */
  __IM  uint32_t  JPEG_SWREG221;                /*!< (@ 0x00000374) swreg221 register                                          */
  __IM  uint32_t  JPEG_SWREG222;                /*!< (@ 0x00000378) swreg222 register                                          */
  __IM  uint32_t  JPEG_SWREG223;                /*!< (@ 0x0000037C) swreg223 register                                          */
  __IOM uint32_t  JPEG_SWREG224;                /*!< (@ 0x00000380) swreg224 register                                          */
  __IM  uint32_t  RESERVED17;
  __IM  uint32_t  JPEG_SWREG226;                /*!< (@ 0x00000388) swreg226 register                                          */
  __IM  uint32_t  RESERVED18[19];
  __IOM uint32_t  JPEG_SWREG246;                /*!< (@ 0x000003D8) swreg246 register                                          */
  __IM  uint32_t  RESERVED19[2];
  __IOM uint32_t  JPEG_SWREG249;                /*!< (@ 0x000003E4) swreg249 register                                          */
  __IM  uint32_t  RESERVED20[11];
  __IOM uint32_t  JPEG_SWREG261;                /*!< (@ 0x00000414) swreg261 register                                          */
  __IM  uint32_t  RESERVED21[15];
  __IOM uint32_t  JPEG_SWREG277;                /*!< (@ 0x00000454) swreg277 register                                          */
  __IOM uint32_t  JPEG_SWREG278;                /*!< (@ 0x00000458) swreg278 register                                          */
  __IOM uint32_t  JPEG_SWREG279;                /*!< (@ 0x0000045C) swreg279 register                                          */
  __IOM uint32_t  JPEG_SWREG280;                /*!< (@ 0x00000460) swreg280 register                                          */
  __IOM uint32_t  JPEG_SWREG281;                /*!< (@ 0x00000464) swreg281 register                                          */
  __IM  uint32_t  RESERVED22[5];
  __IM  uint32_t  JPEG_SWREG287;                /*!< (@ 0x0000047C) swreg287 register                                          */
  __IOM uint32_t  JPEG_SWREG288;                /*!< (@ 0x00000480) swreg288 register                                          */
  __IOM uint32_t  JPEG_SWREG289;                /*!< (@ 0x00000484) swreg289 register                                          */
  __IM  uint32_t  JPEG_SWREG290;                /*!< (@ 0x00000488) swreg290 register                                          */
  __IM  uint32_t  JPEG_SWREG291;                /*!< (@ 0x0000048C) swreg291 register                                          */
  __IM  uint32_t  JPEG_SWREG292;                /*!< (@ 0x00000490) swreg292 register                                          */
  __IM  uint32_t  JPEG_SWREG293;                /*!< (@ 0x00000494) swreg293 register                                          */
  __IM  uint32_t  JPEG_SWREG294;                /*!< (@ 0x00000498) swreg294 register                                          */
  __IM  uint32_t  JPEG_SWREG295;                /*!< (@ 0x0000049C) swreg295 register                                          */
  __IM  uint32_t  JPEG_SWREG296;                /*!< (@ 0x000004A0) swreg296 register                                          */
  __IM  uint32_t  JPEG_SWREG297;                /*!< (@ 0x000004A4) swreg297 register                                          */
  __IM  uint32_t  JPEG_SWREG298;                /*!< (@ 0x000004A8) swreg298 register                                          */
  __IM  uint32_t  RESERVED23[9];
  __IM  uint32_t  JPEG_SWREG308;                /*!< (@ 0x000004D0) swreg308 register                                          */
  __IM  uint32_t  RESERVED24[2];
  __IM  uint32_t  JPEG_SWREG311;                /*!< (@ 0x000004DC) swreg311 register                                          */
  __IM  uint32_t  RESERVED25[5];
  __IM  uint32_t  JPEG_SWREG317;                /*!< (@ 0x000004F4) swreg317 register                                          */
  __IM  uint32_t  RESERVED26;
  __IM  uint32_t  JPEG_SWREG319;                /*!< (@ 0x000004FC) swreg319 register                                          */
  __IOM uint32_t  JPEG_SWREG320;                /*!< (@ 0x00000500) swreg320 register                                          */
  __IM  uint32_t  RESERVED27[28];
  __IOM uint32_t  JPEG_SWREG349;                /*!< (@ 0x00000574) swreg349 register                                          */
  __IM  uint32_t  RESERVED28[80];
  __IM  uint32_t  JPEG_SWREG430;                /*!< (@ 0x000006B8) swreg430 register                                          */
  __IM  uint32_t  RESERVED29[69];
  __IM  uint32_t  JPEG_SWREG500;                /*!< (@ 0x000007D0) swreg500 register                                          */
  __IM  uint32_t  JPEG_SWREG501;                /*!< (@ 0x000007D4) swreg501 register                                          */
  __IM  uint32_t  RESERVED30[7];
  __IM  uint32_t  JPEG_SWREG509;                /*!< (@ 0x000007F4) swreg509 register                                          */
  __IM  uint32_t  JPEG_SWREG510;                /*!< (@ 0x000007F8) swreg510 register                                          */
  __IM  uint32_t  JPEG_SWREG511;                /*!< (@ 0x000007FC) swreg511 register                                          */
} JPEG_Type;                                    /*!< Size = 2048 (0x800)                                                       */



/* =========================================================================================================================== */
/* ================                                           OSPI0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief OSPI0 (OSPI0)
  */

typedef struct {                                /*!< (@ 0x83000000) OSPI0 Structure                                            */
  __IOM uint32_t  OSPI_CTRLR0;                  /*!< (@ 0x00000000) OSPI Control Register 0                                    */
  __IOM uint32_t  OSPI_CTRLR1;                  /*!< (@ 0x00000004) OSPI Control Register 1                                    */
  __IOM uint32_t  OSPI_ENR;                     /*!< (@ 0x00000008) OSPI Enable Register                                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  OSPI_SER;                     /*!< (@ 0x00000010) OSPI Slave Enable Register                                 */
  __IOM uint32_t  OSPI_BAUDR;                   /*!< (@ 0x00000014) OSPI Baud Rate Select Register                             */
  __IOM uint32_t  OSPI_TXFTLR;                  /*!< (@ 0x00000018) OSPI Transmit FIFO Threshold Level Register                */
  __IOM uint32_t  OSPI_RXFTLR;                  /*!< (@ 0x0000001C) OSPI Receive FIFO Threshold Level Register                 */
  __IM  uint32_t  OSPI_TXFLR;                   /*!< (@ 0x00000020) OSPI Transmit FIFO Level Register                          */
  __IM  uint32_t  OSPI_RXFLR;                   /*!< (@ 0x00000024) OSPI Receive FIFO Level Register                           */
  __IM  uint32_t  OSPI_SR;                      /*!< (@ 0x00000028) OSPI Status Register                                       */
  __IOM uint32_t  OSPI_IMR;                     /*!< (@ 0x0000002C) OSPI Interrupt Mask Register                               */
  __IM  uint32_t  OSPI_ISR;                     /*!< (@ 0x00000030) OSPI Interrupt Status Register                             */
  __IM  uint32_t  OSPI_RISR;                    /*!< (@ 0x00000034) OSPI Raw Interrupt Status Register                         */
  __IM  uint32_t  OSPI_TXEICR;                  /*!< (@ 0x00000038) OSPI Transmit FIFO Error Interrupt Clear Register          */
  __IM  uint32_t  OSPI_RXOICR;                  /*!< (@ 0x0000003C) OSPI Receive FIFO Overflow Interrupt Clear Register        */
  __IM  uint32_t  OSPI_RXUICR;                  /*!< (@ 0x00000040) OSPI Receive FIFO Underflow Interrupt Clear Register       */
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  OSPI_ICR;                     /*!< (@ 0x00000048) OSPI Interrupt Clear Register                              */
  __IOM uint32_t  OSPI_DMACR;                   /*!< (@ 0x0000004C) OSPI DMA Control Register                                  */
  __IOM uint32_t  OSPI_DMATDLR;                 /*!< (@ 0x00000050) OSPI DMA Transmit Data Level Register                      */
  __IOM uint32_t  OSPI_DMARDLR;                 /*!< (@ 0x00000054) OSPI DMA Receive Data Level Register                       */
  __IM  uint32_t  OSPI_IDR;                     /*!< (@ 0x00000058) Identification Register                                    */
  __IM  uint32_t  OSPI_VERSION_ID;              /*!< (@ 0x0000005C) Version ID Register                                        */
  __IOM uint32_t  OSPI_DR[36];                  /*!< (@ 0x00000060) OSPI Data Register (n)                                     */
  __IOM uint32_t  OSPI_RX_SAMPLE_DELAY;         /*!< (@ 0x000000F0) OSPI Rx Sample Delay Register                              */
  __IOM uint32_t  OSPI_SPI_CTRLR0;              /*!< (@ 0x000000F4) OSPI SPI Control Register 0                                */
  __IOM uint32_t  OSPI_DDR_DRIVE_EDGE;          /*!< (@ 0x000000F8) OSPI Transmit Drive Edge Register                          */
  __IOM uint32_t  OSPI_XIP_MODE_BITS;           /*!< (@ 0x000000FC) OSPI XIP Mode Bits Register                                */
  __IOM uint32_t  OSPI_XIP_INCR_INST;           /*!< (@ 0x00000100) OSPI XIP INCR Transfer Opcode Register                     */
  __IOM uint32_t  OSPI_XIP_WRAP_INST;           /*!< (@ 0x00000104) OSPI XIP WRAP Transfer Opcode Register                     */
  __IOM uint32_t  OSPI_XIP_CTRL;                /*!< (@ 0x00000108) OSPI XIP Control Register                                  */
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  OSPI_XIP_CNT_TIME_OUT;        /*!< (@ 0x00000114) OSPI XIP Timeout Register for Continuous Transfers         */
  __IOM uint32_t  OSPI_SPI_CTRLR1;              /*!< (@ 0x00000118) OSPI SPI Control Register 1                                */
  __IM  uint32_t  RESERVED3[9];
  __IOM uint32_t  OSPI_XIP_WRITE_INCR_INST;     /*!< (@ 0x00000140) OSPI XIP Write INCR Transfer Opcode Register               */
  __IOM uint32_t  OSPI_XIP_WRITE_WRAP_INST;     /*!< (@ 0x00000144) OSPI XIP Write WRAP Transfer Opcode Register               */
  __IOM uint32_t  OSPI_XIP_WRITE_CTRL;          /*!< (@ 0x00000148) OSPI XIP Write Control Register                            */
} OSPI_Type;                                    /*!< Size = 332 (0x14c)                                                        */



/* =========================================================================================================================== */
/* ================                                           AES0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES0 (AES0)
  */

typedef struct {                                /*!< (@ 0x83001000) AES0 Structure                                             */
  __IOM uint32_t  AES_CONTROL;                  /*!< (@ 0x00000000) AES Control Register                                       */
  __IOM uint32_t  AES_INTERRUPT;                /*!< (@ 0x00000004) AES Interrupt Control Register                             */
  __IOM uint32_t  AES_INTERRUPT_MASK;           /*!< (@ 0x00000008) AES Interrupt Mask Register                                */
  __IOM uint32_t  AES_CLK_DIS;                  /*!< (@ 0x0000000C) AES Clock Disable Register                                 */
  __IOM uint32_t  AES_ADDR_CONTROL;             /*!< (@ 0x000000010) AES Address Control Register                              */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  AES_RXDS_DELAY;               /*!< (@ 0x00000020) OSPI RXDS Delay Register                                   */
  __IM  uint32_t  RESERVED1[7];
  __IOM uint32_t  AES_RXD_DELAY_0;              /*!< (@ 0x00000040) OSPI RXD[3:0] Delay Register                               */
  __IOM uint32_t  AES_RXD_DELAY_1;              /*!< (@ 0x00000044) OSPI RXD[7:4] Delay Register                               */
  __IOM uint32_t  AES_RXD_DELAY_2;              /*!< (@ 0x00000048) OSPI RXD[11:8] Delay Register                              */
  __IOM uint32_t  AES_RXD_DELAY_3;              /*!< (@ 0x0000004C) OSPI RXD[15:12] Delay Register                             */
  __IOM uint32_t  AES_TXD_DELAY_0;              /*!< (@ 0x00000050) OSPI TXD[3:0] Delay Register                               */
  __IOM uint32_t  AES_TXD_DELAY_1;              /*!< (@ 0x00000054) OSPI TXD[7:4] Delay Register                               */
  __IOM uint32_t  AES_TXD_DELAY_2;              /*!< (@ 0x00000058) OSPI TXD[11:8] Delay Register                              */
  __IOM uint32_t  AES_TXD_DELAY_3;              /*!< (@ 0x0000005C) OSPI TXD[15:12] Delay Register                             */
  __IOM uint32_t  AES_SSI_OE_N_DELAY_0;         /*!< (@ 0x00000060) OSPI SSI_OE_N[3:0] Delay Register                          */
  __IOM uint32_t  AES_SSI_OE_N_DELAY_1;         /*!< (@ 0x00000064) OSPI SSI_OE_N[7:4] Delay Register                          */
  __IOM uint32_t  AES_SSI_OE_N_DELAY_2;         /*!< (@ 0x00000068) OSPI SSI_OE_N[11:8] Delay Register                         */
  __IOM uint32_t  AES_SSI_OE_N_DELAY_3;         /*!< (@ 0x0000006C) OSPI SSI_OE_N[15:12] Delay Register                        */
  __IOM uint32_t  AES_SS_N_DELAY;               /*!< (@ 0x00000070) OSPI SS_N Delay Register                                   */
  __IOM uint32_t  AES_TXD_DM_DELAY;             /*!< (@ 0x00000074) OSPI TXD_DM Delay Register                                 */
  __IOM uint32_t  AES_SCLK_DELAY;               /*!< (@ 0x00000078) OSPI SLCK Delay Register                                   */
} AES_Type;                                     /*!< Size = 124 (0x7c)                                                         */



/* =========================================================================================================================== */
/* ================                                       M55HE_NVIC_S                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief M55HE_NVIC_S (M55HE_NVIC_S)
  */

typedef struct {                                /*!< (@ 0xE000E100) M55HE_NVIC_S Structure                                     */
  __IOM uint32_t  NVIC_ISER[15];                /*!< (@ 0x00000000) Interrupt Set-Enable Register (n)                          */
  __IM  uint32_t  RESERVED[17];
  __IOM uint32_t  NVIC_ICER[15];                /*!< (@ 0x00000080) Interrupt Clear-Enable Register (n)                        */
  __IM  uint32_t  RESERVED1[17];
  __IOM uint32_t  NVIC_ISPR[15];                /*!< (@ 0x00000100) Interrupt Set-Pending Register (n)                         */
  __IM  uint32_t  RESERVED2[17];
  __IOM uint32_t  NVIC_ICPR[15];                /*!< (@ 0x00000180) Interrupt Clear-Pending Register (n)                       */
  __IM  uint32_t  RESERVED3[17];
  __IM  uint32_t  NVIC_IABR[15];                /*!< (@ 0x00000200) Interrupt Active Bit Register (n)                          */
  __IM  uint32_t  RESERVED4[17];
  __IOM uint32_t  NVIC_ITNS[15];                /*!< (@ 0x00000280) Interrupt Target Non-Secure Register (n)                   */
  __IM  uint32_t  RESERVED5[17];
  __IOM uint32_t  NVIC_IPR[120];                /*!< (@ 0x00000300) Interrupt Priority Register (n)                            */
} M55HE_NVIC_Type;                              /*!< Size = 1248 (0x4e0)                                                       */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define CLKCTL_SYS_BASE             0x1A010000UL
#define REFCLK_CNTControl_BASE      0x1A200000UL
#define REFCLK_CNTRead_BASE         0x1A210000UL
#define REFCLK_CNT_CTL_BASE         0x1A220000UL
#define REFCLK_CNT_BASE0_BASE       0x1A230000UL
#define REFCLK_CNT_BASE1_BASE       0x1A240000UL
#define REFCLK_CNT_BASE2_BASE       0x1A250000UL
#define REFCLK_CNT_BASE3_BASE       0x1A260000UL
#define WDT_AP_CTRL_BASE            0x1A300000UL
#define WDT_AP_REFRESH_BASE         0x1A310000UL
#define WDT_AP_S_CTRL_BASE          0x1A320000UL
#define WDT_AP_S_REFRESH_BASE       0x1A330000UL
#define S32K_CNTControl_BASE        0x1A400000UL
#define S32K_CNTRead_BASE           0x1A410000UL
#define S32KCLK_CNT_CTL_BASE        0x1A420000UL
#define S32KCLK_CNT_BASE0_BASE      0x1A430000UL
#define S32KCLK_CNT_BASE1_BASE      0x1A440000UL
#define IRQRTR_BASE                 0x1A500000UL
#define CGU_BASE                    0x1A602000UL
#define PINMUX_BASE                 0x1A603000UL
#define AON_BASE                    0x1A604000UL
#define VBAT_BASE                   0x1A609000UL
#define ANA_BASE                    0x1A60A000UL
#define STOP_MODE_BASE              0x1A60F000UL
#define MHU_A32_M55HE_0_RX_BASE     0x40000000UL
#define MHU_M55HE_A32_0_TX_BASE     0x40010000UL
#define MHU_A32_M55HE_1_RX_BASE     0x40020000UL
#define MHU_M55HE_A32_1_TX_BASE     0x40030000UL
#define MHU_SECPU_M55HE_0_RX_BASE   0x40040000UL
#define MHU_M55HE_SECPU_0_TX_BASE   0x40050000UL
#define MHU_SECPU_M55HE_1_RX_BASE   0x40060000UL
#define MHU_M55HE_SECPU_1_TX_BASE   0x40070000UL
#define MHU_M55HP_M55HE_0_RX_BASE   0x40080000UL
#define MHU_M55HE_M55HP_0_TX_BASE   0x40090000UL
#define MHU_M55HP_M55HE_1_RX_BASE   0x400A0000UL
#define MHU_M55HE_M55HP_1_TX_BASE   0x400B0000UL
#define DMA2_SEC_BASE               0x400C0000UL
#define DMA2_NS_BASE                0x400E0000UL
#define NPU_HE_BASE                 0x400E1000UL
#define EVTRTR2_BASE                0x400E2000UL
#define WDT_HE_CTRL_BASE            0x40100000UL
#define WDT_HE_REFRESH_BASE         0x40101000UL
#define LPRTC0_BASE                  0x42000000UL
#define LPTIMER_BASE                0x42001000UL
#define LPGPIO_BASE                 0x42002000UL
#define LPCMP_BASE                  0x42003000UL
#define BOR_BOD_BASE                0x42004000UL
#define LPGPIO_CTRL_BASE            0x42007000UL
#define LPSPI0_BASE                 0x43000000UL
#define LPI2S_BASE                  0x43001000UL
#define LPPDM_BASE                  0x43002000UL
#define LPCPI_BASE                  0x43003000UL
#define LPSPI1_BASE                 0x43004000UL
#define LPI2C1_BASE                 0x43005000UL
#define LPI3C_BASE                  0x43006000UL
#define M55HE_CFG_BASE              0x43007000UL
#define LPUART_BASE                 0x43008000UL
#define LPI2C0_BASE                 0x43009000UL
#define GPIO16_BASE                 0x4300A000UL
#define GPIO17_BASE                 0x4300B000UL
#define LPUTIMER_BASE               0x4300C000UL
#define UTIMER_BASE                 0x48000000UL
#define ETH_BASE                    0x48100000UL
#define SDMMC_BASE                  0x48102000UL
#define SPI0_BASE                   0x48103000UL
#define SPI1_BASE                   0x48104000UL
#define SPI2_BASE                   0x48105000UL
#define SPI3_BASE                   0x48106000UL
#define CRC0_BASE                   0x48107000UL
#define CRC1_BASE                   0x48108000UL
#define USB_BASE                    0x48200000UL
#define GPIO0_BASE                  0x49000000UL
#define GPIO1_BASE                  0x49001000UL
#define GPIO2_BASE                  0x49002000UL
#define GPIO3_BASE                  0x49003000UL
#define GPIO4_BASE                  0x49004000UL
#define GPIO5_BASE                  0x49005000UL
#define GPIO6_BASE                  0x49006000UL
#define GPIO7_BASE                  0x49007000UL
#define GPIO8_BASE                  0x49008000UL
#define GPIO9_BASE                  0x49009000UL
#define GPIO10_BASE                 0x4900A000UL
#define GPIO11_BASE                 0x4900B000UL
#define GPIO12_BASE                 0x4900C000UL
#define GPIO13_BASE                 0x4900D000UL
#define GPIO14_BASE                 0x4900E000UL
#define I2C0_BASE                   0x49010000UL
#define I2C1_BASE                   0x49011000UL
#define I2C2_BASE                   0x49012000UL
#define I2C3_BASE                   0x49013000UL
#define I2S0_BASE                   0x49014000UL
#define I2S1_BASE                   0x49015000UL
#define I2S2_BASE                   0x49016000UL
#define I2S3_BASE                   0x49017000UL
#define UART0_BASE                  0x49018000UL
#define UART1_BASE                  0x49019000UL
#define UART2_BASE                  0x4901A000UL
#define UART3_BASE                  0x4901B000UL
#define UART4_BASE                  0x4901C000UL
#define UART5_BASE                  0x4901D000UL
#define UART6_BASE                  0x4901E000UL
#define UART7_BASE                  0x4901F000UL
#define ADC120_BASE                 0x49020000UL
#define ADC121_BASE                 0x49021000UL
#define ADC122_BASE                 0x49022000UL
#define CMP0_BASE                   0x49023000UL
#define CMP1_BASE                   0x49024000UL
#define CMP2_BASE                   0x49025000UL
#define CMP3_BASE                   0x49026000UL
#define ADC24_BASE                  0x49027000UL
#define DAC120_BASE                 0x49028000UL
#define DAC121_BASE                 0x49029000UL
#define DAC6_BASE                   0x4902A000UL
#define ADC_VREF_BASE               0x4902B000UL
#define PDM_BASE                    0x4902D000UL
#define HWSEM0_BASE                 0x4902E000UL
#define HWSEM1_BASE                 0x4902E010UL
#define HWSEM2_BASE                 0x4902E020UL
#define HWSEM3_BASE                 0x4902E030UL
#define HWSEM4_BASE                 0x4902E040UL
#define HWSEM5_BASE                 0x4902E050UL
#define HWSEM6_BASE                 0x4902E060UL
#define HWSEM7_BASE                 0x4902E070UL
#define HWSEM8_BASE                 0x4902E080UL
#define HWSEM9_BASE                 0x4902E090UL
#define HWSEM10_BASE                0x4902E0A0UL
#define HWSEM11_BASE                0x4902E0B0UL
#define HWSEM12_BASE                0x4902E0C0UL
#define HWSEM13_BASE                0x4902E0D0UL
#define HWSEM14_BASE                0x4902E0E0UL
#define HWSEM15_BASE                0x4902E0F0UL
#define CLKCTL_PER_SLV_BASE         0x4902F000UL
#define CPI_BASE                    0x49030000UL
#define CDC_BASE                    0x49031000UL
#define DSI_BASE                    0x49032000UL
#define CSI_BASE                    0x49033000UL
#define I3C_BASE                    0x49034000UL
#define EVTRTR0_BASE                0x49035000UL
#define CANFD0_BASE                 0x49036000UL
#define CANFD0_CNT_BASE             0x49037000UL
#define CLKCTL_PER_MST_BASE         0x4903F000UL
#define GPU2D_BASE                  0x49040000UL
#define NPU_HG_BASE                 0x49042000UL
#define JPEG_BASE                   0x49044000UL
#define DMA0_SEC_BASE               0x49080000UL
#define DMA0_NS_BASE                0x490A0000UL
#define OSPI0_BASE                  0x83000000UL
#define AES0_BASE                   0x83001000UL
#define OSPI1_BASE                  0x83002000UL
#define AES1_BASE                   0x83003000UL
#define M55HE_NVIC_S_BASE           0xE000E100UL
#define M55HE_NVIC_NS_BASE          0xE002E100UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */
#define REFCLK_CNTControl           ((CNTControlBase_Type*)    REFCLK_CNTControl_BASE)
#define REFCLK_CNTRead              ((CNTReadBase_Type*)       REFCLK_CNTRead_BASE)
#define S32K_CNTControl             ((CNTControlBase_Type*)    S32K_CNTControl_BASE)
#define S32K_CNTRead                ((CNTReadBase_Type*)       S32K_CNTRead_BASE)
#define CLKCTL_SYS                  ((CLKCTL_SYS_Type*)        CLKCTL_SYS_BASE)
#define REFCLK_CNT_READ             ((REFCLK_CNT_READ_Type*)   REFCLK_CNT_READ_BASE)
#define REFCLK_CNT_CTL              ((REFCLK_CNT_CTL_Type*)    REFCLK_CNT_CTL_BASE)
#define REFCLK_CNT_BASE0            ((REFCLK_CNT_BASE_Type*)   REFCLK_CNT_BASE0_BASE)
#define REFCLK_CNT_BASE1            ((REFCLK_CNT_BASE_Type*)   REFCLK_CNT_BASE1_BASE)
#define REFCLK_CNT_BASE2            ((REFCLK_CNT_BASE_Type*)   REFCLK_CNT_BASE2_BASE)
#define REFCLK_CNT_BASE3            ((REFCLK_CNT_BASE_Type*)   REFCLK_CNT_BASE3_BASE)
#define WDT_AP_CTRL                 ((WDT_AP_CTRL_Type*)       WDT_AP_CTRL_BASE)
#define WDT_AP_REFRESH              ((WDT_AP_CTRL_Type*)       WDT_AP_REFRESH_BASE)
#define WDT_AP_S_CTRL               ((WDT_AP_CTRL_Type*)       WDT_AP_S_CTRL_BASE)
#define WDT_AP_S_REFRESH            ((WDT_AP_CTRL_Type*)       WDT_AP_S_REFRESH_BASE)
#define S32KCLK_CNT_READ            ((REFCLK_CNT_READ_Type*)   S32KCLK_CNT_READ_BASE)
#define S32KCLK_CNT_CTL             ((REFCLK_CNT_CTL_Type*)    S32KCLK_CNT_CTL_BASE)
#define S32KCLK_CNT_BASE0           ((REFCLK_CNT_BASE_Type*)   S32KCLK_CNT_BASE0_BASE)
#define S32KCLK_CNT_BASE1           ((REFCLK_CNT_BASE_Type*)   S32KCLK_CNT_BASE1_BASE)
#define IRQRTR                      ((IRQRTR_Type*)            IRQRTR_BASE)
#define CGU                         ((CGU_Type*)               CGU_BASE)
#define PINMUX                      ((PINMUX_Type*)            PINMUX_BASE)
#define AON                         ((AON_Type*)               AON_BASE)
#define VBAT                        ((VBAT_Type*)              VBAT_BASE)
#define ANA                         ((ANA_Type*)               ANA_BASE)
#define STOP_MODE                   ((STOP_MODE_Type*)         STOP_MODE_BASE)
#define MHU_A32_M55HE_0_RX          ((MHU_A32_M55HE_RX_Type*)    MHU_A32_M55HE_0_RX_BASE)
#define MHU_M55HE_A32_0_TX          ((MHU_M55HE_A32_TX_Type*)    MHU_M55HE_A32_0_TX_BASE)
#define MHU_A32_M55HE_1_RX          ((MHU_A32_M55HE_RX_Type*)    MHU_A32_M55HE_1_RX_BASE)
#define MHU_M55HE_A32_1_TX          ((MHU_M55HE_A32_TX_Type*)    MHU_M55HE_A32_1_TX_BASE)
#define MHU_SECPU_M55HE_0_RX        ((MHU_A32_M55HE_RX_Type*)    MHU_SECPU_M55HE_0_RX_BASE)
#define MHU_M55HE_SECPU_0_TX        ((MHU_M55HE_A32_TX_Type*)    MHU_M55HE_SECPU_0_TX_BASE)
#define MHU_SECPU_M55HE_1_RX        ((MHU_A32_M55HE_RX_Type*)    MHU_SECPU_M55HE_1_RX_BASE)
#define MHU_M55HE_SECPU_1_TX        ((MHU_M55HE_A32_TX_Type*)    MHU_M55HE_SECPU_1_TX_BASE)
#define MHU_M55HP_M55HE_0_RX        ((MHU_A32_M55HE_RX_Type*)    MHU_M55HP_M55HE_0_RX_BASE)
#define MHU_M55HE_M55HP_0_TX        ((MHU_M55HE_A32_TX_Type*)    MHU_M55HE_M55HP_0_TX_BASE)
#define MHU_M55HP_M55HE_1_RX        ((MHU_A32_M55HE_RX_Type*)    MHU_M55HP_M55HE_1_RX_BASE)
#define MHU_M55HE_M55HP_1_TX        ((MHU_M55HE_A32_TX_Type*)    MHU_M55HE_M55HP_1_TX_BASE)
#define DMA2_SEC                    ((DMA_Type*)               DMA2_SEC_BASE)
#define DMA2_NS                     ((DMA_Type*)               DMA2_NS_BASE)
#define NPU_HE                      ((NPU_HE_Type*)            NPU_HE_BASE)
#define EVTRTR2                     ((EVTRTR_Type*)             EVTRTR2_BASE)
#define WDT_HE_CTRL                 ((WDT_HE_CTRL_Type*)       WDT_HE_CTRL_BASE)
#define WDT_HE_REFRESH              ((WDT_HE_CTRL_Type*)       WDT_HE_REFRESH_BASE)
#define LPRTC0                       ((LPRTC_Type*)             LPRTC0_BASE)
#define LPTIMER                     ((LPTIMER_Type*)           LPTIMER_BASE)
#define LPGPIO                      ((GPIO_Type*)              LPGPIO_BASE)
#define LPCMP                       ((LPCMP_Type*)             LPCMP_BASE)
#define BOR_BOD                     ((BOR_BOD_Type*)           BOR_BOD_BASE)
#define LPGPIO_CTRL                 ((LPGPIO_CTRL_Type*)       LPGPIO_CTRL_BASE)
#define LPSPI0                      ((LPSPI_Type*)             LPSPI0_BASE)
#define LPI2S                       ((I2S_Type*)               LPI2S_BASE)
#define LPPDM                       ((PDM_Type*)               LPPDM_BASE)
#define LPCPI                       ((CPI_Type*)               LPCPI_BASE)
#define LPSPI1                      ((LPSPI_Type*)             LPSPI1_BASE)
#define LPI2C1                      ((LPI2C_Type*)             LPI2C1_BASE)
#define LPI3C                       ((I3C_Type*)               LPI3C_BASE)
#define M55HE_CFG                   ((M55HE_CFG_Type*)         M55HE_CFG_BASE)
#define LPUART                      ((UART_Type*)              LPUART_BASE)
#define LPI2C0                      ((LPI2C_Type*)             LPI2C0_BASE)
#define GPIO16                      ((GPIO_Type*)              GPIO16_BASE)
#define GPIO17                      ((GPIO_Type*)              GPIO17_BASE)
#define LPUTIMER                    ((UTIMER_Type*)            LPUTIMER_BASE)
#define UTIMER                      ((UTIMER_Type*)            UTIMER_BASE)
#define ETH                         ((ETH_Type*)               ETH_BASE)
#define SDMMC                       ((SDMMC_Type*)             SDMMC_BASE)
#define SPI0                        ((SPI_Type*)               SPI0_BASE)
#define SPI1                        ((SPI_Type*)               SPI1_BASE)
#define SPI2                        ((SPI_Type*)               SPI2_BASE)
#define SPI3                        ((SPI_Type*)               SPI3_BASE)
#define CRC0                        ((CRC_Type*)               CRC0_BASE)
#define CRC1                        ((CRC_Type*)               CRC1_BASE)
#define USB                         ((USB_Type*)               USB_BASE)
#define GPIO0                       ((GPIO_Type*)              GPIO0_BASE)
#define GPIO1                       ((GPIO_Type*)              GPIO1_BASE)
#define GPIO2                       ((GPIO_Type*)              GPIO2_BASE)
#define GPIO3                       ((GPIO_Type*)              GPIO3_BASE)
#define GPIO4                       ((GPIO_Type*)              GPIO4_BASE)
#define GPIO5                       ((GPIO_Type*)              GPIO5_BASE)
#define GPIO6                       ((GPIO_Type*)              GPIO6_BASE)
#define GPIO7                       ((GPIO_Type*)              GPIO7_BASE)
#define GPIO8                       ((GPIO_Type*)              GPIO8_BASE)
#define GPIO9                       ((GPIO_Type*)              GPIO9_BASE)
#define GPIO10                      ((GPIO_Type*)              GPIO10_BASE)
#define GPIO11                      ((GPIO_Type*)              GPIO11_BASE)
#define GPIO12                      ((GPIO_Type*)              GPIO12_BASE)
#define GPIO13                      ((GPIO_Type*)              GPIO13_BASE)
#define GPIO14                      ((GPIO_Type*)              GPIO14_BASE)
#define I2C0                        ((I2C_Type*)               I2C0_BASE)
#define I2C1                        ((I2C_Type*)               I2C1_BASE)
#define I2C2                        ((I2C_Type*)               I2C2_BASE)
#define I2C3                        ((I2C_Type*)               I2C3_BASE)
#define I2S0                        ((I2S_Type*)               I2S0_BASE)
#define I2S1                        ((I2S_Type*)               I2S1_BASE)
#define I2S2                        ((I2S_Type*)               I2S2_BASE)
#define I2S3                        ((I2S_Type*)               I2S3_BASE)
#define UART0                       ((UART_Type*)              UART0_BASE)
#define UART1                       ((UART_Type*)              UART1_BASE)
#define UART2                       ((UART_Type*)              UART2_BASE)
#define UART3                       ((UART_Type*)              UART3_BASE)
#define UART4                       ((UART_Type*)              UART4_BASE)
#define UART5                       ((UART_Type*)              UART5_BASE)
#define UART6                       ((UART_Type*)              UART6_BASE)
#define UART7                       ((UART_Type*)              UART7_BASE)
#define ADC120                      ((ADC_Type*)               ADC120_BASE)
#define ADC121                      ((ADC_Type*)               ADC121_BASE)
#define ADC122                      ((ADC_Type*)               ADC122_BASE)
#define CMP0                        ((CMP_Type*)               CMP0_BASE)
#define CMP1                        ((CMP_Type*)               CMP1_BASE)
#define CMP2                        ((CMP_Type*)               CMP2_BASE)
#define CMP3                        ((CMP_Type*)               CMP3_BASE)
#define ADC24                       ((ADC_Type*)               ADC24_BASE)
#define DAC120                      ((DAC_Type*)               DAC120_BASE)
#define DAC121                      ((DAC_Type*)               DAC121_BASE)
#define DAC6                        ((DAC6_Type*)              DAC6_BASE)
#define ADC_VREF                    ((ADC_VREF_Type*)          ADC_VREF_BASE)
#define PDM                         ((PDM_Type*)               PDM_BASE)
#define HWSEM0                      ((HWSEM_Type*)             HWSEM0_BASE)
#define HWSEM1                      ((HWSEM_Type*)             HWSEM1_BASE)
#define HWSEM2                      ((HWSEM_Type*)             HWSEM2_BASE)
#define HWSEM3                      ((HWSEM_Type*)             HWSEM3_BASE)
#define HWSEM4                      ((HWSEM_Type*)             HWSEM4_BASE)
#define HWSEM5                      ((HWSEM_Type*)             HWSEM5_BASE)
#define HWSEM6                      ((HWSEM_Type*)             HWSEM6_BASE)
#define HWSEM7                      ((HWSEM_Type*)             HWSEM7_BASE)
#define HWSEM8                      ((HWSEM_Type*)             HWSEM8_BASE)
#define HWSEM9                      ((HWSEM_Type*)             HWSEM9_BASE)
#define HWSEM10                     ((HWSEM_Type*)             HWSEM10_BASE)
#define HWSEM11                     ((HWSEM_Type*)             HWSEM11_BASE)
#define HWSEM12                     ((HWSEM_Type*)             HWSEM12_BASE)
#define HWSEM13                     ((HWSEM_Type*)             HWSEM13_BASE)
#define HWSEM14                     ((HWSEM_Type*)             HWSEM14_BASE)
#define HWSEM15                     ((HWSEM_Type*)             HWSEM15_BASE)
#define CLKCTL_PER_SLV              ((CLKCTL_PER_SLV_Type*)    CLKCTL_PER_SLV_BASE)
#define CPI                         ((CPI_Type*)               CPI_BASE)
#define CDC                         ((CDC_Type*)               CDC_BASE)
#define DSI                         ((DSI_Type*)               DSI_BASE)
#define CSI                         ((CSI_Type*)               CSI_BASE)
#define I3C                         ((I3C_Type*)               I3C_BASE)
#define EVTRTR0                     ((EVTRTR_Type*)            EVTRTR0_BASE)
#define CANFD0                      ((CANFD_Type*)             CANFD0_BASE)
#define CANFD0_CNT                  ((CAN_CNT_Type*)           CANFD0_CNT_BASE)
#define CLKCTL_PER_MST              ((CLKCTL_PER_MST_Type*)    CLKCTL_PER_MST_BASE)
#define GPU2D                       ((GPU2D_Type*)             GPU2D_BASE)
#define NPU_HG                      ((NPU_HG_Type*)            NPU_HG_BASE)
#define JPEG                        ((JPEG_Type*)              JPEG_BASE)
#define DMA0_SEC                    ((DMA_Type*)               DMA0_SEC_BASE)
#define DMA0_NS                     ((DMA_Type*)               DMA0_NS_BASE)
#define OSPI0                       ((OSPI_Type*)              OSPI0_BASE)
#define AES0                        ((AES_Type*)               AES0_BASE)
#define OSPI1                       ((OSPI_Type*)              OSPI1_BASE)
#define AES1                        ((AES_Type*)               AES1_BASE)
#define M55HE_NVIC_S                ((M55HE_NVIC_Type*)        M55HE_NVIC_S_BASE)
#define M55HE_NVIC_NS               ((M55HE_NVIC_Type*)        M55HE_NVIC_NS_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* AE822FA0E5597LS0_CM55_HE_VIEW_H */


/** @} */ /* End of group AE822FA0E5597LS0_CM55_HE_View */

/** @} */ /* End of group Alif Semiconductor */
